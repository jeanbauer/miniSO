Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 1
command.ASM



      1				     $comm   macro   name,dist,size,count
      2					     comm    dist name[size]:BYTE:count
      3					     endm
      4					     ?debug  V 300h
      5					     ?debug  S "command.c"
      6					     ?debug  C E94F0E864B09636F6D6D616E642E63
      7					     ?debug  C E98FA6684B086D696E69534F2E68
      8					     ?debug  C E9130E864B09636F6D6D616E642E68
      9					     ?debug  C E9D2A4684B056C69622E68
     10	0000			     _TEXT   segment byte public 'CODE'
     11	0000			     _TEXT   ends
     12				     DGROUP  group   _DATA,_BSS
     13					     assume  cs:_TEXT,ds:DGROUP
     14	0000			     _DATA   segment word public 'DATA'
     15	0000			     d@	     label   byte
     16	0000			     d@w     label   word
     17	0000			     _DATA   ends
     18	0000			     _BSS    segment word public 'BSS'
     19	0000			     b@	     label   byte
     20	0000			     b@w     label   word
     21	0000			     _BSS    ends
     22	0000			     _DATA   segment word public 'DATA'
     23	0000			     num_var label   word
     24	0000  00			     db	     0
     25	0001  00			     db	     0
     26	0002			     commands	     label   word
     27	0002  00B4r			     dw	     DGROUP:s@
     28	0004  00B6r			     dw	     DGROUP:s@+2
     29	0006  081Dr			     dw	     _cmd_help
     30	0008  00E1r			     dw	     DGROUP:s@+45
     31	000A  00E6r			     dw	     DGROUP:s@+50
     32	000C  081Dr			     dw	     _cmd_help
     33	000E  010Er			     dw	     DGROUP:s@+90
     34	0010  0112r			     dw	     DGROUP:s@+94
     35	0012  09C6r			     dw	     _cmd_ver
     36	0014  013Ar			     dw	     DGROUP:s@+134
     37	0016  013Fr			     dw	     DGROUP:s@+139
     38	0018  0875r			     dw	     _cmd_date
     39	001A  015Dr			     dw	     DGROUP:s@+169
     40	001C  0162r			     dw	     DGROUP:s@+174
     41	001E  0910r			     dw	     _cmd_time
     42	0020  0180r			     dw	     DGROUP:s@+204
     43	0022  0184r			     dw	     DGROUP:s@+208
     44	0024  09B0r			     dw	     _cmd_cls
     45	0026  01A2r			     dw	     DGROUP:s@+238
     46	0028  01A8r			     dw	     DGROUP:s@+244
     47	002A  09B0r			     dw	     _cmd_cls
     48	002C  01C4r			     dw	     DGROUP:s@+272
     49	002E  01CBr			     dw	     DGROUP:s@+279
     50	0030  07F2r			     dw	     _cmd_reboot
     51	0032  01F0r			     dw	     DGROUP:s@+316
     52	0034  01F5r			     dw	     DGROUP:s@+321
     53	0036  0808r			     dw	     _cmd_exit
     54	0038  0218r			     dw	     DGROUP:s@+356
     55	003A  021Dr			     dw	     DGROUP:s@+361
     56	003C  0808r			     dw	     _cmd_exit
     57	003E  0240r			     dw	     DGROUP:s@+396
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 2
command.ASM



     58	0040  0243r			     dw	     DGROUP:s@+399
     59	0042  09F5r			     dw	     _cmd_ps
     60	0044  0279r			     dw	     DGROUP:s@+453
     61	0046  027Er			     dw	     DGROUP:s@+458
     62	0048  0C9Br			     dw	     _cmd_kill
     63	004A  02A9r			     dw	     DGROUP:s@+501
     64	004C  02AEr			     dw	     DGROUP:s@+506
     65	004E  1014r			     dw	     _cmd_demo
     66	0050  02E7r			     dw	     DGROUP:s@+563
     67	0052  02EBr			     dw	     DGROUP:s@+567
     68	0054  0CE3r			     dw	     _cmd_set
     69	0056  032Ar			     dw	     DGROUP:s@+630
     70	0058  0330r			     dw	     DGROUP:s@+636
     71	005A  0D7Cr			     dw	     _cmd_unset
     72	005C  0350r			     dw	     DGROUP:s@+668
     73	005E  0355r			     dw	     DGROUP:s@+673
     74	0060  0DBCr			     dw	     _cmd_echo
     75	0062  0378r			     dw	     DGROUP:s@+708
     76	0064  0380r			     dw	     DGROUP:s@+716
     77	0066  1068r			     dw	     _cmd_waitpid
     78	0068  03B1r			     dw	     DGROUP:s@+765
     79	006A  03B6r			     dw	     DGROUP:s@+770
     80	006C  10F7r			     dw	     _cmd_wait
     81	006E  03E3r			     dw	     DGROUP:s@+815
     82	0070  03E9r			     dw	     DGROUP:s@+821
     83	0072  116Fr			     dw	     _cmd_semls
     84	0074  0412r			     dw	     DGROUP:s@+862
     85	0076  041Cr			     dw	     DGROUP:s@+872
     86	0078  1265r			     dw	     _cmd_semcreate
     87	007A  0438r			     dw	     DGROUP:s@+900
     88	007C  0440r			     dw	     DGROUP:s@+908
     89	007E  13FDr			     dw	     _cmd_semtest
     90	0080  046Fr			     dw	     DGROUP:s@+955
     91	0082  0475r			     dw	     DGROUP:s@+961
     92	0084  1451r			     dw	     _cmd_semup
     93	0086  04A6r			     dw	     DGROUP:s@+1010
     94	0088  04B1r			     dw	     DGROUP:s@+1021
     95	008A  148Ar			     dw	     _cmd_semdestroy
     96	008C  04CFr			     dw	     DGROUP:s@+1051
     97	008E  04D4r			     dw	     DGROUP:s@+1056
     98	0090  14C3r			     dw	     _cmd_stop
     99	0092  04F7r			     dw	     DGROUP:s@+1091
    100	0094  04FEr			     dw	     DGROUP:s@+1098
    101	0096  150Fr			     dw	     _cmd_resume
    102	0098  0521r			     dw	     DGROUP:s@+1133
    103	009A  052Ar			     dw	     DGROUP:s@+1142
    104	009C  181Cr			     dw	     _cmd_prodcons
    105	009E  0553r			     dw	     DGROUP:s@+1183
    106	00A0  0559r			     dw	     DGROUP:s@+1189
    107	00A2  18CDr			     dw	     _cmd_tprod
    108	00A4  056Br			     dw	     DGROUP:s@+1207
    109	00A6  0571r			     dw	     DGROUP:s@+1213
    110	00A8  18FCr			     dw	     _cmd_tcons
    111	00AA			     segundoDoProcessador    label   word
    112	00AA  C0			     db	     192
    113	00AB  27			     db	     39
    114	00AC  09			     db	     9
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 3
command.ASM



    115	00AD  00			     db	     0
    116	00AE			     tamanhoDoBuffer label   word
    117	00AE  00			     db	     0
    118	00AF  00			     db	     0
    119	00B0			     _DATA   ends
    120	0000			     _TEXT   segment byte public 'CODE'
    121					;
    122					;    void command()
    123					;
    124					     assume  cs:_TEXT
    125	0000			     _command	     proc    near
    126	0000  55			     push    bp
    127	0001  8B EC			     mov     bp,sp
    128	0003  83 EC 22			     sub     sp,34
    129	0006  56			     push    si
    130	0007  57			     push    di
    131					;
    132					;    {
    133					;      char car,str[10];
    134					;      int numcar;
    135					;      int i,achou,pos;
    136					;      int novalinha,res,argc;
    137					;      char far	*ptrline,far *var;
    138					;
    139					;      /* InicializaÁıes... */
    140					;      numcar =	0;
    141					;
    142	0008  33 F6			     xor     si,si
    143					;
    144					;      end_command = 0;
    145					;
    146	000A  C7 06 0657r 0000		     mov     word ptr DGROUP:end_command,0
    147					;
    148					;      history_ini = 0;
    149					;
    150	0010  C7 06 0240r 0000		     mov     word ptr DGROUP:history_ini,0
    151					;
    152					;      history_nxt = 0;
    153					;
    154	0016  C7 06 023Er 0000		     mov     word ptr DGROUP:history_nxt,0
    155					;
    156					;      history_pos = -1;
    157					;
    158	001C  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    159					;
    160					;      /* Mensagem inicial */
    161					;      setcolor(7);
    162					;
    163	0022  B8 0007			     mov     ax,7
    164	0025  50			     push    ax
    165	0026  E8 0000e			     call    near ptr _setcolor
    166	0029  59			     pop     cx
    167					;
    168					;      clrscr();
    169					;
    170	002A  E8 0000e			     call    near ptr _clrscr
    171					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 4
command.ASM



    172					;      setcolor(LOGOCOLOR);
    173					;
    174	002D  B8 0001			     mov     ax,1
    175	0030  50			     push    ax
    176	0031  E8 0000e			     call    near ptr _setcolor
    177	0034  59			     pop     cx
    178					;
    179					;      putstr("			 ‹‹‹‹‹‹‹  ‹‹‹‹‹‹\n");
    180					;
    181	0035  1E			     push    ds
    182	0036  B8 0585r			     mov     ax,offset DGROUP:s@+1233
    183	0039  50			     push    ax
    184	003A  E8 0000e			     call    near ptr _putstr
    185	003D  59			     pop     cx
    186	003E  59			     pop     cx
    187					;
    188					;      putstr("	‹‹‹‹‹  ‹  ‹‹‹  ‹ €€   ﬂﬂ  €€  €€  "); setcolor(7); putstr("MinisSistema	    +
    189				     Operacional\n"); setcolor(LOGOCOLOR);
    190					;
    191	003F  1E			     push    ds
    192	0040  B8 05A8r			     mov     ax,offset DGROUP:s@+1268
    193	0043  50			     push    ax
    194	0044  E8 0000e			     call    near ptr _putstr
    195	0047  59			     pop     cx
    196	0048  59			     pop     cx
    197	0049  B8 0007			     mov     ax,7
    198	004C  50			     push    ax
    199	004D  E8 0000e			     call    near ptr _setcolor
    200	0050  59			     pop     cx
    201	0051  1E			     push    ds
    202	0052  B8 05CCr			     mov     ax,offset DGROUP:s@+1304
    203	0055  50			     push    ax
    204	0056  E8 0000e			     call    near ptr _putstr
    205	0059  59			     pop     cx
    206	005A  59			     pop     cx
    207	005B  B8 0001			     mov     ax,1
    208	005E  50			     push    ax
    209	005F  E8 0000e			     call    near ptr _setcolor
    210	0062  59			     pop     cx
    211					;
    212					;      putstr("‹€ € € ‹€ ‹€ € ‹€ ﬂﬂﬂﬂ€€€ €€€  €€  "); setcolor(7); putstr("Vs "); putstr    +
    213				     (miniSO_VERSION); putstr("\n"); setcolor(LOGO
    214					;
    215	0063  1E			     push    ds
    216	0064  B8 05E6r			     mov     ax,offset DGROUP:s@+1330
    217	0067  50			     push    ax
    218	0068  E8 0000e			     call    near ptr _putstr
    219	006B  59			     pop     cx
    220	006C  59			     pop     cx
    221	006D  B8 0007			     mov     ax,7
    222	0070  50			     push    ax
    223	0071  E8 0000e			     call    near ptr _setcolor
    224	0074  59			     pop     cx
    225	0075  1E			     push    ds
    226	0076  B8 060Ar			     mov     ax,offset DGROUP:s@+1366
    227	0079  50			     push    ax
    228	007A  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 5
command.ASM



    229	007D  59			     pop     cx
    230	007E  59			     pop     cx
    231	007F  1E			     push    ds
    232	0080  B8 060Er			     mov     ax,offset DGROUP:s@+1370
    233	0083  50			     push    ax
    234	0084  E8 0000e			     call    near ptr _putstr
    235	0087  59			     pop     cx
    236	0088  59			     pop     cx
    237	0089  1E			     push    ds
    238	008A  B8 0613r			     mov     ax,offset DGROUP:s@+1375
    239	008D  50			     push    ax
    240	008E  E8 0000e			     call    near ptr _putstr
    241	0091  59			     pop     cx
    242	0092  59			     pop     cx
    243	0093  B8 0001			     mov     ax,1
    244	0096  50			     push    ax
    245	0097  E8 0000e			     call    near ptr _setcolor
    246	009A  59			     pop     cx
    247					;
    248					;      putstr("€€ € € €€ €€ € €€ €€‹‹€€€ €€€‹‹€€  "); setcolor(7); putstr("por Roland	    +
    249				     Teodorowitsch\n");
    250					;
    251	009B  1E			     push    ds
    252	009C  B8 0615r			     mov     ax,offset DGROUP:s@+1377
    253	009F  50			     push    ax
    254	00A0  E8 0000e			     call    near ptr _putstr
    255	00A3  59			     pop     cx
    256	00A4  59			     pop     cx
    257	00A5  B8 0007			     mov     ax,7
    258	00A8  50			     push    ax
    259	00A9  E8 0000e			     call    near ptr _setcolor
    260	00AC  59			     pop     cx
    261	00AD  1E			     push    ds
    262	00AE  B8 0639r			     mov     ax,offset DGROUP:s@+1413
    263	00B1  50			     push    ax
    264	00B2  E8 0000e			     call    near ptr _putstr
    265	00B5  59			     pop     cx
    266	00B6  59			     pop     cx
    267					;
    268					;      putstr("€€ € € €€ €€ € €€ €€‹‹€€€ €€€‹‹€€  "); setcolor(7); putstr("alteracoes por   +
    269				     Jean Bauer\n");
    270					;
    271	00B7  1E			     push    ds
    272	00B8  B8 0653r			     mov     ax,offset DGROUP:s@+1439
    273	00BB  50			     push    ax
    274	00BC  E8 0000e			     call    near ptr _putstr
    275	00BF  59			     pop     cx
    276	00C0  59			     pop     cx
    277	00C1  B8 0007			     mov     ax,7
    278	00C4  50			     push    ax
    279	00C5  E8 0000e			     call    near ptr _setcolor
    280	00C8  59			     pop     cx
    281	00C9  1E			     push    ds
    282	00CA  B8 0677r			     mov     ax,offset DGROUP:s@+1475
    283	00CD  50			     push    ax
    284	00CE  E8 0000e			     call    near ptr _putstr
    285	00D1  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 6
command.ASM



    286	00D2  59			     pop     cx
    287					;
    288					;
    289					;      putstr("\nDigite	'help' ou '?' para ajuda...\n\n");
    290					;
    291	00D3  1E			     push    ds
    292	00D4  B8 0692r			     mov     ax,offset DGROUP:s@+1502
    293	00D7  50			     push    ax
    294	00D8  E8 0000e			     call    near ptr _putstr
    295	00DB  59			     pop     cx
    296	00DC  59			     pop     cx
    297					;
    298					;
    299					;      putstr("\nModificado em 25/10/2017\n\n");
    300					;
    301	00DD  1E			     push    ds
    302	00DE  B8 06B8r			     mov     ax,offset DGROUP:s@+1540
    303	00E1  50			     push    ax
    304	00E2  E8 0000e			     call    near ptr _putstr
    305	00E5  59			     pop     cx
    306	00E6  59			     pop     cx
    307					;
    308					;      putstr("\nPor Jean... testando output\n\n");
    309					;
    310	00E7  1E			     push    ds
    311	00E8  B8 06D4r			     mov     ax,offset DGROUP:s@+1568
    312	00EB  50			     push    ax
    313	00EC  E8 0000e			     call    near ptr _putstr
    314	00EF  59			     pop     cx
    315	00F0  59			     pop     cx
    316					;
    317					;
    318					;      /* Inicializa vari·veis de ambiente */
    319					;      command_var_init();
    320					;
    321	00F1  E8 04F7			     call    near ptr command_var_init
    322					;
    323					;      command_var_set("PROMPT","miniSO>");
    324					;
    325	00F4  1E			     push    ds
    326	00F5  B8 06FAr			     mov     ax,offset DGROUP:s@+1606
    327	00F8  50			     push    ax
    328	00F9  1E			     push    ds
    329	00FA  B8 06F3r			     mov     ax,offset DGROUP:s@+1599
    330	00FD  50			     push    ax
    331	00FE  E8 066B			     call    near ptr command_var_set
    332	0101  83 C4 08			     add     sp,8
    333					;
    334					;      command_var_set("ERRORLEVEL","0");
    335					;
    336	0104  1E			     push    ds
    337	0105  B8 070Dr			     mov     ax,offset DGROUP:s@+1625
    338	0108  50			     push    ax
    339	0109  1E			     push    ds
    340	010A  B8 0702r			     mov     ax,offset DGROUP:s@+1614
    341	010D  50			     push    ax
    342	010E  E8 065B			     call    near ptr command_var_set
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 7
command.ASM



    343	0111  83 C4 08			     add     sp,8
    344					;
    345					;      /* Imprime sinal	de pronto */
    346					;      command_showprompt();
    347					;
    348	0114  E8 0488			     call    near ptr command_showprompt
    349	0117  E9 0427			     jmp     @1@3362
    350	011A			     @1@58:
    351					;
    352					;      /* LaÁo para interpretaÁ„o de comandos */
    353					;      while ( !end_command )  {
    354					;	     car=getch();
    355					;
    356	011A  E8 0000e			     call    near ptr _getch
    357	011D  88 46 FF			     mov     byte ptr [bp-1],al
    358					;
    359					;	     switch (car)  {
    360					;
    361	0120  8A 46 FF			     mov     al,byte ptr [bp-1]
    362	0123  98			     cbw
    363	0124  89 46 E0			     mov     word ptr [bp-32],ax
    364	0127  B9 0005			     mov     cx,5
    365	012A  BB 0561r			     mov     bx,offset @1@C3234
    366	012D			     @1@142:
    367	012D  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    368	0130  3B 46 E0			     cmp     ax,word ptr [bp-32]
    369	0133  74 08			     je	     short @1@226
    370	0135  83 C3 02			     add     bx,2
    371	0138  E2 F3			     loop    short @1@142
    372	013A  E9 03EE			     jmp     @1@3306
    373	013D			     @1@226:
    374	013D  2E: FF 67	0A		     jmp     word ptr cs:[bx+10]
    375	0141			     @1@254:
    376					;
    377					;		    case 9:
    378					;			 break;
    379					;
    380	0141  E9 03FD			     jmp     @1@3362
    381	0144			     @1@282:
    382					;
    383					;		    case 8:
    384					;			 if (numcar>0)	{
    385					;
    386	0144  0B F6			     or	     si,si
    387	0146  7E 04			     jle     short @1@338
    388					;
    389					;			    --numcar;
    390					;
    391	0148  4E			     dec     si
    392					;
    393					;			    command_backspace();
    394					;
    395	0149  E8 0429			     call    near ptr command_backspace
    396	014C			     @1@338:
    397					;
    398					;			 }
    399					;			 break;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 8
command.ASM



    400					;
    401	014C  E9 03F2			     jmp     @1@3362
    402	014F			     @1@366:
    403	014F  EB 04			     jmp     short @1@422
    404	0151			     @1@394:
    405					;
    406					;		    case 27:
    407					;			 /* Limpa a linha de comandos */
    408					;			 while (numcar>0)  {
    409					;			       --numcar;
    410					;
    411	0151  4E			     dec     si
    412					;
    413					;			       command_backspace();
    414					;
    415	0152  E8 0420			     call    near ptr command_backspace
    416	0155			     @1@422:
    417	0155  0B F6			     or	     si,si
    418	0157  7F F8			     jg	     short @1@394
    419					;
    420					;			 }
    421					;			 break;
    422					;
    423	0159  E9 03E5			     jmp     @1@3362
    424	015C			     @1@478:
    425					;
    426					;		    case 0:
    427					;			 car=getch();
    428					;
    429	015C  E8 0000e			     call    near ptr _getch
    430	015F  88 46 FF			     mov     byte ptr [bp-1],al
    431					;
    432					;			 switch	(car)  {
    433					;
    434	0162  8A 46 FF			     mov     al,byte ptr [bp-1]
    435	0165  98			     cbw
    436	0166  89 46 DE			     mov     word ptr [bp-34],ax
    437	0169  B9 0004			     mov     cx,4
    438	016C  BB 0551r			     mov     bx,offset @1@C3330
    439	016F			     @1@562:
    440	016F  2E: 8B 07			     mov     ax,word ptr cs:[bx]
    441	0172  3B 46 DE			     cmp     ax,word ptr [bp-34]
    442	0175  74 08			     je	     short @1@646
    443	0177  83 C3 02			     add     bx,2
    444	017A  E2 F3			     loop    short @1@562
    445	017C  E9 01C0			     jmp     @1@2102
    446	017F			     @1@646:
    447	017F  2E: FF 67	08		     jmp     word ptr cs:[bx+8]
    448	0183			     @1@674:
    449					;
    450					;				case 65: /* F7 */
    451					;				     history_pos = -1;
    452					;
    453	0183  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    454	0189  EB 04			     jmp     short @1@730
    455	018B			     @1@702:
    456					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 9
command.ASM



    457					;				     /*	Limpa a	linha de comandos */
    458					;				     while (numcar>0)  {
    459					;					   --numcar;
    460					;
    461	018B  4E			     dec     si
    462					;
    463					;					   command_backspace();
    464					;
    465	018C  E8 03E6			     call    near ptr command_backspace
    466	018F			     @1@730:
    467	018F  0B F6			     or	     si,si
    468	0191  7F F8			     jg	     short @1@702
    469					;
    470					;				     }
    471					;				     putch('\n');
    472					;
    473	0193  B8 000A			     mov     ax,10
    474	0196  50			     push    ax
    475	0197  E8 0000e			     call    near ptr _putch
    476	019A  59			     pop     cx
    477					;
    478					;				     /*	Imprime	o histÛrico */
    479					;				     for (i=0;i<history_len;++i)  {
    480					;
    481	019B  33 FF			     xor     di,di
    482	019D  EB 25			     jmp     short @1@842
    483	019F			     @1@786:
    484					;
    485					;					 putstr(history[(history_ini+i)%MAXHISTORY]);
    486					;
    487	019F  1E			     push    ds
    488	01A0  A1 0240r			     mov     ax,word ptr DGROUP:history_ini
    489	01A3  03 C7			     add     ax,di
    490	01A5  BB 000A			     mov     bx,10
    491	01A8  99			     cwd
    492	01A9  F7 FB			     idiv    bx
    493	01AB  BB 001F			     mov     bx,31
    494	01AE  8B C2			     mov     ax,dx
    495	01B0  F7 EB			     imul    bx
    496	01B2  05 0244r			     add     ax,offset DGROUP:history
    497	01B5  50			     push    ax
    498	01B6  E8 0000e			     call    near ptr _putstr
    499	01B9  59			     pop     cx
    500	01BA  59			     pop     cx
    501					;
    502					;					 putch('\n');
    503					;
    504	01BB  B8 000A			     mov     ax,10
    505	01BE  50			     push    ax
    506	01BF  E8 0000e			     call    near ptr _putch
    507	01C2  59			     pop     cx
    508	01C3  47			     inc     di
    509	01C4			     @1@842:
    510	01C4  3B 3E 0242r		     cmp     di,word ptr DGROUP:history_len
    511	01C8  7C D5			     jl	     short @1@786
    512					;
    513					;				     }
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 10
command.ASM



    514					;				     command_showprompt();
    515					;
    516	01CA  E8 03D2			     call    near ptr command_showprompt
    517					;
    518					;				     break;
    519					;
    520	01CD  E9 016F			     jmp     @1@2102
    521	01D0			     @1@898:
    522					;
    523					;				case 75: /* Seta para esquerda */
    524					;				     if	(numcar>0)  {
    525					;
    526	01D0  0B F6			     or	     si,si
    527	01D2  7E 04			     jle     short @1@954
    528					;
    529					;					--numcar;
    530					;
    531	01D4  4E			     dec     si
    532					;
    533					;					command_backspace();
    534					;
    535	01D5  E8 039D			     call    near ptr command_backspace
    536	01D8			     @1@954:
    537					;
    538					;				     }
    539					;				     break;
    540					;
    541	01D8  E9 0164			     jmp     @1@2102
    542	01DB			     @1@982:
    543					;
    544					;				case 72: /* Seta para cima */
    545					;				     if	(history_len>0)	 {
    546					;
    547	01DB  83 3E 0242r 00		     cmp     word ptr DGROUP:history_len,0
    548	01E0  7F 03			     jg	     @@0
    549	01E2  E9 00C3			     jmp     @1@1598
    550	01E5			     @@0:
    551					;
    552					;					novalinha=0;
    553					;
    554	01E5  C7 46 EE 0000		     mov     word ptr [bp-18],0
    555					;
    556					;					if (history_len<MAXHISTORY)  {
    557					;
    558	01EA  83 3E 0242r 0A		     cmp     word ptr DGROUP:history_len,10
    559	01EF  7D 27			     jge     short @1@1178
    560					;
    561					;					   if (history_pos==-1)	 {
    562					;
    563	01F1  83 3E 023Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    564	01F6  75 0E			     jne     short @1@1094
    565					;
    566					;					      history_pos=history_nxt-1;
    567					;
    568	01F8  A1 023Er			     mov     ax,word ptr DGROUP:history_nxt
    569	01FB  48			     dec     ax
    570	01FC  A3 023Cr			     mov     word ptr DGROUP:history_pos,ax
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 11
command.ASM



    571					;
    572					;					      novalinha=1;
    573					;
    574	01FF  C7 46 EE 0001		     mov     word ptr [bp-18],1
    575					;
    576					;					   }
    577					;
    578	0204  EB 10			     jmp     short @1@1150
    579	0206			     @1@1094:
    580					;
    581					;					   else	 {
    582					;					      if (history_pos>0)  {
    583					;
    584	0206  83 3E 023Cr 00		     cmp     word ptr DGROUP:history_pos,0
    585	020B  7E 09			     jle     short @1@1150
    586					;
    587					;						 history_pos--;
    588					;
    589	020D  FF 0E 023Cr		     dec     word ptr DGROUP:history_pos
    590					;
    591					;						 novalinha=1;
    592					;
    593	0211  C7 46 EE 0001		     mov     word ptr [bp-18],1
    594	0216			     @1@1150:
    595					;
    596					;					      }
    597					;					   }
    598					;					}
    599					;
    600	0216  EB 52			     jmp     short @1@1458
    601	0218			     @1@1178:
    602					;
    603					;					else  {
    604					;					   if (history_pos==-1)	 {
    605					;
    606	0218  83 3E 023Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    607	021D  75 1B			     jne     short @1@1290
    608					;
    609					;					      history_pos=history_nxt-1;
    610					;
    611	021F  A1 023Er			     mov     ax,word ptr DGROUP:history_nxt
    612	0222  48			     dec     ax
    613	0223  A3 023Cr			     mov     word ptr DGROUP:history_pos,ax
    614					;
    615					;					      if (history_pos<0)
    616					;
    617	0226  83 3E 023Cr 00		     cmp     word ptr DGROUP:history_pos,0
    618	022B  7D 06			     jge     short @1@1262
    619					;
    620					;						 history_pos=MAXHISTORY-1;
    621					;
    622	022D  C7 06 023Cr 0009		     mov     word ptr DGROUP:history_pos,9
    623	0233			     @1@1262:
    624					;
    625					;					      novalinha=1;
    626					;
    627	0233  C7 46 EE 0001		     mov     word ptr [bp-18],1
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 12
command.ASM



    628					;
    629					;					   }
    630					;
    631	0238  EB 30			     jmp     short @1@1458
    632	023A			     @1@1290:
    633					;
    634					;					   else	 {
    635					;					      if (history_pos!=history_ini)  {
    636					;
    637	023A  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    638	023D  3B 06 0240r		     cmp     ax,word ptr DGROUP:history_ini
    639	0241  74 27			     je	     short @1@1458
    640					;
    641					;						 novalinha=1;
    642					;
    643	0243  C7 46 EE 0001		     mov     word ptr [bp-18],1
    644					;
    645					;						 if (history_pos>history_ini)
    646					;
    647	0248  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    648	024B  3B 06 0240r		     cmp     ax,word ptr DGROUP:history_ini
    649	024F  7E 06			     jle     short @1@1374
    650					;
    651					;						    --history_pos;
    652					;
    653	0251  FF 0E 023Cr		     dec     word ptr DGROUP:history_pos
    654	0255  EB 13			     jmp     short @1@1458
    655	0257			     @1@1374:
    656					;
    657					;						 else  {  /* history_pos<history_ini */
    658					;						    if (history_pos>0)
    659					;
    660	0257  83 3E 023Cr 00		     cmp     word ptr DGROUP:history_pos,0
    661	025C  7E 06			     jle     short @1@1430
    662					;
    663					;						       history_pos--;
    664					;
    665	025E  FF 0E 023Cr		     dec     word ptr DGROUP:history_pos
    666	0262  EB 06			     jmp     short @1@1458
    667	0264			     @1@1430:
    668					;
    669					;						    else
    670					;						       history_pos=MAXHISTORY-1;
    671					;
    672	0264  C7 06 023Cr 0009		     mov     word ptr DGROUP:history_pos,9
    673	026A			     @1@1458:
    674					;
    675					;						  }
    676					;					      }
    677					;					   }
    678					;					}
    679					;					if (novalinha)	{
    680					;
    681	026A  83 7E EE 00		     cmp     word ptr [bp-18],0
    682	026E  74 38			     je	     short @1@1598
    683	0270  EB 04			     jmp     short @1@1542
    684	0272			     @1@1514:
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 13
command.ASM



    685					;
    686					;					   /* Limpa a linha de comandos	*/
    687					;					   while (numcar>0)  {
    688					;						 --numcar;
    689					;
    690	0272  4E			     dec     si
    691					;
    692					;						 command_backspace();
    693					;
    694	0273  E8 02FF			     call    near ptr command_backspace
    695	0276			     @1@1542:
    696	0276  0B F6			     or	     si,si
    697	0278  7F F8			     jg	     short @1@1514
    698					;
    699					;					   }
    700					;					   strcpy(cmdline,history[history_pos]);
    701					;
    702	027A  1E			     push    ds
    703	027B  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    704	027E  BA 001F			     mov     dx,31
    705	0281  F7 EA			     imul    dx
    706	0283  05 0244r			     add     ax,offset DGROUP:history
    707	0286  50			     push    ax
    708	0287  1E			     push    ds
    709	0288  B8 0638r			     mov     ax,offset DGROUP:cmdline
    710	028B  50			     push    ax
    711	028C  E8 0000e			     call    near ptr _strcpy
    712	028F  83 C4 08			     add     sp,8
    713					;
    714					;					   putstr(cmdline);
    715					;
    716	0292  1E			     push    ds
    717	0293  B8 0638r			     mov     ax,offset DGROUP:cmdline
    718	0296  50			     push    ax
    719	0297  E8 0000e			     call    near ptr _putstr
    720	029A  59			     pop     cx
    721	029B  59			     pop     cx
    722					;
    723					;					   numcar=strlen(cmdline);
    724					;
    725	029C  1E			     push    ds
    726	029D  B8 0638r			     mov     ax,offset DGROUP:cmdline
    727	02A0  50			     push    ax
    728	02A1  E8 0000e			     call    near ptr _strlen
    729	02A4  59			     pop     cx
    730	02A5  59			     pop     cx
    731	02A6  8B F0			     mov     si,ax
    732	02A8			     @1@1598:
    733					;
    734					;					}
    735					;				     }
    736					;				     break;
    737					;
    738	02A8  E9 0094			     jmp     @1@2102
    739	02AB			     @1@1626:
    740					;
    741					;				case 80: /* Seta para baixo */
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 14
command.ASM



    742					;				     if	(history_len>0 && history_pos!=-1)  {
    743					;
    744	02AB  83 3E 0242r 00		     cmp     word ptr DGROUP:history_len,0
    745	02B0  7F 03			     jg	     @@1
    746	02B2  E9 0088			     jmp     @1@2074
    747	02B5			     @@1:
    748	02B5  83 3E 023Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    749	02BA  75 03			     jne     @@2
    750	02BC  EB 7F 90			     jmp     @1@2074
    751	02BF			     @@2:
    752					;
    753					;					if (history_len<MAXHISTORY)  {
    754					;
    755	02BF  83 3E 0242r 0A		     cmp     word ptr DGROUP:history_len,10
    756	02C4  7D 18			     jge     short @1@1822
    757					;
    758					;					   if (history_pos<history_len-1)
    759					;
    760	02C6  A1 0242r			     mov     ax,word ptr DGROUP:history_len
    761	02C9  48			     dec     ax
    762	02CA  3B 06 023Cr		     cmp     ax,word ptr DGROUP:history_pos
    763	02CE  7E 06			     jle     short @1@1766
    764					;
    765					;					      history_pos++;
    766					;
    767	02D0  FF 06 023Cr		     inc     word ptr DGROUP:history_pos
    768	02D4  EB 06			     jmp     short @1@1794
    769	02D6			     @1@1766:
    770					;
    771					;					   else
    772					;					      history_pos = -1;
    773					;
    774	02D6  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    775	02DC			     @1@1794:
    776					;
    777					;					}
    778					;
    779	02DC  EB 20			     jmp     short @1@1934
    780	02DE			     @1@1822:
    781					;
    782					;					else  {
    783					;					   history_pos++;
    784					;
    785	02DE  FF 06 023Cr		     inc     word ptr DGROUP:history_pos
    786					;
    787					;					   if (history_pos>=MAXHISTORY)
    788					;
    789	02E2  83 3E 023Cr 0A		     cmp     word ptr DGROUP:history_pos,10
    790	02E7  7C 06			     jl	     short @1@1878
    791					;
    792					;					      history_pos = 0;
    793					;
    794	02E9  C7 06 023Cr 0000		     mov     word ptr DGROUP:history_pos,0
    795	02EF			     @1@1878:
    796					;
    797					;					   if (history_pos==history_nxt)
    798					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 15
command.ASM



    799	02EF  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    800	02F2  3B 06 023Er		     cmp     ax,word ptr DGROUP:history_nxt
    801	02F6  75 06			     jne     short @1@1934
    802					;
    803					;					      history_pos = -1;
    804					;
    805	02F8  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    806	02FE			     @1@1934:
    807	02FE  EB 04			     jmp     short @1@1990
    808	0300			     @1@1962:
    809					;
    810					;					}
    811					;					/* Limpa a linha de comandos */
    812					;					while (numcar>0)  {
    813					;					      --numcar;
    814					;
    815	0300  4E			     dec     si
    816					;
    817					;					      command_backspace();
    818					;
    819	0301  E8 0271			     call    near ptr command_backspace
    820	0304			     @1@1990:
    821	0304  0B F6			     or	     si,si
    822	0306  7F F8			     jg	     short @1@1962
    823					;
    824					;					}
    825					;					if (history_pos!=-1)  {
    826					;
    827	0308  83 3E 023Cr FF		     cmp     word ptr DGROUP:history_pos,-1
    828	030D  74 2E			     je	     short @1@2074
    829					;
    830					;					   strcpy(cmdline,history[history_pos]);
    831					;
    832	030F  1E			     push    ds
    833	0310  A1 023Cr			     mov     ax,word ptr DGROUP:history_pos
    834	0313  BA 001F			     mov     dx,31
    835	0316  F7 EA			     imul    dx
    836	0318  05 0244r			     add     ax,offset DGROUP:history
    837	031B  50			     push    ax
    838	031C  1E			     push    ds
    839	031D  B8 0638r			     mov     ax,offset DGROUP:cmdline
    840	0320  50			     push    ax
    841	0321  E8 0000e			     call    near ptr _strcpy
    842	0324  83 C4 08			     add     sp,8
    843					;
    844					;					   putstr(cmdline);
    845					;
    846	0327  1E			     push    ds
    847	0328  B8 0638r			     mov     ax,offset DGROUP:cmdline
    848	032B  50			     push    ax
    849	032C  E8 0000e			     call    near ptr _putstr
    850	032F  59			     pop     cx
    851	0330  59			     pop     cx
    852					;
    853					;					   numcar=strlen(cmdline);
    854					;
    855	0331  1E			     push    ds
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 16
command.ASM



    856	0332  B8 0638r			     mov     ax,offset DGROUP:cmdline
    857	0335  50			     push    ax
    858	0336  E8 0000e			     call    near ptr _strlen
    859	0339  59			     pop     cx
    860	033A  59			     pop     cx
    861	033B  8B F0			     mov     si,ax
    862	033D			     @1@2074:
    863					;
    864					;					}
    865					;				     }
    866					;				     break;
    867					;
    868	033D  EB 00			     jmp     short @1@2102
    869	033F			     @1@2102:
    870					;
    871					;			 }
    872					;			 break;
    873					;
    874	033F  E9 01FF			     jmp     @1@3362
    875	0342			     @1@2130:
    876					;
    877					;		    case 13:
    878					;			 history_pos = -1;
    879					;
    880	0342  C7 06 023Cr FFFF		     mov     word ptr DGROUP:history_pos,-1
    881					;
    882					;			 putch('\n');
    883					;
    884	0348  B8 000A			     mov     ax,10
    885	034B  50			     push    ax
    886	034C  E8 0000e			     call    near ptr _putch
    887	034F  59			     pop     cx
    888					;
    889					;			 cmdline[numcar]='\0';
    890					;
    891	0350  C6 84 0638r 00		     mov     byte ptr DGROUP:cmdline[si],0
    892					;
    893					;			 /* Divide a linha de comandos em comando e opÁıes */
    894					;			 ptrline = cmdline;
    895					;
    896	0355  8C 5E E8			     mov     word ptr [bp-24],ds
    897	0358  C7 46 E6 0638r		     mov     word ptr [bp-26],offset DGROUP:cmdline
    898					;
    899					;			 argc =	0;
    900					;
    901	035D  C7 46 EA 0000		     mov     word ptr [bp-22],0
    902					;
    903					;			 pos = 0;
    904					;
    905	0362  C7 46 F0 0000		     mov     word ptr [bp-16],0
    906	0367			     @1@2158:
    907	0367  EB 03			     jmp     short @1@2214
    908	0369			     @1@2186:
    909					;
    910					;			 while (1) {
    911					;			       while (*ptrline!='\0' &&	(*ptrline==' ' || *ptrline=='\t'))
    912					;				     ++ptrline;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 17
command.ASM



    913					;
    914	0369  FF 46 E6			     inc     word ptr [bp-26]
    915	036C			     @1@2214:
    916	036C  C4 5E E6			     les     bx,dword ptr [bp-26]
    917	036F  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    918	0373  74 12			     je	     short @1@2298
    919	0375  C4 5E E6			     les     bx,dword ptr [bp-26]
    920	0378  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    921	037C  74 EB			     je	     short @1@2186
    922	037E  C4 5E E6			     les     bx,dword ptr [bp-26]
    923	0381  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    924	0385  74 E2			     je	     short @1@2186
    925	0387			     @1@2298:
    926					;
    927					;			       if (*ptrline=='\0')
    928					;
    929	0387  C4 5E E6			     les     bx,dword ptr [bp-26]
    930	038A  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    931	038E  75 03			     jne     short @1@2354
    932					;
    933					;				  break;
    934					;
    935	0390  E9 00B4			     jmp     @1@2718
    936	0393			     @1@2354:
    937					;
    938					;			       i = 0;
    939					;
    940	0393  33 FF			     xor     di,di
    941	0395  EB 0E			     jmp     short @1@2410
    942	0397			     @1@2382:
    943					;
    944					;			       while (*ptrline!='\0' &&	*ptrline!=' ' && *ptrline!='\t')  {
    945					;				     palavra[i++] = *ptrline;
    946					;
    947	0397  C4 5E E6			     les     bx,dword ptr [bp-26]
    948	039A  26: 8A 07			     mov     al,byte ptr es:[bx]
    949	039D  88 85 0619r		     mov     byte ptr DGROUP:palavra[di],al
    950	03A1  47			     inc     di
    951					;
    952					;				     ++ptrline;
    953					;
    954	03A2  FF 46 E6			     inc     word ptr [bp-26]
    955	03A5			     @1@2410:
    956	03A5  C4 5E E6			     les     bx,dword ptr [bp-26]
    957	03A8  26: 80 3F	00		     cmp     byte ptr es:[bx],0
    958	03AC  74 12			     je	     short @1@2494
    959	03AE  C4 5E E6			     les     bx,dword ptr [bp-26]
    960	03B1  26: 80 3F	20		     cmp     byte ptr es:[bx],32
    961	03B5  74 09			     je	     short @1@2494
    962	03B7  C4 5E E6			     les     bx,dword ptr [bp-26]
    963	03BA  26: 80 3F	09		     cmp     byte ptr es:[bx],9
    964	03BE  75 D7			     jne     short @1@2382
    965	03C0			     @1@2494:
    966					;
    967					;			       }
    968					;			       palavra[i] = '\0';
    969					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 18
command.ASM



    970	03C0  C6 85 0619r 00		     mov     byte ptr DGROUP:palavra[di],0
    971					;
    972					;			       if (palavra[0]=='$')  {
    973					;
    974	03C5  80 3E 0619r 24		     cmp     byte ptr DGROUP:palavra,36
    975	03CA  75 39			     jne     short @1@2606
    976					;
    977					;				  var =	command_var_value(&palavra[1]);
    978					;
    979	03CC  1E			     push    ds
    980	03CD  B8 061Ar			     mov     ax,offset DGROUP:palavra+1
    981	03D0  50			     push    ax
    982	03D1  E8 036B			     call    near ptr command_var_value
    983	03D4  59			     pop     cx
    984	03D5  59			     pop     cx
    985	03D6  89 56 E4			     mov     word ptr [bp-28],dx
    986	03D9  89 46 E2			     mov     word ptr [bp-30],ax
    987					;
    988					;				  if (var!=NULL)  {
    989					;
    990	03DC  8B 46 E2			     mov     ax,word ptr [bp-30]
    991	03DF  0B 46 E4			     or	     ax,word ptr [bp-28]
    992	03E2  74 1F			     je	     short @1@2578
    993					;
    994					;				     strcpy(palavra,var);
    995					;
    996	03E4  FF 76 E4			     push    word ptr [bp-28]
    997	03E7  FF 76 E2			     push    word ptr [bp-30]
    998	03EA  1E			     push    ds
    999	03EB  B8 0619r			     mov     ax,offset DGROUP:palavra
   1000	03EE  50			     push    ax
   1001	03EF  E8 0000e			     call    near ptr _strcpy
   1002	03F2  83 C4 08			     add     sp,8
   1003					;
   1004					;				     i = strlen(palavra);
   1005					;
   1006	03F5  1E			     push    ds
   1007	03F6  B8 0619r			     mov     ax,offset DGROUP:palavra
   1008	03F9  50			     push    ax
   1009	03FA  E8 0000e			     call    near ptr _strlen
   1010	03FD  59			     pop     cx
   1011	03FE  59			     pop     cx
   1012	03FF  8B F8			     mov     di,ax
   1013					;
   1014					;				  }
   1015					;
   1016	0401  EB 02			     jmp     short @1@2606
   1017	0403			     @1@2578:
   1018					;
   1019					;				  else
   1020					;				     continue;
   1021					;
   1022	0403  EB 3F			     jmp     short @1@2690
   1023	0405			     @1@2606:
   1024					;
   1025					;
   1026					;			       }
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 19
command.ASM



   1027					;			       strcpy(&argline[pos],palavra);
   1028					;
   1029	0405  1E			     push    ds
   1030	0406  B8 0619r			     mov     ax,offset DGROUP:palavra
   1031	0409  50			     push    ax
   1032	040A  1E			     push    ds
   1033	040B  8B 46 F0			     mov     ax,word ptr [bp-16]
   1034	040E  05 03BAr			     add     ax,offset DGROUP:argline
   1035	0411  50			     push    ax
   1036	0412  E8 0000e			     call    near ptr _strcpy
   1037	0415  83 C4 08			     add     sp,8
   1038					;
   1039					;			       argv[argc++] = &argline[pos];
   1040					;
   1041	0418  8B 46 F0			     mov     ax,word ptr [bp-16]
   1042	041B  05 03BAr			     add     ax,offset DGROUP:argline
   1043	041E  8B 5E EA			     mov     bx,word ptr [bp-22]
   1044	0421  B1 02			     mov     cl,2
   1045	0423  D3 E3			     shl     bx,cl
   1046	0425  8C 9F 037Cr		     mov     word ptr DGROUP:argv[bx+2],ds
   1047	0429  89 87 037Ar		     mov     word ptr DGROUP:argv[bx],ax
   1048	042D  FF 46 EA			     inc     word ptr [bp-22]
   1049					;
   1050					;			       pos+= (i+1);
   1051					;
   1052	0430  8B C7			     mov     ax,di
   1053	0432  40			     inc     ax
   1054	0433  01 46 F0			     add     word ptr [bp-16],ax
   1055					;
   1056					;			       if (*ptrline=='\0')
   1057					;
   1058	0436  C4 5E E6			     les     bx,dword ptr [bp-26]
   1059	0439  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1060	043D  75 02			     jne     short @1@2662
   1061					;
   1062					;				  break;
   1063					;
   1064	043F  EB 06			     jmp     short @1@2718
   1065	0441			     @1@2662:
   1066					;
   1067					;			       ++ptrline;
   1068					;
   1069	0441  FF 46 E6			     inc     word ptr [bp-26]
   1070	0444			     @1@2690:
   1071	0444  E9 FF20			     jmp     @1@2158
   1072	0447			     @1@2718:
   1073					;
   1074					;			 }
   1075					;			 /* Se È comando vazio n„o faz nada */
   1076					;			 if (argc==0)  {
   1077					;
   1078	0447  83 7E EA 00		     cmp     word ptr [bp-22],0
   1079	044B  75 06			     jne     short @1@2774
   1080					;
   1081					;			    command_showprompt();
   1082					;
   1083	044D  E8 014F			     call    near ptr command_showprompt
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 20
command.ASM



   1084					;
   1085					;			    break;
   1086					;
   1087	0450  E9 00EE			     jmp     @1@3362
   1088	0453			     @1@2774:
   1089					;
   1090					;			 }
   1091					;			 /* Salva linha	de comando no histÛrico	*/
   1092					;			 strcpy	(history[history_nxt],cmdline);
   1093					;
   1094	0453  1E			     push    ds
   1095	0454  B8 0638r			     mov     ax,offset DGROUP:cmdline
   1096	0457  50			     push    ax
   1097	0458  1E			     push    ds
   1098	0459  A1 023Er			     mov     ax,word ptr DGROUP:history_nxt
   1099	045C  BA 001F			     mov     dx,31
   1100	045F  F7 EA			     imul    dx
   1101	0461  05 0244r			     add     ax,offset DGROUP:history
   1102	0464  50			     push    ax
   1103	0465  E8 0000e			     call    near ptr _strcpy
   1104	0468  83 C4 08			     add     sp,8
   1105					;
   1106					;			 if (history_len<MAXHISTORY)
   1107					;
   1108	046B  83 3E 0242r 0A		     cmp     word ptr DGROUP:history_len,10
   1109	0470  7D 06			     jge     short @1@2830
   1110					;
   1111					;			    ++history_len;
   1112					;
   1113	0472  FF 06 0242r		     inc     word ptr DGROUP:history_len
   1114	0476  EB 13			     jmp     short @1@2914
   1115	0478			     @1@2830:
   1116					;
   1117					;			 else  {
   1118					;			    if (history_ini==MAXHISTORY-1)
   1119					;
   1120	0478  83 3E 0240r 09		     cmp     word ptr DGROUP:history_ini,9
   1121	047D  75 08			     jne     short @1@2886
   1122					;
   1123					;			       history_ini = 0;
   1124					;
   1125	047F  C7 06 0240r 0000		     mov     word ptr DGROUP:history_ini,0
   1126	0485  EB 04			     jmp     short @1@2914
   1127	0487			     @1@2886:
   1128					;
   1129					;			    else
   1130					;			       ++history_ini;
   1131					;
   1132	0487  FF 06 0240r		     inc     word ptr DGROUP:history_ini
   1133	048B			     @1@2914:
   1134					;
   1135					;			 }
   1136					;			 if (history_nxt==MAXHISTORY-1)
   1137					;
   1138	048B  83 3E 023Er 09		     cmp     word ptr DGROUP:history_nxt,9
   1139	0490  75 08			     jne     short @1@2970
   1140					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 21
command.ASM



   1141					;			    history_nxt	= 0;
   1142					;
   1143	0492  C7 06 023Er 0000		     mov     word ptr DGROUP:history_nxt,0
   1144	0498  EB 04			     jmp     short @1@2998
   1145	049A			     @1@2970:
   1146					;
   1147					;			 else
   1148					;			    ++history_nxt;
   1149					;
   1150	049A  FF 06 023Er		     inc     word ptr DGROUP:history_nxt
   1151	049E			     @1@2998:
   1152					;
   1153					;			 /* Verifica qual È o comando ... */
   1154					;			 achou = 0;
   1155					;
   1156	049E  C7 46 F2 0000		     mov     word ptr [bp-14],0
   1157					;
   1158					;			 for (i=0;i<MAXCOMMANDS;++i)  {
   1159					;
   1160	04A3  33 FF			     xor     di,di
   1161	04A5  EB 28			     jmp     short @1@3110
   1162	04A7			     @1@3026:
   1163					;
   1164					;			     if	(strcmp(argv[0],commands[i].name)==0)  {
   1165					;
   1166	04A7  1E			     push    ds
   1167	04A8  8B C7			     mov     ax,di
   1168	04AA  BA 0006			     mov     dx,6
   1169	04AD  F7 EA			     imul    dx
   1170	04AF  8B D8			     mov     bx,ax
   1171	04B1  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   1172	04B5  FF 36 037Cr		     push    word ptr DGROUP:argv+2
   1173	04B9  FF 36 037Ar		     push    word ptr DGROUP:argv
   1174	04BD  E8 0000e			     call    near ptr _strcmp
   1175	04C0  83 C4 08			     add     sp,8
   1176	04C3  0B C0			     or	     ax,ax
   1177	04C5  75 07			     jne     short @1@3082
   1178					;
   1179					;				achou=1;
   1180					;
   1181	04C7  C7 46 F2 0001		     mov     word ptr [bp-14],1
   1182					;
   1183					;				break;
   1184					;
   1185	04CC  EB 06			     jmp     short @1@3138
   1186	04CE			     @1@3082:
   1187	04CE  47			     inc     di
   1188	04CF			     @1@3110:
   1189	04CF  83 FF 1C			     cmp     di,28
   1190	04D2  7C D3			     jl	     short @1@3026
   1191	04D4			     @1@3138:
   1192					;
   1193					;			     }
   1194					;			 }
   1195					;
   1196					;			 /* Executa o comando */
   1197					;			 if (achou)  {
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 22
command.ASM



   1198					;
   1199	04D4  83 7E F2 00		     cmp     word ptr [bp-14],0
   1200	04D8  74 39			     je	     short @1@3194
   1201					;
   1202					;			    res	= commands[i].code(argc,argv);
   1203					;
   1204	04DA  B8 037Ar			     mov     ax,offset DGROUP:argv
   1205	04DD  50			     push    ax
   1206	04DE  FF 76 EA			     push    word ptr [bp-22]
   1207	04E1  8B C7			     mov     ax,di
   1208	04E3  BA 0006			     mov     dx,6
   1209	04E6  F7 EA			     imul    dx
   1210	04E8  8B D8			     mov     bx,ax
   1211	04EA  FF 97 0006r		     call    word ptr DGROUP:commands[bx+4]
   1212	04EE  59			     pop     cx
   1213	04EF  59			     pop     cx
   1214	04F0  89 46 EC			     mov     word ptr [bp-20],ax
   1215					;
   1216					;			    inttostr(str,res);
   1217					;
   1218	04F3  FF 76 EC			     push    word ptr [bp-20]
   1219	04F6  16			     push    ss
   1220	04F7  8D 46 F4			     lea     ax,word ptr [bp-12]
   1221	04FA  50			     push    ax
   1222	04FB  E8 0000e			     call    near ptr _inttostr
   1223	04FE  83 C4 06			     add     sp,6
   1224					;
   1225					;			    command_var_set("ERRORLEVEL",str);
   1226					;
   1227	0501  16			     push    ss
   1228	0502  8D 46 F4			     lea     ax,word ptr [bp-12]
   1229	0505  50			     push    ax
   1230	0506  1E			     push    ds
   1231	0507  B8 070Fr			     mov     ax,offset DGROUP:s@+1627
   1232	050A  50			     push    ax
   1233	050B  E8 025E			     call    near ptr command_var_set
   1234	050E  83 C4 08			     add     sp,8
   1235					;
   1236					;			 }
   1237					;
   1238	0511  EB 0A			     jmp     short @1@3222
   1239	0513			     @1@3194:
   1240					;
   1241					;			 else
   1242					;			    putstr("Erro: comando desconhecido!\n");
   1243					;
   1244	0513  1E			     push    ds
   1245	0514  B8 071Ar			     mov     ax,offset DGROUP:s@+1638
   1246	0517  50			     push    ax
   1247	0518  E8 0000e			     call    near ptr _putstr
   1248	051B  59			     pop     cx
   1249	051C  59			     pop     cx
   1250	051D			     @1@3222:
   1251					;
   1252					;
   1253					;			 if (!end_command)
   1254					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 23
command.ASM



   1255	051D  83 3E 0657r 00		     cmp     word ptr DGROUP:end_command,0
   1256	0522  75 03			     jne     short @1@3278
   1257					;
   1258					;			    command_showprompt();
   1259					;
   1260	0524  E8 0078			     call    near ptr command_showprompt
   1261	0527			     @1@3278:
   1262					;
   1263					;
   1264					;			 numcar=0;
   1265					;
   1266	0527  33 F6			     xor     si,si
   1267					;
   1268					;			 break;
   1269					;
   1270	0529  EB 16			     jmp     short @1@3362
   1271	052B			     @1@3306:
   1272					;
   1273					;		    default:
   1274					;			 if (numcar<MAXLINE)  {
   1275					;
   1276	052B  83 FE 1E			     cmp     si,30
   1277	052E  7D 11			     jge     short @1@3362
   1278					;
   1279					;			    putch(car);
   1280					;
   1281	0530  8A 46 FF			     mov     al,byte ptr [bp-1]
   1282	0533  98			     cbw
   1283	0534  50			     push    ax
   1284	0535  E8 0000e			     call    near ptr _putch
   1285	0538  59			     pop     cx
   1286					;
   1287					;			    cmdline[numcar++]=car;
   1288					;
   1289	0539  8A 46 FF			     mov     al,byte ptr [bp-1]
   1290	053C  88 84 0638r		     mov     byte ptr DGROUP:cmdline[si],al
   1291	0540  46			     inc     si
   1292	0541			     @1@3362:
   1293	0541  83 3E 0657r 00		     cmp     word ptr DGROUP:end_command,0
   1294	0546  75 03			     jne     @@3
   1295	0548  E9 FBCF			     jmp     @1@58
   1296	054B			     @@3:
   1297					;
   1298					;			 }
   1299					;	     }
   1300					;      }
   1301					;
   1302					;    }
   1303					;
   1304	054B  5F			     pop     di
   1305	054C  5E			     pop     si
   1306	054D  8B E5			     mov     sp,bp
   1307	054F  5D			     pop     bp
   1308	0550  C3			     ret
   1309	0551			     _command	     endp
   1310	0551			     @1@C3330	     label   word
   1311	0551  41			     db	     65
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 24
command.ASM



   1312	0552  00			     db	     0
   1313	0553  48			     db	     72
   1314	0554  00			     db	     0
   1315	0555  4B			     db	     75
   1316	0556  00			     db	     0
   1317	0557  50			     db	     80
   1318	0558  00			     db	     0
   1319	0559  0183r			     dw	     @1@674
   1320	055B  01DBr			     dw	     @1@982
   1321	055D  01D0r			     dw	     @1@898
   1322	055F  02ABr			     dw	     @1@1626
   1323	0561			     @1@C3234	     label   word
   1324	0561  00			     db	     0
   1325	0562  00			     db	     0
   1326	0563  08			     db	     8
   1327	0564  00			     db	     0
   1328	0565  09			     db	     9
   1329	0566  00			     db	     0
   1330	0567  0D			     db	     13
   1331	0568  00			     db	     0
   1332	0569  1B			     db	     27
   1333	056A  00			     db	     0
   1334	056B  015Cr			     dw	     @1@478
   1335	056D  0144r			     dw	     @1@282
   1336	056F  0141r			     dw	     @1@254
   1337	0571  0342r			     dw	     @1@2130
   1338	0573  014Fr			     dw	     @1@366
   1339					;
   1340					;    static void command_backspace()
   1341					;
   1342					     assume  cs:_TEXT
   1343	0575			     command_backspace	     proc    near
   1344	0575  55			     push    bp
   1345	0576  8B EC			     mov     bp,sp
   1346	0578  56			     push    si
   1347	0579  57			     push    di
   1348					;
   1349					;    {
   1350					;      int x,y;
   1351					;
   1352					;      x = wherex();
   1353					;
   1354	057A  E8 0000e			     call    near ptr _wherex
   1355	057D  8B F0			     mov     si,ax
   1356					;
   1357					;      y = wherey();
   1358					;
   1359	057F  E8 0000e			     call    near ptr _wherey
   1360	0582  8B F8			     mov     di,ax
   1361					;
   1362					;      --x;
   1363					;
   1364	0584  4E			     dec     si
   1365					;
   1366					;      gotoxy(x,y);
   1367					;
   1368	0585  57			     push    di
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 25
command.ASM



   1369	0586  56			     push    si
   1370	0587  E8 0000e			     call    near ptr _gotoxy
   1371	058A  59			     pop     cx
   1372	058B  59			     pop     cx
   1373					;
   1374					;      putch(' ');
   1375					;
   1376	058C  B8 0020			     mov     ax,32
   1377	058F  50			     push    ax
   1378	0590  E8 0000e			     call    near ptr _putch
   1379	0593  59			     pop     cx
   1380					;
   1381					;      gotoxy(x,y);
   1382					;
   1383	0594  57			     push    di
   1384	0595  56			     push    si
   1385	0596  E8 0000e			     call    near ptr _gotoxy
   1386	0599  59			     pop     cx
   1387	059A  59			     pop     cx
   1388					;
   1389					;    }
   1390					;
   1391	059B  5F			     pop     di
   1392	059C  5E			     pop     si
   1393	059D  5D			     pop     bp
   1394	059E  C3			     ret
   1395	059F			     command_backspace	     endp
   1396					;
   1397					;    static void command_showprompt()
   1398					;
   1399					     assume  cs:_TEXT
   1400	059F			     command_showprompt	     proc    near
   1401	059F  55			     push    bp
   1402	05A0  8B EC			     mov     bp,sp
   1403	05A2  83 EC 06			     sub     sp,6
   1404					;
   1405					;    {
   1406					;      char cor;
   1407					;      char far	*prompt;
   1408					;
   1409					;      prompt =	command_var_value("PROMPT");
   1410					;
   1411	05A5  1E			     push    ds
   1412	05A6  B8 0737r			     mov     ax,offset DGROUP:s@+1667
   1413	05A9  50			     push    ax
   1414	05AA  E8 0192			     call    near ptr command_var_value
   1415	05AD  59			     pop     cx
   1416	05AE  59			     pop     cx
   1417	05AF  89 56 FC			     mov     word ptr [bp-4],dx
   1418	05B2  89 46 FA			     mov     word ptr [bp-6],ax
   1419					;
   1420					;      if (prompt!=NULL)  {
   1421					;
   1422	05B5  8B 46 FA			     mov     ax,word ptr [bp-6]
   1423	05B8  0B 46 FC			     or	     ax,word ptr [bp-4]
   1424	05BB  74 22			     je	     short @3@86
   1425					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 26
command.ASM



   1426					;	  cor =	getcolor();
   1427					;
   1428	05BD  E8 0000e			     call    near ptr _getcolor
   1429	05C0  88 46 FF			     mov     byte ptr [bp-1],al
   1430					;
   1431					;	  setcolor(PROMPTCOLOR);
   1432					;
   1433	05C3  B8 0009			     mov     ax,9
   1434	05C6  50			     push    ax
   1435	05C7  E8 0000e			     call    near ptr _setcolor
   1436	05CA  59			     pop     cx
   1437					;
   1438					;	  putstr(prompt);
   1439					;
   1440	05CB  FF 76 FC			     push    word ptr [bp-4]
   1441	05CE  FF 76 FA			     push    word ptr [bp-6]
   1442	05D1  E8 0000e			     call    near ptr _putstr
   1443	05D4  59			     pop     cx
   1444	05D5  59			     pop     cx
   1445					;
   1446					;	  setcolor(cor);
   1447					;
   1448	05D6  8A 46 FF			     mov     al,byte ptr [bp-1]
   1449	05D9  98			     cbw
   1450	05DA  50			     push    ax
   1451	05DB  E8 0000e			     call    near ptr _setcolor
   1452	05DE  59			     pop     cx
   1453	05DF			     @3@86:
   1454					;
   1455					;      }
   1456					;      putch(' ');
   1457					;
   1458	05DF  B8 0020			     mov     ax,32
   1459	05E2  50			     push    ax
   1460	05E3  E8 0000e			     call    near ptr _putch
   1461	05E6  59			     pop     cx
   1462					;
   1463					;    }
   1464					;
   1465	05E7  8B E5			     mov     sp,bp
   1466	05E9  5D			     pop     bp
   1467	05EA  C3			     ret
   1468	05EB			     command_showprompt	     endp
   1469					;
   1470					;    static void command_var_init()
   1471					;
   1472					     assume  cs:_TEXT
   1473	05EB			     command_var_init	     proc    near
   1474	05EB  55			     push    bp
   1475	05EC  8B EC			     mov     bp,sp
   1476					;
   1477					;    {
   1478					;      int i;
   1479					;
   1480					;      for (i=0;i<VAR_MAX;++i)	{
   1481					;
   1482	05EE  33 C9			     xor     cx,cx
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 27
command.ASM



   1483	05F0  EB 1D			     jmp     short @4@114
   1484	05F2			     @4@58:
   1485					;
   1486					;	   var[i].name[0]='\0';
   1487					;
   1488	05F2  8B C1			     mov     ax,cx
   1489	05F4  BA 0032			     mov     dx,50
   1490	05F7  F7 EA			     imul    dx
   1491	05F9  8B D8			     mov     bx,ax
   1492	05FB  C6 87 0048r 00		     mov     byte ptr DGROUP:var[bx],0
   1493					;
   1494					;	   var[i].value[0]='\0';
   1495					;
   1496	0600  8B C1			     mov     ax,cx
   1497	0602  BA 0032			     mov     dx,50
   1498	0605  F7 EA			     imul    dx
   1499	0607  8B D8			     mov     bx,ax
   1500	0609  C6 87 0055r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1501	060E  41			     inc     cx
   1502	060F			     @4@114:
   1503	060F  83 F9 0A			     cmp     cx,10
   1504	0612  7C DE			     jl	     short @4@58
   1505					;
   1506					;      }
   1507					;      num_var = 0;
   1508					;
   1509	0614  C7 06 0000r 0000		     mov     word ptr DGROUP:num_var,0
   1510					;
   1511					;    }
   1512					;
   1513	061A  5D			     pop     bp
   1514	061B  C3			     ret
   1515	061C			     command_var_init	     endp
   1516					;
   1517					;    static int	command_var_nextfree()
   1518					;
   1519					     assume  cs:_TEXT
   1520	061C			     command_var_nextfree    proc    near
   1521	061C  55			     push    bp
   1522	061D  8B EC			     mov     bp,sp
   1523					;
   1524					;    {
   1525					;      int i;
   1526					;
   1527					;      if (num_var>=VAR_MAX)
   1528					;
   1529	061F  83 3E 0000r 0A		     cmp     word ptr DGROUP:num_var,10
   1530	0624  7C 05			     jl	     short @5@114
   1531	0626			     @5@58:
   1532					;
   1533					;	  return -1;
   1534					;
   1535	0626  B8 FFFF			     mov     ax,-1
   1536	0629			     @5@86:
   1537	0629  EB 20			     jmp     short @5@282
   1538	062B			     @5@114:
   1539					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 28
command.ASM



   1540					;      for (i=0;i<VAR_MAX;++i)
   1541					;
   1542	062B  33 C9			     xor     cx,cx
   1543	062D  EB 15			     jmp     short @5@226
   1544	062F			     @5@142:
   1545					;
   1546					;	   if (var[i].name[0]=='\0')
   1547					;
   1548	062F  8B C1			     mov     ax,cx
   1549	0631  BA 0032			     mov     dx,50
   1550	0634  F7 EA			     imul    dx
   1551	0636  8B D8			     mov     bx,ax
   1552	0638  80 BF 0048r 00		     cmp     byte ptr DGROUP:var[bx],0
   1553	063D  75 04			     jne     short @5@198
   1554					;
   1555					;	      return i;
   1556					;
   1557	063F  8B C1			     mov     ax,cx
   1558	0641  EB E6			     jmp     short @5@86
   1559	0643			     @5@198:
   1560	0643  41			     inc     cx
   1561	0644			     @5@226:
   1562	0644  83 F9 0A			     cmp     cx,10
   1563	0647  7C E6			     jl	     short @5@142
   1564	0649  EB DB			     jmp     short @5@58
   1565	064B			     @5@282:
   1566					;
   1567					;      return -1;
   1568					;    }
   1569					;
   1570	064B  5D			     pop     bp
   1571	064C  C3			     ret
   1572	064D			     command_var_nextfree    endp
   1573					;
   1574					;    static void command_var_list()
   1575					;
   1576					     assume  cs:_TEXT
   1577	064D			     command_var_list	     proc    near
   1578	064D  55			     push    bp
   1579	064E  8B EC			     mov     bp,sp
   1580	0650  83 EC 02			     sub     sp,2
   1581	0653  56			     push    si
   1582					;
   1583					;    {
   1584					;      int i;
   1585					;      char cor;
   1586					;
   1587					;      cor = getcolor();
   1588					;
   1589	0654  E8 0000e			     call    near ptr _getcolor
   1590	0657  88 46 FF			     mov     byte ptr [bp-1],al
   1591					;
   1592					;      for (i=0;i<VAR_MAX;++i)	{
   1593					;
   1594	065A  33 F6			     xor     si,si
   1595	065C  EB 54			     jmp     short @6@142
   1596	065E			     @6@58:
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 29
command.ASM



   1597					;
   1598					;	   if (var[i].name[0]!='\0')  {
   1599					;
   1600	065E  8B C6			     mov     ax,si
   1601	0660  BA 0032			     mov     dx,50
   1602	0663  F7 EA			     imul    dx
   1603	0665  8B D8			     mov     bx,ax
   1604	0667  80 BF 0048r 00		     cmp     byte ptr DGROUP:var[bx],0
   1605	066C  74 43			     je	     short @6@114
   1606					;
   1607					;	      putstr(var[i].name);
   1608					;
   1609	066E  1E			     push    ds
   1610	066F  8B C6			     mov     ax,si
   1611	0671  BA 0032			     mov     dx,50
   1612	0674  F7 EA			     imul    dx
   1613	0676  05 0048r			     add     ax,offset DGROUP:var
   1614	0679  50			     push    ax
   1615	067A  E8 0000e			     call    near ptr _putstr
   1616	067D  59			     pop     cx
   1617	067E  59			     pop     cx
   1618					;
   1619					;	      putch('=');
   1620					;
   1621	067F  B8 003D			     mov     ax,61
   1622	0682  50			     push    ax
   1623	0683  E8 0000e			     call    near ptr _putch
   1624	0686  59			     pop     cx
   1625					;
   1626					;	      setcolor(VARCOLOR);
   1627					;
   1628	0687  B8 000E			     mov     ax,14
   1629	068A  50			     push    ax
   1630	068B  E8 0000e			     call    near ptr _setcolor
   1631	068E  59			     pop     cx
   1632					;
   1633					;	      putstr(var[i].value);
   1634					;
   1635	068F  1E			     push    ds
   1636	0690  8B C6			     mov     ax,si
   1637	0692  BA 0032			     mov     dx,50
   1638	0695  F7 EA			     imul    dx
   1639	0697  05 0055r			     add     ax,offset DGROUP:var+13
   1640	069A  50			     push    ax
   1641	069B  E8 0000e			     call    near ptr _putstr
   1642	069E  59			     pop     cx
   1643	069F  59			     pop     cx
   1644					;
   1645					;	      setcolor(cor);
   1646					;
   1647	06A0  8A 46 FF			     mov     al,byte ptr [bp-1]
   1648	06A3  98			     cbw
   1649	06A4  50			     push    ax
   1650	06A5  E8 0000e			     call    near ptr _setcolor
   1651	06A8  59			     pop     cx
   1652					;
   1653					;	      putch('\n');
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 30
command.ASM



   1654					;
   1655	06A9  B8 000A			     mov     ax,10
   1656	06AC  50			     push    ax
   1657	06AD  E8 0000e			     call    near ptr _putch
   1658	06B0  59			     pop     cx
   1659	06B1			     @6@114:
   1660	06B1  46			     inc     si
   1661	06B2			     @6@142:
   1662	06B2  83 FE 0A			     cmp     si,10
   1663	06B5  7C A7			     jl	     short @6@58
   1664					;
   1665					;	   }
   1666					;      }
   1667					;    }
   1668					;
   1669	06B7  5E			     pop     si
   1670	06B8  8B E5			     mov     sp,bp
   1671	06BA  5D			     pop     bp
   1672	06BB  C3			     ret
   1673	06BC			     command_var_list	     endp
   1674					;
   1675					;    static int	 command_var_search(char far *nome)
   1676					;
   1677					     assume  cs:_TEXT
   1678	06BC			     command_var_search	     proc    near
   1679	06BC  55			     push    bp
   1680	06BD  8B EC			     mov     bp,sp
   1681	06BF  56			     push    si
   1682					;
   1683					;    {
   1684					;      int i;
   1685					;
   1686					;      if (nome[0] == '\0')
   1687					;
   1688	06C0  C4 5E 04			     les     bx,dword ptr [bp+4]
   1689	06C3  26: 80 3F	00		     cmp     byte ptr es:[bx],0
   1690	06C7  75 05			     jne     short @7@114
   1691	06C9			     @7@58:
   1692					;
   1693					;	  return -1;
   1694					;
   1695	06C9  B8 FFFF			     mov     ax,-1
   1696	06CC			     @7@86:
   1697	06CC  EB 2C			     jmp     short @7@282
   1698	06CE			     @7@114:
   1699					;
   1700					;      for (i=0;i<VAR_MAX;++i)	{
   1701					;
   1702	06CE  33 F6			     xor     si,si
   1703	06D0  EB 21			     jmp     short @7@226
   1704	06D2			     @7@142:
   1705					;
   1706					;	   if (strcmp(nome,var[i].name)==0)
   1707					;
   1708	06D2  1E			     push    ds
   1709	06D3  8B C6			     mov     ax,si
   1710	06D5  BA 0032			     mov     dx,50
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 31
command.ASM



   1711	06D8  F7 EA			     imul    dx
   1712	06DA  05 0048r			     add     ax,offset DGROUP:var
   1713	06DD  50			     push    ax
   1714	06DE  FF 76 06			     push    word ptr [bp+6]
   1715	06E1  FF 76 04			     push    word ptr [bp+4]
   1716	06E4  E8 0000e			     call    near ptr _strcmp
   1717	06E7  83 C4 08			     add     sp,8
   1718	06EA  0B C0			     or	     ax,ax
   1719	06EC  75 04			     jne     short @7@198
   1720					;
   1721					;	      return i;
   1722					;
   1723	06EE  8B C6			     mov     ax,si
   1724	06F0  EB DA			     jmp     short @7@86
   1725	06F2			     @7@198:
   1726	06F2  46			     inc     si
   1727	06F3			     @7@226:
   1728	06F3  83 FE 0A			     cmp     si,10
   1729	06F6  7C DA			     jl	     short @7@142
   1730	06F8  EB CF			     jmp     short @7@58
   1731	06FA			     @7@282:
   1732					;
   1733					;      }
   1734					;      return -1;
   1735					;    }
   1736					;
   1737	06FA  5E			     pop     si
   1738	06FB  5D			     pop     bp
   1739	06FC  C3			     ret
   1740	06FD			     command_var_search	     endp
   1741					;
   1742					;    static int	 command_var_unset(char	far *nome)
   1743					;
   1744					     assume  cs:_TEXT
   1745	06FD			     command_var_unset	     proc    near
   1746	06FD  55			     push    bp
   1747	06FE  8B EC			     mov     bp,sp
   1748	0700  56			     push    si
   1749					;
   1750					;    {
   1751					;      int i;
   1752					;
   1753					;      i = command_var_search(nome);
   1754					;
   1755	0701  FF 76 06			     push    word ptr [bp+6]
   1756	0704  FF 76 04			     push    word ptr [bp+4]
   1757	0707  E8 FFB2			     call    near ptr command_var_search
   1758	070A  59			     pop     cx
   1759	070B  59			     pop     cx
   1760	070C  8B F0			     mov     si,ax
   1761					;
   1762					;      if (i==-1)
   1763					;
   1764	070E  83 FE FF			     cmp     si,-1
   1765	0711  75 05			     jne     short @8@114
   1766					;
   1767					;	  return -1;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 32
command.ASM



   1768					;
   1769	0713  B8 FFFF			     mov     ax,-1
   1770	0716			     @8@86:
   1771	0716  EB 24			     jmp     short @8@142
   1772	0718			     @8@114:
   1773					;
   1774					;      var[i].name[0]='\0';
   1775					;
   1776	0718  8B C6			     mov     ax,si
   1777	071A  BA 0032			     mov     dx,50
   1778	071D  F7 EA			     imul    dx
   1779	071F  8B D8			     mov     bx,ax
   1780	0721  C6 87 0048r 00		     mov     byte ptr DGROUP:var[bx],0
   1781					;
   1782					;      var[i].value[0]='\0';
   1783					;
   1784	0726  8B C6			     mov     ax,si
   1785	0728  BA 0032			     mov     dx,50
   1786	072B  F7 EA			     imul    dx
   1787	072D  8B D8			     mov     bx,ax
   1788	072F  C6 87 0055r 00		     mov     byte ptr DGROUP:var[bx+13],0
   1789					;
   1790					;      --num_var;
   1791					;
   1792	0734  FF 0E 0000r		     dec     word ptr DGROUP:num_var
   1793					;
   1794					;      return 0;
   1795					;
   1796	0738  33 C0			     xor     ax,ax
   1797	073A  EB DA			     jmp     short @8@86
   1798	073C			     @8@142:
   1799					;
   1800					;    }
   1801					;
   1802	073C  5E			     pop     si
   1803	073D  5D			     pop     bp
   1804	073E  C3			     ret
   1805	073F			     command_var_unset	     endp
   1806					;
   1807					;    static char far *command_var_value(char far *nome)
   1808					;
   1809					     assume  cs:_TEXT
   1810	073F			     command_var_value	     proc    near
   1811	073F  55			     push    bp
   1812	0740  8B EC			     mov     bp,sp
   1813	0742  56			     push    si
   1814					;
   1815					;    {
   1816					;      int i;
   1817					;
   1818					;      i = command_var_search(nome);
   1819					;
   1820	0743  FF 76 06			     push    word ptr [bp+6]
   1821	0746  FF 76 04			     push    word ptr [bp+4]
   1822	0749  E8 FF70			     call    near ptr command_var_search
   1823	074C  59			     pop     cx
   1824	074D  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 33
command.ASM



   1825	074E  8B F0			     mov     si,ax
   1826					;
   1827					;      if (i==-1)
   1828					;
   1829	0750  83 FE FF			     cmp     si,-1
   1830	0753  75 06			     jne     short @9@114
   1831					;
   1832					;	  return NULL;
   1833					;
   1834	0755  33 D2			     xor     dx,dx
   1835	0757  33 C0			     xor     ax,ax
   1836	0759			     @9@86:
   1837	0759  EB 0E			     jmp     short @9@142
   1838	075B			     @9@114:
   1839					;
   1840					;      return var[i].value;
   1841					;
   1842	075B  8B C6			     mov     ax,si
   1843	075D  BA 0032			     mov     dx,50
   1844	0760  F7 EA			     imul    dx
   1845	0762  05 0055r			     add     ax,offset DGROUP:var+13
   1846	0765  8C DA			     mov     dx,ds
   1847	0767  EB F0			     jmp     short @9@86
   1848	0769			     @9@142:
   1849					;
   1850					;    }
   1851					;
   1852	0769  5E			     pop     si
   1853	076A  5D			     pop     bp
   1854	076B  C3			     ret
   1855	076C			     command_var_value	     endp
   1856					;
   1857					;    static int	command_var_set(char far *nome,char far	*valor)
   1858					;
   1859					     assume  cs:_TEXT
   1860	076C			     command_var_set proc    near
   1861	076C  55			     push    bp
   1862	076D  8B EC			     mov     bp,sp
   1863	076F  56			     push    si
   1864					;
   1865					;    {
   1866					;      int i;
   1867					;
   1868					;      if (strlen(nome)>VAR_NOME_TAM)
   1869					;
   1870	0770  FF 76 06			     push    word ptr [bp+6]
   1871	0773  FF 76 04			     push    word ptr [bp+4]
   1872	0776  E8 0000e			     call    near ptr _strlen
   1873	0779  59			     pop     cx
   1874	077A  59			     pop     cx
   1875	077B  3D 000C			     cmp     ax,12
   1876	077E  76 05			     jbe     short @10@114
   1877					;
   1878					;	  return -3;
   1879					;
   1880	0780  B8 FFFD			     mov     ax,-3
   1881	0783			     @10@86:
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 34
command.ASM



   1882	0783  EB 6A			     jmp     short @10@310
   1883	0785			     @10@114:
   1884					;
   1885					;      if (strlen(valor)>VAR_VALOR_TAM)
   1886					;
   1887	0785  FF 76 0A			     push    word ptr [bp+10]
   1888	0788  FF 76 08			     push    word ptr [bp+8]
   1889	078B  E8 0000e			     call    near ptr _strlen
   1890	078E  59			     pop     cx
   1891	078F  59			     pop     cx
   1892	0790  3D 0024			     cmp     ax,36
   1893	0793  76 05			     jbe     short @10@170
   1894					;
   1895					;	  return -4;
   1896					;
   1897	0795  B8 FFFC			     mov     ax,-4
   1898	0798  EB E9			     jmp     short @10@86
   1899	079A			     @10@170:
   1900					;
   1901					;      i = command_var_search(nome);
   1902					;
   1903	079A  FF 76 06			     push    word ptr [bp+6]
   1904	079D  FF 76 04			     push    word ptr [bp+4]
   1905	07A0  E8 FF19			     call    near ptr command_var_search
   1906	07A3  59			     pop     cx
   1907	07A4  59			     pop     cx
   1908	07A5  8B F0			     mov     si,ax
   1909					;
   1910					;      if (i==-1)  {
   1911					;
   1912	07A7  83 FE FF			     cmp     si,-1
   1913	07AA  75 27			     jne     short @10@282
   1914					;
   1915					;	  i = command_var_nextfree();
   1916					;
   1917	07AC  E8 FE6D			     call    near ptr command_var_nextfree
   1918	07AF  8B F0			     mov     si,ax
   1919					;
   1920					;	  if (i==-1)
   1921					;
   1922	07B1  83 FE FF			     cmp     si,-1
   1923	07B4  75 05			     jne     short @10@254
   1924					;
   1925					;	     return -2;
   1926					;
   1927	07B6  B8 FFFE			     mov     ax,-2
   1928	07B9  EB C8			     jmp     short @10@86
   1929	07BB			     @10@254:
   1930					;
   1931					;	  strcpy(var[i].name,nome);
   1932					;
   1933	07BB  FF 76 06			     push    word ptr [bp+6]
   1934	07BE  FF 76 04			     push    word ptr [bp+4]
   1935	07C1  1E			     push    ds
   1936	07C2  8B C6			     mov     ax,si
   1937	07C4  BA 0032			     mov     dx,50
   1938	07C7  F7 EA			     imul    dx
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 35
command.ASM



   1939	07C9  05 0048r			     add     ax,offset DGROUP:var
   1940	07CC  50			     push    ax
   1941	07CD  E8 0000e			     call    near ptr _strcpy
   1942	07D0  83 C4 08			     add     sp,8
   1943	07D3			     @10@282:
   1944					;
   1945					;      }
   1946					;      strcpy(var[i].value,valor);
   1947					;
   1948	07D3  FF 76 0A			     push    word ptr [bp+10]
   1949	07D6  FF 76 08			     push    word ptr [bp+8]
   1950	07D9  1E			     push    ds
   1951	07DA  8B C6			     mov     ax,si
   1952	07DC  BA 0032			     mov     dx,50
   1953	07DF  F7 EA			     imul    dx
   1954	07E1  05 0055r			     add     ax,offset DGROUP:var+13
   1955	07E4  50			     push    ax
   1956	07E5  E8 0000e			     call    near ptr _strcpy
   1957	07E8  83 C4 08			     add     sp,8
   1958					;
   1959					;      return 0;
   1960					;
   1961	07EB  33 C0			     xor     ax,ax
   1962	07ED  EB 94			     jmp     short @10@86
   1963	07EF			     @10@310:
   1964					;
   1965					;    }
   1966					;
   1967	07EF  5E			     pop     si
   1968	07F0  5D			     pop     bp
   1969	07F1  C3			     ret
   1970	07F2			     command_var_set endp
   1971					;
   1972					;    int cmd_reboot(int	argc, char far *argv[])
   1973					;
   1974					     assume  cs:_TEXT
   1975	07F2			     _cmd_reboot     proc    near
   1976	07F2  55			     push    bp
   1977	07F3  8B EC			     mov     bp,sp
   1978	07F5  56			     push    si
   1979	07F6  57			     push    di
   1980	07F7  8B 76 04			     mov     si,word ptr [bp+4]
   1981	07FA  8B 7E 06			     mov     di,word ptr [bp+6]
   1982					;
   1983					;    {
   1984					;      argc=argc;
   1985					;
   1986					;
   1987					;      argv=argv;
   1988					;
   1989					;
   1990					;      reboot();
   1991					;
   1992	07FD  E8 0000e			     call    near ptr _reboot
   1993					;
   1994					;      return 0;
   1995					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 36
command.ASM



   1996	0800  33 C0			     xor     ax,ax
   1997	0802  EB 00			     jmp     short @11@58
   1998	0804			     @11@58:
   1999					;
   2000					;    }
   2001					;
   2002	0804  5F			     pop     di
   2003	0805  5E			     pop     si
   2004	0806  5D			     pop     bp
   2005	0807  C3			     ret
   2006	0808			     _cmd_reboot     endp
   2007					;
   2008					;    int cmd_exit(int argc, char far *argv[])
   2009					;
   2010					     assume  cs:_TEXT
   2011	0808			     _cmd_exit	     proc    near
   2012	0808  55			     push    bp
   2013	0809  8B EC			     mov     bp,sp
   2014	080B  8B 56 04			     mov     dx,word ptr [bp+4]
   2015	080E  8B 5E 06			     mov     bx,word ptr [bp+6]
   2016					;
   2017					;    {
   2018					;      argc=argc;
   2019					;
   2020					;
   2021					;      argv=argv;
   2022					;
   2023					;
   2024					;      end_command = 1;
   2025					;
   2026	0811  C7 06 0657r 0001		     mov     word ptr DGROUP:end_command,1
   2027					;
   2028					;      return 0;
   2029					;
   2030	0817  33 C0			     xor     ax,ax
   2031	0819  EB 00			     jmp     short @12@58
   2032	081B			     @12@58:
   2033					;
   2034					;    }
   2035					;
   2036	081B  5D			     pop     bp
   2037	081C  C3			     ret
   2038	081D			     _cmd_exit	     endp
   2039					;
   2040					;    int cmd_help(int argc, char far *argv[])
   2041					;
   2042					     assume  cs:_TEXT
   2043	081D			     _cmd_help	     proc    near
   2044	081D  55			     push    bp
   2045	081E  8B EC			     mov     bp,sp
   2046	0820  56			     push    si
   2047	0821  57			     push    di
   2048	0822  8B 7E 04			     mov     di,word ptr [bp+4]
   2049					;
   2050					;    {
   2051					;      int i;
   2052					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 37
command.ASM



   2053					;      argc=argc;
   2054					;
   2055					;
   2056					;      argv=argv;
   2057					;
   2058	0825  8B 46 06			     mov     ax,word ptr [bp+6]
   2059	0828  89 46 06			     mov     word ptr [bp+6],ax
   2060					;
   2061					;      putstr("Comandos	do minisSistema	Operacional:\n");
   2062					;
   2063	082B  1E			     push    ds
   2064	082C  B8 073Er			     mov     ax,offset DGROUP:s@+1674
   2065	082F  50			     push    ax
   2066	0830  E8 0000e			     call    near ptr _putstr
   2067	0833  59			     pop     cx
   2068	0834  59			     pop     cx
   2069					;
   2070					;      for (i=0;i<MAXCOMMANDS;++i)  {
   2071					;
   2072	0835  33 F6			     xor     si,si
   2073	0837  EB 2F			     jmp     short @13@114
   2074	0839			     @13@58:
   2075					;
   2076					;	   putstr(commands[i].name);
   2077					;
   2078	0839  1E			     push    ds
   2079	083A  8B C6			     mov     ax,si
   2080	083C  BA 0006			     mov     dx,6
   2081	083F  F7 EA			     imul    dx
   2082	0841  8B D8			     mov     bx,ax
   2083	0843  FF B7 0002r		     push    word ptr DGROUP:commands[bx]
   2084	0847  E8 0000e			     call    near ptr _putstr
   2085	084A  59			     pop     cx
   2086	084B  59			     pop     cx
   2087					;
   2088					;	   putstr(commands[i].help);
   2089					;
   2090	084C  1E			     push    ds
   2091	084D  8B C6			     mov     ax,si
   2092	084F  BA 0006			     mov     dx,6
   2093	0852  F7 EA			     imul    dx
   2094	0854  8B D8			     mov     bx,ax
   2095	0856  FF B7 0004r		     push    word ptr DGROUP:commands[bx+2]
   2096	085A  E8 0000e			     call    near ptr _putstr
   2097	085D  59			     pop     cx
   2098	085E  59			     pop     cx
   2099					;
   2100					;	   putch('\n');
   2101					;
   2102	085F  B8 000A			     mov     ax,10
   2103	0862  50			     push    ax
   2104	0863  E8 0000e			     call    near ptr _putch
   2105	0866  59			     pop     cx
   2106	0867  46			     inc     si
   2107	0868			     @13@114:
   2108	0868  83 FE 1C			     cmp     si,28
   2109	086B  7C CC			     jl	     short @13@58
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 38
command.ASM



   2110					;
   2111					;      }
   2112					;      return 0;
   2113					;
   2114	086D  33 C0			     xor     ax,ax
   2115	086F  EB 00			     jmp     short @13@170
   2116	0871			     @13@170:
   2117					;
   2118					;    }
   2119					;
   2120	0871  5F			     pop     di
   2121	0872  5E			     pop     si
   2122	0873  5D			     pop     bp
   2123	0874  C3			     ret
   2124	0875			     _cmd_help	     endp
   2125					;
   2126					;    int cmd_date(int argc, char far *argv[])
   2127					;
   2128					     assume  cs:_TEXT
   2129	0875			     _cmd_date	     proc    near
   2130	0875  55			     push    bp
   2131	0876  8B EC			     mov     bp,sp
   2132	0878  83 EC 18			     sub     sp,24
   2133	087B  56			     push    si
   2134	087C  57			     push    di
   2135	087D  8B 76 04			     mov     si,word ptr [bp+4]
   2136	0880  8B 7E 06			     mov     di,word ptr [bp+6]
   2137					;
   2138					;    {
   2139					;      struct date d;
   2140					;      char str[20];
   2141					;
   2142					;      argc=argc;
   2143					;
   2144					;
   2145					;      argv=argv;
   2146					;
   2147					;
   2148					;
   2149					;
   2150					;
   2151					;      getdate(&d);
   2152					;
   2153	0883  16			     push    ss
   2154	0884  8D 46 FC			     lea     ax,word ptr [bp-4]
   2155	0887  50			     push    ax
   2156	0888  E8 0000e			     call    near ptr _getdate
   2157	088B  59			     pop     cx
   2158	088C  59			     pop     cx
   2159					;
   2160					;      unsignedtostr(str,d.da_day,2,'0');
   2161					;
   2162	088D  B0 30			     mov     al,48
   2163	088F  50			     push    ax
   2164	0890  B8 0002			     mov     ax,2
   2165	0893  50			     push    ax
   2166	0894  8A 46 FE			     mov     al,byte ptr [bp-2]
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 39
command.ASM



   2167	0897  98			     cbw
   2168	0898  50			     push    ax
   2169	0899  16			     push    ss
   2170	089A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2171	089D  50			     push    ax
   2172	089E  E8 0000e			     call    near ptr _unsignedtostr
   2173	08A1  83 C4 0A			     add     sp,10
   2174					;
   2175					;      putstr(str);
   2176					;
   2177	08A4  16			     push    ss
   2178	08A5  8D 46 E8			     lea     ax,word ptr [bp-24]
   2179	08A8  50			     push    ax
   2180	08A9  E8 0000e			     call    near ptr _putstr
   2181	08AC  59			     pop     cx
   2182	08AD  59			     pop     cx
   2183					;
   2184					;      putch('/');
   2185					;
   2186	08AE  B8 002F			     mov     ax,47
   2187	08B1  50			     push    ax
   2188	08B2  E8 0000e			     call    near ptr _putch
   2189	08B5  59			     pop     cx
   2190					;
   2191					;      unsignedtostr(str,d.da_mon,2,'0');
   2192					;
   2193	08B6  B0 30			     mov     al,48
   2194	08B8  50			     push    ax
   2195	08B9  B8 0002			     mov     ax,2
   2196	08BC  50			     push    ax
   2197	08BD  8A 46 FF			     mov     al,byte ptr [bp-1]
   2198	08C0  98			     cbw
   2199	08C1  50			     push    ax
   2200	08C2  16			     push    ss
   2201	08C3  8D 46 E8			     lea     ax,word ptr [bp-24]
   2202	08C6  50			     push    ax
   2203	08C7  E8 0000e			     call    near ptr _unsignedtostr
   2204	08CA  83 C4 0A			     add     sp,10
   2205					;
   2206					;      putstr(str);
   2207					;
   2208	08CD  16			     push    ss
   2209	08CE  8D 46 E8			     lea     ax,word ptr [bp-24]
   2210	08D1  50			     push    ax
   2211	08D2  E8 0000e			     call    near ptr _putstr
   2212	08D5  59			     pop     cx
   2213	08D6  59			     pop     cx
   2214					;
   2215					;      putch('/');
   2216					;
   2217	08D7  B8 002F			     mov     ax,47
   2218	08DA  50			     push    ax
   2219	08DB  E8 0000e			     call    near ptr _putch
   2220	08DE  59			     pop     cx
   2221					;
   2222					;      unsignedtostr(str,d.da_year,4,'0');
   2223					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 40
command.ASM



   2224	08DF  B0 30			     mov     al,48
   2225	08E1  50			     push    ax
   2226	08E2  B8 0004			     mov     ax,4
   2227	08E5  50			     push    ax
   2228	08E6  FF 76 FC			     push    word ptr [bp-4]
   2229	08E9  16			     push    ss
   2230	08EA  8D 46 E8			     lea     ax,word ptr [bp-24]
   2231	08ED  50			     push    ax
   2232	08EE  E8 0000e			     call    near ptr _unsignedtostr
   2233	08F1  83 C4 0A			     add     sp,10
   2234					;
   2235					;      putstr(str);
   2236					;
   2237	08F4  16			     push    ss
   2238	08F5  8D 46 E8			     lea     ax,word ptr [bp-24]
   2239	08F8  50			     push    ax
   2240	08F9  E8 0000e			     call    near ptr _putstr
   2241	08FC  59			     pop     cx
   2242	08FD  59			     pop     cx
   2243					;
   2244					;      putch('\n');
   2245					;
   2246	08FE  B8 000A			     mov     ax,10
   2247	0901  50			     push    ax
   2248	0902  E8 0000e			     call    near ptr _putch
   2249	0905  59			     pop     cx
   2250					;
   2251					;      return 0;
   2252					;
   2253	0906  33 C0			     xor     ax,ax
   2254	0908  EB 00			     jmp     short @14@58
   2255	090A			     @14@58:
   2256					;
   2257					;    }
   2258					;
   2259	090A  5F			     pop     di
   2260	090B  5E			     pop     si
   2261	090C  8B E5			     mov     sp,bp
   2262	090E  5D			     pop     bp
   2263	090F  C3			     ret
   2264	0910			     _cmd_date	     endp
   2265					;
   2266					;    int cmd_time(int argc, char far *argv[])
   2267					;
   2268					     assume  cs:_TEXT
   2269	0910			     _cmd_time	     proc    near
   2270	0910  55			     push    bp
   2271	0911  8B EC			     mov     bp,sp
   2272	0913  83 EC 18			     sub     sp,24
   2273	0916  56			     push    si
   2274	0917  57			     push    di
   2275	0918  8B 76 04			     mov     si,word ptr [bp+4]
   2276	091B  8B 7E 06			     mov     di,word ptr [bp+6]
   2277					;
   2278					;    {
   2279					;      struct time t;
   2280					;      char str[20];
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 41
command.ASM



   2281					;
   2282					;      argc=argc;
   2283					;
   2284					;
   2285					;      argv=argv;
   2286					;
   2287					;
   2288					;      gettime(&t);
   2289					;
   2290	091E  16			     push    ss
   2291	091F  8D 46 FC			     lea     ax,word ptr [bp-4]
   2292	0922  50			     push    ax
   2293	0923  E8 0000e			     call    near ptr _gettime
   2294	0926  59			     pop     cx
   2295	0927  59			     pop     cx
   2296					;
   2297					;      unsignedtostr(str,t.ti_hour,2,'0');
   2298					;
   2299	0928  B0 30			     mov     al,48
   2300	092A  50			     push    ax
   2301	092B  B8 0002			     mov     ax,2
   2302	092E  50			     push    ax
   2303	092F  8A 46 FD			     mov     al,byte ptr [bp-3]
   2304	0932  B4 00			     mov     ah,0
   2305	0934  50			     push    ax
   2306	0935  16			     push    ss
   2307	0936  8D 46 E8			     lea     ax,word ptr [bp-24]
   2308	0939  50			     push    ax
   2309	093A  E8 0000e			     call    near ptr _unsignedtostr
   2310	093D  83 C4 0A			     add     sp,10
   2311					;
   2312					;      putstr(str);
   2313					;
   2314	0940  16			     push    ss
   2315	0941  8D 46 E8			     lea     ax,word ptr [bp-24]
   2316	0944  50			     push    ax
   2317	0945  E8 0000e			     call    near ptr _putstr
   2318	0948  59			     pop     cx
   2319	0949  59			     pop     cx
   2320					;
   2321					;      putch(':');
   2322					;
   2323	094A  B8 003A			     mov     ax,58
   2324	094D  50			     push    ax
   2325	094E  E8 0000e			     call    near ptr _putch
   2326	0951  59			     pop     cx
   2327					;
   2328					;
   2329					;
   2330					;      unsignedtostr(str,t.ti_min,2,'0');
   2331					;
   2332	0952  B0 30			     mov     al,48
   2333	0954  50			     push    ax
   2334	0955  B8 0002			     mov     ax,2
   2335	0958  50			     push    ax
   2336	0959  8A 46 FC			     mov     al,byte ptr [bp-4]
   2337	095C  B4 00			     mov     ah,0
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 42
command.ASM



   2338	095E  50			     push    ax
   2339	095F  16			     push    ss
   2340	0960  8D 46 E8			     lea     ax,word ptr [bp-24]
   2341	0963  50			     push    ax
   2342	0964  E8 0000e			     call    near ptr _unsignedtostr
   2343	0967  83 C4 0A			     add     sp,10
   2344					;
   2345					;      putstr(str);
   2346					;
   2347	096A  16			     push    ss
   2348	096B  8D 46 E8			     lea     ax,word ptr [bp-24]
   2349	096E  50			     push    ax
   2350	096F  E8 0000e			     call    near ptr _putstr
   2351	0972  59			     pop     cx
   2352	0973  59			     pop     cx
   2353					;
   2354					;      putch(':');
   2355					;
   2356	0974  B8 003A			     mov     ax,58
   2357	0977  50			     push    ax
   2358	0978  E8 0000e			     call    near ptr _putch
   2359	097B  59			     pop     cx
   2360					;
   2361					;      unsignedtostr(str,t.ti_sec,2,'0');
   2362					;
   2363	097C  B0 30			     mov     al,48
   2364	097E  50			     push    ax
   2365	097F  B8 0002			     mov     ax,2
   2366	0982  50			     push    ax
   2367	0983  8A 46 FF			     mov     al,byte ptr [bp-1]
   2368	0986  B4 00			     mov     ah,0
   2369	0988  50			     push    ax
   2370	0989  16			     push    ss
   2371	098A  8D 46 E8			     lea     ax,word ptr [bp-24]
   2372	098D  50			     push    ax
   2373	098E  E8 0000e			     call    near ptr _unsignedtostr
   2374	0991  83 C4 0A			     add     sp,10
   2375					;
   2376					;      putstr(str);
   2377					;
   2378	0994  16			     push    ss
   2379	0995  8D 46 E8			     lea     ax,word ptr [bp-24]
   2380	0998  50			     push    ax
   2381	0999  E8 0000e			     call    near ptr _putstr
   2382	099C  59			     pop     cx
   2383	099D  59			     pop     cx
   2384					;
   2385					;      putch('\n');
   2386					;
   2387	099E  B8 000A			     mov     ax,10
   2388	09A1  50			     push    ax
   2389	09A2  E8 0000e			     call    near ptr _putch
   2390	09A5  59			     pop     cx
   2391					;
   2392					;      return 0;
   2393					;
   2394	09A6  33 C0			     xor     ax,ax
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 43
command.ASM



   2395	09A8  EB 00			     jmp     short @15@58
   2396	09AA			     @15@58:
   2397					;
   2398					;    }
   2399					;
   2400	09AA  5F			     pop     di
   2401	09AB  5E			     pop     si
   2402	09AC  8B E5			     mov     sp,bp
   2403	09AE  5D			     pop     bp
   2404	09AF  C3			     ret
   2405	09B0			     _cmd_time	     endp
   2406					;
   2407					;    int cmd_cls(int argc, char	far *argv[])
   2408					;
   2409					     assume  cs:_TEXT
   2410	09B0			     _cmd_cls	     proc    near
   2411	09B0  55			     push    bp
   2412	09B1  8B EC			     mov     bp,sp
   2413	09B3  56			     push    si
   2414	09B4  57			     push    di
   2415	09B5  8B 76 04			     mov     si,word ptr [bp+4]
   2416	09B8  8B 7E 06			     mov     di,word ptr [bp+6]
   2417					;
   2418					;    {
   2419					;      argc=argc;
   2420					;
   2421					;
   2422					;      argv=argv;
   2423					;
   2424					;
   2425					;      clrscr();
   2426					;
   2427	09BB  E8 0000e			     call    near ptr _clrscr
   2428					;
   2429					;      return 0;
   2430					;
   2431	09BE  33 C0			     xor     ax,ax
   2432	09C0  EB 00			     jmp     short @16@58
   2433	09C2			     @16@58:
   2434					;
   2435					;    }
   2436					;
   2437	09C2  5F			     pop     di
   2438	09C3  5E			     pop     si
   2439	09C4  5D			     pop     bp
   2440	09C5  C3			     ret
   2441	09C6			     _cmd_cls	     endp
   2442					;
   2443					;    int cmd_ver(int argc, char	far *argv[])
   2444					;
   2445					     assume  cs:_TEXT
   2446	09C6			     _cmd_ver	     proc    near
   2447	09C6  55			     push    bp
   2448	09C7  8B EC			     mov     bp,sp
   2449	09C9  56			     push    si
   2450	09CA  57			     push    di
   2451	09CB  8B 76 04			     mov     si,word ptr [bp+4]
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 44
command.ASM



   2452	09CE  8B 7E 06			     mov     di,word ptr [bp+6]
   2453					;
   2454					;    {
   2455					;      argc=argc;
   2456					;
   2457					;
   2458					;      argv=argv;
   2459					;
   2460					;
   2461					;      putstr("minisSistema Operacional	- Vs ");
   2462					;
   2463	09D1  1E			     push    ds
   2464	09D2  B8 0765r			     mov     ax,offset DGROUP:s@+1713
   2465	09D5  50			     push    ax
   2466	09D6  E8 0000e			     call    near ptr _putstr
   2467	09D9  59			     pop     cx
   2468	09DA  59			     pop     cx
   2469					;
   2470					;      putstr(miniSO_VERSION);
   2471					;
   2472	09DB  1E			     push    ds
   2473	09DC  B8 0784r			     mov     ax,offset DGROUP:s@+1744
   2474	09DF  50			     push    ax
   2475	09E0  E8 0000e			     call    near ptr _putstr
   2476	09E3  59			     pop     cx
   2477	09E4  59			     pop     cx
   2478					;
   2479					;      putch('\n');
   2480					;
   2481	09E5  B8 000A			     mov     ax,10
   2482	09E8  50			     push    ax
   2483	09E9  E8 0000e			     call    near ptr _putch
   2484	09EC  59			     pop     cx
   2485					;
   2486					;      return 0;
   2487					;
   2488	09ED  33 C0			     xor     ax,ax
   2489	09EF  EB 00			     jmp     short @17@58
   2490	09F1			     @17@58:
   2491					;
   2492					;    }
   2493					;
   2494	09F1  5F			     pop     di
   2495	09F2  5E			     pop     si
   2496	09F3  5D			     pop     bp
   2497	09F4  C3			     ret
   2498	09F5			     _cmd_ver	     endp
   2499	09F5			     _TEXT   ends
   2500	0000			     _BSS    segment word public 'BSS'
   2501	0000  14*(??)			     db	     20	dup (?)
   2502	0014			     _BSS    ends
   2503	09F5			     _TEXT   segment byte public 'CODE'
   2504					;
   2505					;    int cmd_ps(int argc, char far *argv[])
   2506					;
   2507					     assume  cs:_TEXT
   2508	09F5			     _cmd_ps proc    near
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 45
command.ASM



   2509	09F5  55			     push    bp
   2510	09F6  8B EC			     mov     bp,sp
   2511	09F8  56			     push    si
   2512	09F9  57			     push    di
   2513					;
   2514					;    {
   2515					;      int i,l;
   2516					;      static char str[20];
   2517					;      extern miniSO_PCB miniSO_thread[];
   2518					;
   2519					;      argc=argc;
   2520					;
   2521	09FA  8B 46 04			     mov     ax,word ptr [bp+4]
   2522	09FD  89 46 04			     mov     word ptr [bp+4],ax
   2523					;
   2524					;      argv=argv;
   2525					;
   2526	0A00  8B 46 06			     mov     ax,word ptr [bp+6]
   2527	0A03  89 46 06			     mov     word ptr [bp+6],ax
   2528					;
   2529					;      putstr("	BCP   PID   PPID  STATUS   WAIT	  ZLIST	 PREV	NEXT\n");
   2530					;
   2531	0A06  1E			     push    ds
   2532	0A07  B8 0789r			     mov     ax,offset DGROUP:s@+1749
   2533	0A0A  50			     push    ax
   2534	0A0B  E8 0000e			     call    near ptr _putstr
   2535	0A0E  59			     pop     cx
   2536	0A0F  59			     pop     cx
   2537					;
   2538					;      for (i=0;i<miniSO_MAXTHREADS;++i)  {
   2539					;
   2540	0A10  33 FF			     xor     di,di
   2541	0A12  E9 0266			     jmp     @18@1094
   2542	0A15			     @18@58:
   2543					;
   2544					;	   if (miniSO_thread[i].status!=FREE)  {
   2545					;
   2546	0A15  8B C7			     mov     ax,di
   2547	0A17  BA 001A			     mov     dx,26
   2548	0A1A  F7 EA			     imul    dx
   2549	0A1C  8B D8			     mov     bx,ax
   2550	0A1E  83 BF 0004e FF		     cmp     word ptr DGROUP:_miniSO_thread[bx+4],-1
   2551	0A23  75 03			     jne     @@4
   2552	0A25  E9 0252			     jmp     @18@1066
   2553	0A28			     @@4:
   2554					;
   2555					;	      inttostr(str,i);
   2556					;
   2557	0A28  57			     push    di
   2558	0A29  1E			     push    ds
   2559	0A2A  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2560	0A2D  50			     push    ax
   2561	0A2E  E8 0000e			     call    near ptr _inttostr
   2562	0A31  83 C4 06			     add     sp,6
   2563					;
   2564					;	      l=strlen(str);
   2565					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 46
command.ASM



   2566	0A34  1E			     push    ds
   2567	0A35  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2568	0A38  50			     push    ax
   2569	0A39  E8 0000e			     call    near ptr _strlen
   2570	0A3C  59			     pop     cx
   2571	0A3D  59			     pop     cx
   2572	0A3E  8B F0			     mov     si,ax
   2573	0A40  EB 08			     jmp     short @18@142
   2574	0A42			     @18@114:
   2575					;
   2576					;	      while (l++<3)
   2577					;		    putch(' ');
   2578					;
   2579	0A42  B8 0020			     mov     ax,32
   2580	0A45  50			     push    ax
   2581	0A46  E8 0000e			     call    near ptr _putch
   2582	0A49  59			     pop     cx
   2583	0A4A			     @18@142:
   2584	0A4A  8B C6			     mov     ax,si
   2585	0A4C  46			     inc     si
   2586	0A4D  3D 0003			     cmp     ax,3
   2587	0A50  7C F0			     jl	     short @18@114
   2588					;
   2589					;	      putstr(str);
   2590					;
   2591	0A52  1E			     push    ds
   2592	0A53  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2593	0A56  50			     push    ax
   2594	0A57  E8 0000e			     call    near ptr _putstr
   2595	0A5A  59			     pop     cx
   2596	0A5B  59			     pop     cx
   2597					;
   2598					;	      putstr("	");
   2599					;
   2600	0A5C  1E			     push    ds
   2601	0A5D  B8 07C0r			     mov     ax,offset DGROUP:s@+1804
   2602	0A60  50			     push    ax
   2603	0A61  E8 0000e			     call    near ptr _putstr
   2604	0A64  59			     pop     cx
   2605	0A65  59			     pop     cx
   2606					;
   2607					;	      inttostr(str,miniSO_thread[i].pid);
   2608					;
   2609	0A66  8B C7			     mov     ax,di
   2610	0A68  BA 001A			     mov     dx,26
   2611	0A6B  F7 EA			     imul    dx
   2612	0A6D  8B D8			     mov     bx,ax
   2613	0A6F  FF B7 0000e		     push    word ptr DGROUP:_miniSO_thread[bx]
   2614	0A73  1E			     push    ds
   2615	0A74  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2616	0A77  50			     push    ax
   2617	0A78  E8 0000e			     call    near ptr _inttostr
   2618	0A7B  83 C4 06			     add     sp,6
   2619					;
   2620					;	      l=strlen(str);
   2621					;
   2622	0A7E  1E			     push    ds
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 47
command.ASM



   2623	0A7F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2624	0A82  50			     push    ax
   2625	0A83  E8 0000e			     call    near ptr _strlen
   2626	0A86  59			     pop     cx
   2627	0A87  59			     pop     cx
   2628	0A88  8B F0			     mov     si,ax
   2629	0A8A  EB 08			     jmp     short @18@226
   2630	0A8C			     @18@198:
   2631					;
   2632					;	      while (l++<5)
   2633					;		    putch(' ');
   2634					;
   2635	0A8C  B8 0020			     mov     ax,32
   2636	0A8F  50			     push    ax
   2637	0A90  E8 0000e			     call    near ptr _putch
   2638	0A93  59			     pop     cx
   2639	0A94			     @18@226:
   2640	0A94  8B C6			     mov     ax,si
   2641	0A96  46			     inc     si
   2642	0A97  3D 0005			     cmp     ax,5
   2643	0A9A  7C F0			     jl	     short @18@198
   2644					;
   2645					;	      putstr(str);
   2646					;
   2647	0A9C  1E			     push    ds
   2648	0A9D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2649	0AA0  50			     push    ax
   2650	0AA1  E8 0000e			     call    near ptr _putstr
   2651	0AA4  59			     pop     cx
   2652	0AA5  59			     pop     cx
   2653					;
   2654					;	      putstr("	");
   2655					;
   2656	0AA6  1E			     push    ds
   2657	0AA7  B8 07C3r			     mov     ax,offset DGROUP:s@+1807
   2658	0AAA  50			     push    ax
   2659	0AAB  E8 0000e			     call    near ptr _putstr
   2660	0AAE  59			     pop     cx
   2661	0AAF  59			     pop     cx
   2662					;
   2663					;	      inttostr(str,miniSO_thread[i].ppid);
   2664					;
   2665	0AB0  8B C7			     mov     ax,di
   2666	0AB2  BA 001A			     mov     dx,26
   2667	0AB5  F7 EA			     imul    dx
   2668	0AB7  8B D8			     mov     bx,ax
   2669	0AB9  FF B7 0002e		     push    word ptr DGROUP:_miniSO_thread[bx+2]
   2670	0ABD  1E			     push    ds
   2671	0ABE  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2672	0AC1  50			     push    ax
   2673	0AC2  E8 0000e			     call    near ptr _inttostr
   2674	0AC5  83 C4 06			     add     sp,6
   2675					;
   2676					;	      l=strlen(str);
   2677					;
   2678	0AC8  1E			     push    ds
   2679	0AC9  B8 0000r			     mov     ax,offset DGROUP:b@w+0
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 48
command.ASM



   2680	0ACC  50			     push    ax
   2681	0ACD  E8 0000e			     call    near ptr _strlen
   2682	0AD0  59			     pop     cx
   2683	0AD1  59			     pop     cx
   2684	0AD2  8B F0			     mov     si,ax
   2685	0AD4  EB 08			     jmp     short @18@310
   2686	0AD6			     @18@282:
   2687					;
   2688					;	      while (l++<5)
   2689					;		    putch(' ');
   2690					;
   2691	0AD6  B8 0020			     mov     ax,32
   2692	0AD9  50			     push    ax
   2693	0ADA  E8 0000e			     call    near ptr _putch
   2694	0ADD  59			     pop     cx
   2695	0ADE			     @18@310:
   2696	0ADE  8B C6			     mov     ax,si
   2697	0AE0  46			     inc     si
   2698	0AE1  3D 0005			     cmp     ax,5
   2699	0AE4  7C F0			     jl	     short @18@282
   2700					;
   2701					;	      putstr(str);
   2702					;
   2703	0AE6  1E			     push    ds
   2704	0AE7  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2705	0AEA  50			     push    ax
   2706	0AEB  E8 0000e			     call    near ptr _putstr
   2707	0AEE  59			     pop     cx
   2708	0AEF  59			     pop     cx
   2709					;
   2710					;	      putstr("	");
   2711					;
   2712	0AF0  1E			     push    ds
   2713	0AF1  B8 07C6r			     mov     ax,offset DGROUP:s@+1810
   2714	0AF4  50			     push    ax
   2715	0AF5  E8 0000e			     call    near ptr _putstr
   2716	0AF8  59			     pop     cx
   2717	0AF9  59			     pop     cx
   2718					;
   2719					;	      switch(miniSO_thread[i].status)  {
   2720					;
   2721	0AFA  8B C7			     mov     ax,di
   2722	0AFC  BA 001A			     mov     dx,26
   2723	0AFF  F7 EA			     imul    dx
   2724	0B01  8B D8			     mov     bx,ax
   2725	0B03  8B 9F 0004e		     mov     bx,word ptr DGROUP:_miniSO_thread[bx+4]
   2726	0B07  43			     inc     bx
   2727	0B08  83 FB 07			     cmp     bx,7
   2728	0B0B  77 3D			     ja	     short @18@702
   2729	0B0D  D1 E3			     shl     bx,1
   2730	0B0F  2E: FF A7	0C8Br		     jmp     word ptr cs:@18@C1266[bx]
   2731	0B14			     @18@450:
   2732					;
   2733					;		    case FREE:	  putstr(strFREE);    break;
   2734					;
   2735	0B14  1E			     push    ds
   2736	0B15  B8 07C9r			     mov     ax,offset DGROUP:s@+1813
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 49
command.ASM



   2737	0B18			     @18@478:
   2738	0B18  50			     push    ax
   2739	0B19  E8 0000e			     call    near ptr _putstr
   2740	0B1C  59			     pop     cx
   2741	0B1D  59			     pop     cx
   2742	0B1E  EB 2A			     jmp     short @18@702
   2743	0B20			     @18@506:
   2744					;
   2745					;		    case READY:	  putstr(strREADY);   break;
   2746					;
   2747	0B20  1E			     push    ds
   2748	0B21  B8 07D1r			     mov     ax,offset DGROUP:s@+1821
   2749	0B24  EB F2			     jmp     short @18@478
   2750	0B26			     @18@534:
   2751					;
   2752					;		    case RUNNING: putstr(strRUNNING); break;
   2753					;
   2754	0B26  1E			     push    ds
   2755	0B27  B8 07D9r			     mov     ax,offset DGROUP:s@+1829
   2756	0B2A  EB EC			     jmp     short @18@478
   2757	0B2C			     @18@562:
   2758					;
   2759					;		    case ZOMBIE:  putstr(strZOMBIE);  break;
   2760					;
   2761	0B2C  1E			     push    ds
   2762	0B2D  B8 07E1r			     mov     ax,offset DGROUP:s@+1837
   2763	0B30  EB E6			     jmp     short @18@478
   2764	0B32			     @18@590:
   2765					;
   2766					;		    case WAIT:	  putstr(strWAIT);    break;
   2767					;
   2768	0B32  1E			     push    ds
   2769	0B33  B8 07E9r			     mov     ax,offset DGROUP:s@+1845
   2770	0B36  EB E0			     jmp     short @18@478
   2771	0B38			     @18@618:
   2772					;
   2773					;		    case WAITSIG: putstr(strWAITSIG); break;
   2774					;
   2775	0B38  1E			     push    ds
   2776	0B39  B8 07F1r			     mov     ax,offset DGROUP:s@+1853
   2777	0B3C  EB DA			     jmp     short @18@478
   2778	0B3E			     @18@646:
   2779					;
   2780					;		    case WAITSEM: putstr(strWAITSEM); break;
   2781					;
   2782	0B3E  1E			     push    ds
   2783	0B3F  B8 07F9r			     mov     ax,offset DGROUP:s@+1861
   2784	0B42  EB D4			     jmp     short @18@478
   2785	0B44			     @18@674:
   2786					;
   2787					;		    case STOPPED: putstr(strSTOPPED); break;
   2788					;
   2789	0B44  1E			     push    ds
   2790	0B45  B8 0801r			     mov     ax,offset DGROUP:s@+1869
   2791	0B48  EB CE			     jmp     short @18@478
   2792	0B4A			     @18@702:
   2793					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 50
command.ASM



   2794					;	      }
   2795					;	      putstr("	");
   2796					;
   2797	0B4A  1E			     push    ds
   2798	0B4B  B8 0809r			     mov     ax,offset DGROUP:s@+1877
   2799	0B4E  50			     push    ax
   2800	0B4F  E8 0000e			     call    near ptr _putstr
   2801	0B52  59			     pop     cx
   2802	0B53  59			     pop     cx
   2803					;
   2804					;	      inttostr(str,miniSO_thread[i].wait);
   2805					;
   2806	0B54  8B C7			     mov     ax,di
   2807	0B56  BA 001A			     mov     dx,26
   2808	0B59  F7 EA			     imul    dx
   2809	0B5B  8B D8			     mov     bx,ax
   2810	0B5D  FF B7 000Ee		     push    word ptr DGROUP:_miniSO_thread[bx+14]
   2811	0B61  1E			     push    ds
   2812	0B62  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2813	0B65  50			     push    ax
   2814	0B66  E8 0000e			     call    near ptr _inttostr
   2815	0B69  83 C4 06			     add     sp,6
   2816					;
   2817					;	      l=strlen(str);
   2818					;
   2819	0B6C  1E			     push    ds
   2820	0B6D  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2821	0B70  50			     push    ax
   2822	0B71  E8 0000e			     call    near ptr _strlen
   2823	0B74  59			     pop     cx
   2824	0B75  59			     pop     cx
   2825	0B76  8B F0			     mov     si,ax
   2826	0B78  EB 08			     jmp     short @18@758
   2827	0B7A			     @18@730:
   2828					;
   2829					;	      while (l++<5)
   2830					;		    putch(' ');
   2831					;
   2832	0B7A  B8 0020			     mov     ax,32
   2833	0B7D  50			     push    ax
   2834	0B7E  E8 0000e			     call    near ptr _putch
   2835	0B81  59			     pop     cx
   2836	0B82			     @18@758:
   2837	0B82  8B C6			     mov     ax,si
   2838	0B84  46			     inc     si
   2839	0B85  3D 0005			     cmp     ax,5
   2840	0B88  7C F0			     jl	     short @18@730
   2841					;
   2842					;	      putstr(str);
   2843					;
   2844	0B8A  1E			     push    ds
   2845	0B8B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2846	0B8E  50			     push    ax
   2847	0B8F  E8 0000e			     call    near ptr _putstr
   2848	0B92  59			     pop     cx
   2849	0B93  59			     pop     cx
   2850					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 51
command.ASM



   2851					;
   2852					;	      putstr("	");
   2853					;
   2854	0B94  1E			     push    ds
   2855	0B95  B8 080Cr			     mov     ax,offset DGROUP:s@+1880
   2856	0B98  50			     push    ax
   2857	0B99  E8 0000e			     call    near ptr _putstr
   2858	0B9C  59			     pop     cx
   2859	0B9D  59			     pop     cx
   2860					;
   2861					;	      inttostr(str,miniSO_thread[i].zombies);
   2862					;
   2863	0B9E  8B C7			     mov     ax,di
   2864	0BA0  BA 001A			     mov     dx,26
   2865	0BA3  F7 EA			     imul    dx
   2866	0BA5  8B D8			     mov     bx,ax
   2867	0BA7  FF B7 0014e		     push    word ptr DGROUP:_miniSO_thread[bx+20]
   2868	0BAB  1E			     push    ds
   2869	0BAC  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2870	0BAF  50			     push    ax
   2871	0BB0  E8 0000e			     call    near ptr _inttostr
   2872	0BB3  83 C4 06			     add     sp,6
   2873					;
   2874					;	      l=strlen(str);
   2875					;
   2876	0BB6  1E			     push    ds
   2877	0BB7  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2878	0BBA  50			     push    ax
   2879	0BBB  E8 0000e			     call    near ptr _strlen
   2880	0BBE  59			     pop     cx
   2881	0BBF  59			     pop     cx
   2882	0BC0  8B F0			     mov     si,ax
   2883	0BC2  EB 08			     jmp     short @18@842
   2884	0BC4			     @18@814:
   2885					;
   2886					;	      while (l++<5)
   2887					;		    putch(' ');
   2888					;
   2889	0BC4  B8 0020			     mov     ax,32
   2890	0BC7  50			     push    ax
   2891	0BC8  E8 0000e			     call    near ptr _putch
   2892	0BCB  59			     pop     cx
   2893	0BCC			     @18@842:
   2894	0BCC  8B C6			     mov     ax,si
   2895	0BCE  46			     inc     si
   2896	0BCF  3D 0005			     cmp     ax,5
   2897	0BD2  7C F0			     jl	     short @18@814
   2898					;
   2899					;	      putstr(str);
   2900					;
   2901	0BD4  1E			     push    ds
   2902	0BD5  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2903	0BD8  50			     push    ax
   2904	0BD9  E8 0000e			     call    near ptr _putstr
   2905	0BDC  59			     pop     cx
   2906	0BDD  59			     pop     cx
   2907					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 52
command.ASM



   2908					;
   2909					;	      putstr(" ");
   2910					;
   2911	0BDE  1E			     push    ds
   2912	0BDF  B8 080Fr			     mov     ax,offset DGROUP:s@+1883
   2913	0BE2  50			     push    ax
   2914	0BE3  E8 0000e			     call    near ptr _putstr
   2915	0BE6  59			     pop     cx
   2916	0BE7  59			     pop     cx
   2917					;
   2918					;	      inttostr(str,miniSO_thread[i].prev);
   2919					;
   2920	0BE8  8B C7			     mov     ax,di
   2921	0BEA  BA 001A			     mov     dx,26
   2922	0BED  F7 EA			     imul    dx
   2923	0BEF  8B D8			     mov     bx,ax
   2924	0BF1  FF B7 0016e		     push    word ptr DGROUP:_miniSO_thread[bx+22]
   2925	0BF5  1E			     push    ds
   2926	0BF6  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2927	0BF9  50			     push    ax
   2928	0BFA  E8 0000e			     call    near ptr _inttostr
   2929	0BFD  83 C4 06			     add     sp,6
   2930					;
   2931					;	      l=strlen(str);
   2932					;
   2933	0C00  1E			     push    ds
   2934	0C01  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2935	0C04  50			     push    ax
   2936	0C05  E8 0000e			     call    near ptr _strlen
   2937	0C08  59			     pop     cx
   2938	0C09  59			     pop     cx
   2939	0C0A  8B F0			     mov     si,ax
   2940	0C0C  EB 08			     jmp     short @18@926
   2941	0C0E			     @18@898:
   2942					;
   2943					;	      while (l++<5)
   2944					;		    putch(' ');
   2945					;
   2946	0C0E  B8 0020			     mov     ax,32
   2947	0C11  50			     push    ax
   2948	0C12  E8 0000e			     call    near ptr _putch
   2949	0C15  59			     pop     cx
   2950	0C16			     @18@926:
   2951	0C16  8B C6			     mov     ax,si
   2952	0C18  46			     inc     si
   2953	0C19  3D 0005			     cmp     ax,5
   2954	0C1C  7C F0			     jl	     short @18@898
   2955					;
   2956					;	      putstr(str);
   2957					;
   2958	0C1E  1E			     push    ds
   2959	0C1F  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2960	0C22  50			     push    ax
   2961	0C23  E8 0000e			     call    near ptr _putstr
   2962	0C26  59			     pop     cx
   2963	0C27  59			     pop     cx
   2964					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 53
command.ASM



   2965					;
   2966					;	      putstr("	");
   2967					;
   2968	0C28  1E			     push    ds
   2969	0C29  B8 0811r			     mov     ax,offset DGROUP:s@+1885
   2970	0C2C  50			     push    ax
   2971	0C2D  E8 0000e			     call    near ptr _putstr
   2972	0C30  59			     pop     cx
   2973	0C31  59			     pop     cx
   2974					;
   2975					;	      inttostr(str,miniSO_thread[i].next);
   2976					;
   2977	0C32  8B C7			     mov     ax,di
   2978	0C34  BA 001A			     mov     dx,26
   2979	0C37  F7 EA			     imul    dx
   2980	0C39  8B D8			     mov     bx,ax
   2981	0C3B  FF B7 0018e		     push    word ptr DGROUP:_miniSO_thread[bx+24]
   2982	0C3F  1E			     push    ds
   2983	0C40  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2984	0C43  50			     push    ax
   2985	0C44  E8 0000e			     call    near ptr _inttostr
   2986	0C47  83 C4 06			     add     sp,6
   2987					;
   2988					;	      l=strlen(str);
   2989					;
   2990	0C4A  1E			     push    ds
   2991	0C4B  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   2992	0C4E  50			     push    ax
   2993	0C4F  E8 0000e			     call    near ptr _strlen
   2994	0C52  59			     pop     cx
   2995	0C53  59			     pop     cx
   2996	0C54  8B F0			     mov     si,ax
   2997	0C56  EB 08			     jmp     short @18@1010
   2998	0C58			     @18@982:
   2999					;
   3000					;	      while (l++<5)
   3001					;		    putch(' ');
   3002					;
   3003	0C58  B8 0020			     mov     ax,32
   3004	0C5B  50			     push    ax
   3005	0C5C  E8 0000e			     call    near ptr _putch
   3006	0C5F  59			     pop     cx
   3007	0C60			     @18@1010:
   3008	0C60  8B C6			     mov     ax,si
   3009	0C62  46			     inc     si
   3010	0C63  3D 0005			     cmp     ax,5
   3011	0C66  7C F0			     jl	     short @18@982
   3012					;
   3013					;	      putstr(str);
   3014					;
   3015	0C68  1E			     push    ds
   3016	0C69  B8 0000r			     mov     ax,offset DGROUP:b@w+0
   3017	0C6C  50			     push    ax
   3018	0C6D  E8 0000e			     call    near ptr _putstr
   3019	0C70  59			     pop     cx
   3020	0C71  59			     pop     cx
   3021					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 54
command.ASM



   3022					;	      putch('\n');
   3023					;
   3024	0C72  B8 000A			     mov     ax,10
   3025	0C75  50			     push    ax
   3026	0C76  E8 0000e			     call    near ptr _putch
   3027	0C79  59			     pop     cx
   3028	0C7A			     @18@1066:
   3029	0C7A  47			     inc     di
   3030	0C7B			     @18@1094:
   3031	0C7B  83 FF 10			     cmp     di,16
   3032	0C7E  7D 03			     jge     @@5
   3033	0C80  E9 FD92			     jmp     @18@58
   3034	0C83			     @@5:
   3035					;
   3036					;	   }
   3037					;      }
   3038					;      return 0;
   3039					;
   3040	0C83  33 C0			     xor     ax,ax
   3041	0C85  EB 00			     jmp     short @18@1150
   3042	0C87			     @18@1150:
   3043					;
   3044					;    }
   3045					;
   3046	0C87  5F			     pop     di
   3047	0C88  5E			     pop     si
   3048	0C89  5D			     pop     bp
   3049	0C8A  C3			     ret
   3050	0C8B			     _cmd_ps endp
   3051	0C8B			     @18@C1266	     label   word
   3052	0C8B  0B14r			     dw	     @18@450
   3053	0C8D  0B20r			     dw	     @18@506
   3054	0C8F  0B26r			     dw	     @18@534
   3055	0C91  0B2Cr			     dw	     @18@562
   3056	0C93  0B32r			     dw	     @18@590
   3057	0C95  0B38r			     dw	     @18@618
   3058	0C97  0B3Er			     dw	     @18@646
   3059	0C99  0B44r			     dw	     @18@674
   3060					;
   3061					;    int cmd_kill(int argc, char far *argv[])
   3062					;
   3063					     assume  cs:_TEXT
   3064	0C9B			     _cmd_kill	     proc    near
   3065	0C9B  55			     push    bp
   3066	0C9C  8B EC			     mov     bp,sp
   3067	0C9E  56			     push    si
   3068	0C9F  57			     push    di
   3069					;
   3070					;    {
   3071					;      int t=0;
   3072					;
   3073	0CA0  33 F6			     xor     si,si
   3074					;
   3075					;      pid_t pid=0;
   3076					;
   3077	0CA2  33 FF			     xor     di,di
   3078					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 55
command.ASM



   3079					;      char str[10];
   3080					;
   3081					;      if (argc<=1)  {
   3082					;
   3083	0CA4  83 7E 04 01		     cmp     word ptr [bp+4],1
   3084	0CA8  7F 0F			     jg	     short @19@142
   3085					;
   3086					;	  putstr("Erro em kill:	parametro nao fornecido!\n");
   3087					;
   3088	0CAA  1E			     push    ds
   3089	0CAB  B8 0814r			     mov     ax,offset DGROUP:s@+1888
   3090	0CAE			     @19@86:
   3091	0CAE  50			     push    ax
   3092	0CAF  E8 0000e			     call    near ptr _putstr
   3093	0CB2  59			     pop     cx
   3094	0CB3  59			     pop     cx
   3095					;
   3096					;	  return 1;
   3097					;
   3098	0CB4  B8 0001			     mov     ax,1
   3099	0CB7			     @19@114:
   3100	0CB7  EB 26			     jmp     short @19@226
   3101	0CB9			     @19@142:
   3102					;
   3103					;      }
   3104					;      pid = atoi(argv[1]);
   3105					;
   3106	0CB9  8B 5E 06			     mov     bx,word ptr [bp+6]
   3107	0CBC  FF 77 06			     push    word ptr [bx+6]
   3108	0CBF  FF 77 04			     push    word ptr [bx+4]
   3109	0CC2  E8 0000e			     call    near ptr _atoi
   3110	0CC5  59			     pop     cx
   3111	0CC6  59			     pop     cx
   3112	0CC7  8B F8			     mov     di,ax
   3113					;
   3114					;      t = kill(pid);
   3115					;
   3116	0CC9  57			     push    di
   3117	0CCA  E8 0000e			     call    near ptr _kill
   3118	0CCD  59			     pop     cx
   3119	0CCE  8B F0			     mov     si,ax
   3120					;
   3121					;      if (t==miniSO_ERROR)  {
   3122					;
   3123	0CD0  83 FE FF			     cmp     si,-1
   3124	0CD3  75 06			     jne     short @19@198
   3125					;
   3126					;	  putstr("kill:	impossivel matar o processo/thread\n");
   3127					;
   3128	0CD5  1E			     push    ds
   3129	0CD6  B8 083Cr			     mov     ax,offset DGROUP:s@+1928
   3130	0CD9  EB D3			     jmp     short @19@86
   3131	0CDB			     @19@198:
   3132					;
   3133					;	  return 1;
   3134					;      }
   3135					;      return 0;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 56
command.ASM



   3136					;
   3137	0CDB  33 C0			     xor     ax,ax
   3138	0CDD  EB D8			     jmp     short @19@114
   3139	0CDF			     @19@226:
   3140					;
   3141					;    }
   3142					;
   3143	0CDF  5F			     pop     di
   3144	0CE0  5E			     pop     si
   3145	0CE1  5D			     pop     bp
   3146	0CE2  C3			     ret
   3147	0CE3			     _cmd_kill	     endp
   3148					;
   3149					;    int cmd_set(int argc, char	far *argv[])
   3150					;
   3151					     assume  cs:_TEXT
   3152	0CE3			     _cmd_set	     proc    near
   3153	0CE3  55			     push    bp
   3154	0CE4  8B EC			     mov     bp,sp
   3155	0CE6  83 EC 02			     sub     sp,2
   3156	0CE9  56			     push    si
   3157	0CEA  57			     push    di
   3158	0CEB  8B 76 04			     mov     si,word ptr [bp+4]
   3159	0CEE  8B 7E 06			     mov     di,word ptr [bp+6]
   3160					;
   3161					;    {
   3162					;      int res;
   3163					;
   3164					;      if (argc	== 1)  {
   3165					;
   3166	0CF1  83 FE 01			     cmp     si,1
   3167	0CF4  75 07			     jne     short @20@142
   3168					;
   3169					;	  command_var_list();
   3170					;
   3171	0CF6  E8 F954			     call    near ptr command_var_list
   3172					;
   3173					;	  return 0;
   3174					;
   3175	0CF9			     @20@86:
   3176	0CF9  33 C0			     xor     ax,ax
   3177	0CFB			     @20@114:
   3178	0CFB  EB 71			     jmp     short @20@534
   3179	0CFD			     @20@142:
   3180					;
   3181					;      }
   3182					;      if (argc	== 2)
   3183					;
   3184	0CFD  83 FE 02			     cmp     si,2
   3185	0D00  75 16			     jne     short @20@198
   3186					;
   3187					;	  res =	command_var_set(argv[1],"");
   3188					;
   3189	0D02  1E			     push    ds
   3190	0D03  B8 0866r			     mov     ax,offset DGROUP:s@+1970
   3191	0D06  50			     push    ax
   3192	0D07  FF 75 06			     push    word ptr [di+6]
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 57
command.ASM



   3193	0D0A  FF 75 04			     push    word ptr [di+4]
   3194	0D0D  E8 FA5C			     call    near ptr command_var_set
   3195	0D10  83 C4 08			     add     sp,8
   3196	0D13  89 46 FE			     mov     word ptr [bp-2],ax
   3197	0D16  EB 21			     jmp     short @20@282
   3198	0D18			     @20@198:
   3199					;
   3200					;      else if (argc ==	3)
   3201					;
   3202	0D18  83 FE 03			     cmp     si,3
   3203	0D1B  75 17			     jne     short @20@254
   3204					;
   3205					;	    res	= command_var_set(argv[1],argv[2]);
   3206					;
   3207	0D1D  FF 75 0A			     push    word ptr [di+10]
   3208	0D20  FF 75 08			     push    word ptr [di+8]
   3209	0D23  FF 75 06			     push    word ptr [di+6]
   3210	0D26  FF 75 04			     push    word ptr [di+4]
   3211	0D29  E8 FA40			     call    near ptr command_var_set
   3212	0D2C  83 C4 08			     add     sp,8
   3213	0D2F  89 46 FE			     mov     word ptr [bp-2],ax
   3214	0D32  EB 05			     jmp     short @20@282
   3215	0D34			     @20@254:
   3216					;
   3217					;      else
   3218					;	  res =	-5;
   3219					;
   3220	0D34  C7 46 FE FFFB		     mov     word ptr [bp-2],-5
   3221	0D39			     @20@282:
   3222					;
   3223					;      switch (res)  {
   3224					;
   3225	0D39  8B 5E FE			     mov     bx,word ptr [bp-2]
   3226	0D3C  83 EB FB			     sub     bx,-5
   3227	0D3F  83 FB 03			     cmp     bx,3
   3228	0D42  77 28			     ja	     short @20@506
   3229	0D44  D1 E3			     shl     bx,1
   3230	0D46  2E: FF A7	0D74r		     jmp     word ptr cs:@20@C482[bx]
   3231	0D4B			     @20@366:
   3232					;
   3233					;	      case -2:
   3234					;		   putstr("Erro	em set:	nao ha espaco para novas variaveis!\n");
   3235					;
   3236	0D4B  1E			     push    ds
   3237	0D4C  B8 0867r			     mov     ax,offset DGROUP:s@+1971
   3238	0D4F  EB 10			     jmp     short @20@478
   3239	0D51			     @20@394:
   3240					;
   3241					;		   return 1;
   3242					;	      case -3:
   3243					;		   putstr("Erro	em set:	o tamanho do nome da variavel e	muito grande!\n");
   3244					;
   3245	0D51  1E			     push    ds
   3246	0D52  B8 0899r			     mov     ax,offset DGROUP:s@+2021
   3247	0D55  EB 0A			     jmp     short @20@478
   3248	0D57			     @20@422:
   3249					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 58
command.ASM



   3250					;		   return 1;
   3251					;	      case -4:
   3252					;		   putstr("Erro	em set:	o tamanho do conteudo da variavel e muito	    +
   3253				     grande!\n");
   3254					;
   3255	0D57  1E			     push    ds
   3256	0D58  B8 08D5r			     mov     ax,offset DGROUP:s@+2081
   3257	0D5B  EB 04			     jmp     short @20@478
   3258	0D5D			     @20@450:
   3259					;
   3260					;		   return 1;
   3261					;	      case -5:
   3262					;		   putstr("Erro	em set:	argumentos demais na linha de comando!\n");
   3263					;
   3264	0D5D  1E			     push    ds
   3265	0D5E  B8 0915r			     mov     ax,offset DGROUP:s@+2145
   3266	0D61			     @20@478:
   3267	0D61  50			     push    ax
   3268	0D62  E8 0000e			     call    near ptr _putstr
   3269	0D65  59			     pop     cx
   3270	0D66  59			     pop     cx
   3271					;
   3272					;		   return 1;
   3273					;
   3274	0D67  B8 0001			     mov     ax,1
   3275	0D6A  EB 8F			     jmp     short @20@114
   3276	0D6C			     @20@506:
   3277	0D6C  EB 8B			     jmp     short @20@86
   3278	0D6E			     @20@534:
   3279					;
   3280					;      }
   3281					;      return 0;
   3282					;    }
   3283					;
   3284	0D6E  5F			     pop     di
   3285	0D6F  5E			     pop     si
   3286	0D70  8B E5			     mov     sp,bp
   3287	0D72  5D			     pop     bp
   3288	0D73  C3			     ret
   3289	0D74			     _cmd_set	     endp
   3290	0D74			     @20@C482	     label   word
   3291	0D74  0D5Dr			     dw	     @20@450
   3292	0D76  0D57r			     dw	     @20@422
   3293	0D78  0D51r			     dw	     @20@394
   3294	0D7A  0D4Br			     dw	     @20@366
   3295					;
   3296					;    int cmd_unset(int argc, char far *argv[])
   3297					;
   3298					     assume  cs:_TEXT
   3299	0D7C			     _cmd_unset	     proc    near
   3300	0D7C  55			     push    bp
   3301	0D7D  8B EC			     mov     bp,sp
   3302	0D7F  83 EC 02			     sub     sp,2
   3303					;
   3304					;    {
   3305					;      int res;
   3306					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 59
command.ASM



   3307					;      if (argc	!= 2)  {
   3308					;
   3309	0D82  83 7E 04 02		     cmp     word ptr [bp+4],2
   3310	0D86  74 0F			     je	     short @21@142
   3311					;
   3312					;	  putstr("Erro em unset: numero	invalido de argumentos!\n");
   3313					;
   3314	0D88  1E			     push    ds
   3315	0D89  B8 094Ar			     mov     ax,offset DGROUP:s@+2198
   3316	0D8C			     @21@86:
   3317	0D8C  50			     push    ax
   3318	0D8D  E8 0000e			     call    near ptr _putstr
   3319	0D90  59			     pop     cx
   3320	0D91  59			     pop     cx
   3321					;
   3322					;	  return 1;
   3323					;
   3324	0D92  B8 0001			     mov     ax,1
   3325	0D95			     @21@114:
   3326	0D95  EB 21			     jmp     short @21@226
   3327	0D97			     @21@142:
   3328					;
   3329					;      }
   3330					;      res = command_var_unset(argv[1]);
   3331					;
   3332	0D97  8B 5E 06			     mov     bx,word ptr [bp+6]
   3333	0D9A  FF 77 06			     push    word ptr [bx+6]
   3334	0D9D  FF 77 04			     push    word ptr [bx+4]
   3335	0DA0  E8 F95A			     call    near ptr command_var_unset
   3336	0DA3  59			     pop     cx
   3337	0DA4  59			     pop     cx
   3338	0DA5  89 46 FE			     mov     word ptr [bp-2],ax
   3339					;
   3340					;      if (res == -1)  {
   3341					;
   3342	0DA8  83 7E FE FF		     cmp     word ptr [bp-2],-1
   3343	0DAC  75 06			     jne     short @21@198
   3344					;
   3345					;	  putstr("Erro em unset: variavel inexistente!\n");
   3346					;
   3347	0DAE  1E			     push    ds
   3348	0DAF  B8 0979r			     mov     ax,offset DGROUP:s@+2245
   3349	0DB2  EB D8			     jmp     short @21@86
   3350	0DB4			     @21@198:
   3351					;
   3352					;	  return 1;
   3353					;      }
   3354					;      return 0;
   3355					;
   3356	0DB4  33 C0			     xor     ax,ax
   3357	0DB6  EB DD			     jmp     short @21@114
   3358	0DB8			     @21@226:
   3359					;
   3360					;    }
   3361					;
   3362	0DB8  8B E5			     mov     sp,bp
   3363	0DBA  5D			     pop     bp
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 60
command.ASM



   3364	0DBB  C3			     ret
   3365	0DBC			     _cmd_unset	     endp
   3366					;
   3367					;    int cmd_echo(int argc, char far *argv[])
   3368					;
   3369					     assume  cs:_TEXT
   3370	0DBC			     _cmd_echo	     proc    near
   3371	0DBC  55			     push    bp
   3372	0DBD  8B EC			     mov     bp,sp
   3373	0DBF  83 EC 02			     sub     sp,2
   3374	0DC2  56			     push    si
   3375	0DC3  57			     push    di
   3376	0DC4  8B 7E 06			     mov     di,word ptr [bp+6]
   3377					;
   3378					;    {
   3379					;      int i,control_n=1;
   3380					;
   3381	0DC7  C7 46 FE 0001		     mov     word ptr [bp-2],1
   3382					;
   3383					;
   3384					;      if (argc>1)  {
   3385					;
   3386	0DCC  83 7E 04 01		     cmp     word ptr [bp+4],1
   3387	0DD0  7E 55			     jle     short @22@338
   3388					;
   3389					;	  if (strcmp(argv[1],"-n")==0)
   3390					;
   3391	0DD2  1E			     push    ds
   3392	0DD3  B8 099Fr			     mov     ax,offset DGROUP:s@+2283
   3393	0DD6  50			     push    ax
   3394	0DD7  FF 75 06			     push    word ptr [di+6]
   3395	0DDA  FF 75 04			     push    word ptr [di+4]
   3396	0DDD  E8 0000e			     call    near ptr _strcmp
   3397	0DE0  83 C4 08			     add     sp,8
   3398	0DE3  0B C0			     or	     ax,ax
   3399	0DE5  75 07			     jne     short @22@114
   3400					;
   3401					;	     control_n = 0;
   3402					;
   3403	0DE7  C7 46 FE 0000		     mov     word ptr [bp-2],0
   3404	0DEC  EB 0B			     jmp     short @22@142
   3405	0DEE			     @22@114:
   3406					;
   3407					;	  else
   3408					;	     putstr(argv[1]);
   3409					;
   3410	0DEE  FF 75 06			     push    word ptr [di+6]
   3411	0DF1  FF 75 04			     push    word ptr [di+4]
   3412	0DF4  E8 0000e			     call    near ptr _putstr
   3413	0DF7  59			     pop     cx
   3414	0DF8  59			     pop     cx
   3415	0DF9			     @22@142:
   3416					;
   3417					;	  for (i=2;i<argc;++i)	{
   3418					;
   3419	0DF9  BE 0002			     mov     si,2
   3420	0DFC  EB 24			     jmp     short @22@310
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 61
command.ASM



   3421	0DFE			     @22@170:
   3422					;
   3423					;	      if (i!=2 || control_n)
   3424					;
   3425	0DFE  83 FE 02			     cmp     si,2
   3426	0E01  75 06			     jne     short @22@226
   3427	0E03  83 7E FE 00		     cmp     word ptr [bp-2],0
   3428	0E07  74 08			     je	     short @22@254
   3429	0E09			     @22@226:
   3430					;
   3431					;		 putch(' ');
   3432					;
   3433	0E09  B8 0020			     mov     ax,32
   3434	0E0C  50			     push    ax
   3435	0E0D  E8 0000e			     call    near ptr _putch
   3436	0E10  59			     pop     cx
   3437	0E11			     @22@254:
   3438					;
   3439					;	      putstr(argv[i]);
   3440					;
   3441	0E11  8B DE			     mov     bx,si
   3442	0E13  B1 02			     mov     cl,2
   3443	0E15  D3 E3			     shl     bx,cl
   3444	0E17  FF 71 02			     push    word ptr [bx+di+2]
   3445	0E1A  FF 31			     push    word ptr [bx+di]
   3446	0E1C  E8 0000e			     call    near ptr _putstr
   3447	0E1F  59			     pop     cx
   3448	0E20  59			     pop     cx
   3449	0E21  46			     inc     si
   3450	0E22			     @22@310:
   3451	0E22  3B 76 04			     cmp     si,word ptr [bp+4]
   3452	0E25  7C D7			     jl	     short @22@170
   3453	0E27			     @22@338:
   3454					;
   3455					;	  }
   3456					;      }
   3457					;      if (control_n)
   3458					;
   3459	0E27  83 7E FE 00		     cmp     word ptr [bp-2],0
   3460	0E2B  74 08			     je	     short @22@394
   3461					;
   3462					;	  putch('\n');
   3463					;
   3464	0E2D  B8 000A			     mov     ax,10
   3465	0E30  50			     push    ax
   3466	0E31  E8 0000e			     call    near ptr _putch
   3467	0E34  59			     pop     cx
   3468	0E35			     @22@394:
   3469					;
   3470					;      return 0;
   3471					;
   3472	0E35  33 C0			     xor     ax,ax
   3473	0E37  EB 00			     jmp     short @22@422
   3474	0E39			     @22@422:
   3475					;
   3476					;    }
   3477					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 62
command.ASM



   3478	0E39  5F			     pop     di
   3479	0E3A  5E			     pop     si
   3480	0E3B  8B E5			     mov     sp,bp
   3481	0E3D  5D			     pop     bp
   3482	0E3E  C3			     ret
   3483	0E3F			     _cmd_echo	     endp
   3484	0E3F			     _TEXT   ends
   3485	00B0			     _DATA   segment word public 'DATA'
   3486	00B0			     demo_linha	     label   word
   3487	00B0  FC			     db	     252
   3488	00B1  FF			     db	     255
   3489	00B2			     exitcode	     label   word
*Warning* command.ASM(3495) Reserved word used as symbol: EXITCODE
   3490	00B2  00			     db	     0
   3491	00B3  00			     db	     0
   3492	00B4			     _DATA   ends
   3493	0E3F			     _TEXT   segment byte public 'CODE'
   3494					;
   3495					;    void demo()
   3496					;
   3497					     assume  cs:_TEXT
   3498	0E3F			     demo    proc    near
   3499	0E3F  55			     push    bp
   3500	0E40  8B EC			     mov     bp,sp
   3501	0E42  83 EC 16			     sub     sp,22
   3502	0E45  56			     push    si
   3503	0E46  57			     push    di
   3504					;
   3505					;    {
   3506					;      extern int demo_linha;
   3507					;      extern int exitcode;
   3508					;      unsigned	i;
   3509					;      int ini = demo_linha;
   3510					;
   3511	0E47  8B 3E 00B0r		     mov     di,word ptr DGROUP:demo_linha
   3512					;
   3513					;      char str[20];
   3514					;      int ec =	exitcode;
   3515					;
   3516	0E4B  A1 00B2r			     mov     ax,word ptr DGROUP:exitcode
   3517	0E4E  89 46 FE			     mov     word ptr [bp-2],ax
   3518					;
   3519					;
   3520					;      putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   3521					;
   3522	0E51  1E			     push    ds
   3523	0E52  B8 09A2r			     mov     ax,offset DGROUP:s@+2286
   3524	0E55  50			     push    ax
   3525	0E56  57			     push    di
   3526	0E57  B8 0041			     mov     ax,65
   3527	0E5A  50			     push    ax
   3528	0E5B  E8 0000e			     call    near ptr _putstrxy
   3529	0E5E  83 C4 08			     add     sp,8
   3530					;
   3531					;      putstrxy(65,ini+1,"≥ PID	 =	 ≥");
   3532					;
   3533	0E61  1E			     push    ds
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 63
command.ASM



   3534	0E62  B8 09B3r			     mov     ax,offset DGROUP:s@+2303
   3535	0E65  50			     push    ax
   3536	0E66  8B C7			     mov     ax,di
   3537	0E68  40			     inc     ax
   3538	0E69  50			     push    ax
   3539	0E6A  B8 0041			     mov     ax,65
   3540	0E6D  50			     push    ax
   3541	0E6E  E8 0000e			     call    near ptr _putstrxy
   3542	0E71  83 C4 08			     add     sp,8
   3543					;
   3544					;      putstrxy(65,ini+2,"≥ Execucao:	 ≥");
   3545					;
   3546	0E74  1E			     push    ds
   3547	0E75  B8 09C4r			     mov     ax,offset DGROUP:s@+2320
   3548	0E78  50			     push    ax
   3549	0E79  8B C7			     mov     ax,di
   3550	0E7B  05 0002			     add     ax,2
   3551	0E7E  50			     push    ax
   3552	0E7F  B8 0041			     mov     ax,65
   3553	0E82  50			     push    ax
   3554	0E83  E8 0000e			     call    near ptr _putstrxy
   3555	0E86  83 C4 08			     add     sp,8
   3556					;
   3557					;      putstrxy(65,ini+3,"≥		 ≥");
   3558					;
   3559	0E89  1E			     push    ds
   3560	0E8A  B8 09D5r			     mov     ax,offset DGROUP:s@+2337
   3561	0E8D  50			     push    ax
   3562	0E8E  8B C7			     mov     ax,di
   3563	0E90  05 0003			     add     ax,3
   3564	0E93  50			     push    ax
   3565	0E94  B8 0041			     mov     ax,65
   3566	0E97  50			     push    ax
   3567	0E98  E8 0000e			     call    near ptr _putstrxy
   3568	0E9B  83 C4 08			     add     sp,8
   3569					;
   3570					;      putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   3571					;
   3572	0E9E  1E			     push    ds
   3573	0E9F  B8 09E6r			     mov     ax,offset DGROUP:s@+2354
   3574	0EA2  50			     push    ax
   3575	0EA3  8B C7			     mov     ax,di
   3576	0EA5  05 0004			     add     ax,4
   3577	0EA8  50			     push    ax
   3578	0EA9  B8 0041			     mov     ax,65
   3579	0EAC  50			     push    ax
   3580	0EAD  E8 0000e			     call    near ptr _putstrxy
   3581	0EB0  83 C4 08			     add     sp,8
   3582					;
   3583					;
   3584					;      inttostr(str,getpid());
   3585					;
   3586	0EB3  E8 0000e			     call    near ptr _getpid
   3587	0EB6  50			     push    ax
   3588	0EB7  16			     push    ss
   3589	0EB8  8D 46 EA			     lea     ax,word ptr [bp-22]
   3590	0EBB  50			     push    ax
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 64
command.ASM



   3591	0EBC  E8 0000e			     call    near ptr _inttostr
   3592	0EBF  83 C4 06			     add     sp,6
   3593					;
   3594					;      putstrxy(74,ini+1,str);
   3595					;
   3596	0EC2  16			     push    ss
   3597	0EC3  8D 46 EA			     lea     ax,word ptr [bp-22]
   3598	0EC6  50			     push    ax
   3599	0EC7  8B C7			     mov     ax,di
   3600	0EC9  40			     inc     ax
   3601	0ECA  50			     push    ax
   3602	0ECB  B8 004A			     mov     ax,74
   3603	0ECE  50			     push    ax
   3604	0ECF  E8 0000e			     call    near ptr _putstrxy
   3605	0ED2  83 C4 08			     add     sp,8
   3606					;
   3607					;
   3608					;      for (i=0;i<60000U;++i)  {
   3609					;
   3610	0ED5  33 F6			     xor     si,si
   3611	0ED7  EB 29			     jmp     short @23@114
   3612	0ED9			     @23@58:
   3613					;
   3614					;	   unsignedtostr(str,i,5,'0');
   3615					;
   3616	0ED9  B0 30			     mov     al,48
   3617	0EDB  50			     push    ax
   3618	0EDC  B8 0005			     mov     ax,5
   3619	0EDF  50			     push    ax
   3620	0EE0  56			     push    si
   3621	0EE1  16			     push    ss
   3622	0EE2  8D 46 EA			     lea     ax,word ptr [bp-22]
   3623	0EE5  50			     push    ax
   3624	0EE6  E8 0000e			     call    near ptr _unsignedtostr
   3625	0EE9  83 C4 0A			     add     sp,10
   3626					;
   3627					;	   putstrxy(70,ini+3,str);
   3628					;
   3629	0EEC  16			     push    ss
   3630	0EED  8D 46 EA			     lea     ax,word ptr [bp-22]
   3631	0EF0  50			     push    ax
   3632	0EF1  8B C7			     mov     ax,di
   3633	0EF3  05 0003			     add     ax,3
   3634	0EF6  50			     push    ax
   3635	0EF7  B8 0046			     mov     ax,70
   3636	0EFA  50			     push    ax
   3637	0EFB  E8 0000e			     call    near ptr _putstrxy
   3638	0EFE  83 C4 08			     add     sp,8
   3639	0F01  46			     inc     si
   3640	0F02			     @23@114:
   3641	0F02  81 FE EA60		     cmp     si,-5536
   3642	0F06  72 D1			     jb	     short @23@58
   3643					;
   3644					;      }
   3645					;      for (i=0;i<60000U;++i)  {
   3646					;
   3647	0F08  33 F6			     xor     si,si
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 65
command.ASM



   3648	0F0A  EB 29			     jmp     short @23@226
   3649	0F0C			     @23@170:
   3650					;
   3651					;	   unsignedtostr(str,i,5,'0');
   3652					;
   3653	0F0C  B0 30			     mov     al,48
   3654	0F0E  50			     push    ax
   3655	0F0F  B8 0005			     mov     ax,5
   3656	0F12  50			     push    ax
   3657	0F13  56			     push    si
   3658	0F14  16			     push    ss
   3659	0F15  8D 46 EA			     lea     ax,word ptr [bp-22]
   3660	0F18  50			     push    ax
   3661	0F19  E8 0000e			     call    near ptr _unsignedtostr
   3662	0F1C  83 C4 0A			     add     sp,10
   3663					;
   3664					;	   putstrxy(70,ini+3,str);
   3665					;
   3666	0F1F  16			     push    ss
   3667	0F20  8D 46 EA			     lea     ax,word ptr [bp-22]
   3668	0F23  50			     push    ax
   3669	0F24  8B C7			     mov     ax,di
   3670	0F26  05 0003			     add     ax,3
   3671	0F29  50			     push    ax
   3672	0F2A  B8 0046			     mov     ax,70
   3673	0F2D  50			     push    ax
   3674	0F2E  E8 0000e			     call    near ptr _putstrxy
   3675	0F31  83 C4 08			     add     sp,8
   3676	0F34  46			     inc     si
   3677	0F35			     @23@226:
   3678	0F35  81 FE EA60		     cmp     si,-5536
   3679	0F39  72 D1			     jb	     short @23@170
   3680					;
   3681					;      }
   3682					;      for (i=0;i<60000U;++i)  {
   3683					;
   3684	0F3B  33 F6			     xor     si,si
   3685	0F3D  EB 29			     jmp     short @23@338
   3686	0F3F			     @23@282:
   3687					;
   3688					;	   unsignedtostr(str,i,5,'0');
   3689					;
   3690	0F3F  B0 30			     mov     al,48
   3691	0F41  50			     push    ax
   3692	0F42  B8 0005			     mov     ax,5
   3693	0F45  50			     push    ax
   3694	0F46  56			     push    si
   3695	0F47  16			     push    ss
   3696	0F48  8D 46 EA			     lea     ax,word ptr [bp-22]
   3697	0F4B  50			     push    ax
   3698	0F4C  E8 0000e			     call    near ptr _unsignedtostr
   3699	0F4F  83 C4 0A			     add     sp,10
   3700					;
   3701					;	   putstrxy(70,ini+3,str);
   3702					;
   3703	0F52  16			     push    ss
   3704	0F53  8D 46 EA			     lea     ax,word ptr [bp-22]
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 66
command.ASM



   3705	0F56  50			     push    ax
   3706	0F57  8B C7			     mov     ax,di
   3707	0F59  05 0003			     add     ax,3
   3708	0F5C  50			     push    ax
   3709	0F5D  B8 0046			     mov     ax,70
   3710	0F60  50			     push    ax
   3711	0F61  E8 0000e			     call    near ptr _putstrxy
   3712	0F64  83 C4 08			     add     sp,8
   3713	0F67  46			     inc     si
   3714	0F68			     @23@338:
   3715	0F68  81 FE EA60		     cmp     si,-5536
   3716	0F6C  72 D1			     jb	     short @23@282
   3717					;
   3718					;      }
   3719					;      for (i=0;i<60000U;++i)  {
   3720					;
   3721	0F6E  33 F6			     xor     si,si
   3722	0F70  EB 29			     jmp     short @23@450
   3723	0F72			     @23@394:
   3724					;
   3725					;	   unsignedtostr(str,i,5,'0');
   3726					;
   3727	0F72  B0 30			     mov     al,48
   3728	0F74  50			     push    ax
   3729	0F75  B8 0005			     mov     ax,5
   3730	0F78  50			     push    ax
   3731	0F79  56			     push    si
   3732	0F7A  16			     push    ss
   3733	0F7B  8D 46 EA			     lea     ax,word ptr [bp-22]
   3734	0F7E  50			     push    ax
   3735	0F7F  E8 0000e			     call    near ptr _unsignedtostr
   3736	0F82  83 C4 0A			     add     sp,10
   3737					;
   3738					;	   putstrxy(70,ini+3,str);
   3739					;
   3740	0F85  16			     push    ss
   3741	0F86  8D 46 EA			     lea     ax,word ptr [bp-22]
   3742	0F89  50			     push    ax
   3743	0F8A  8B C7			     mov     ax,di
   3744	0F8C  05 0003			     add     ax,3
   3745	0F8F  50			     push    ax
   3746	0F90  B8 0046			     mov     ax,70
   3747	0F93  50			     push    ax
   3748	0F94  E8 0000e			     call    near ptr _putstrxy
   3749	0F97  83 C4 08			     add     sp,8
   3750	0F9A  46			     inc     si
   3751	0F9B			     @23@450:
   3752	0F9B  81 FE EA60		     cmp     si,-5536
   3753	0F9F  72 D1			     jb	     short @23@394
   3754					;
   3755					;      }
   3756					;      for (i=0;i<60000U;++i)  {
   3757					;
   3758	0FA1  33 F6			     xor     si,si
   3759	0FA3  EB 29			     jmp     short @23@562
   3760	0FA5			     @23@506:
   3761					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 67
command.ASM



   3762					;	   unsignedtostr(str,i,5,'0');
   3763					;
   3764	0FA5  B0 30			     mov     al,48
   3765	0FA7  50			     push    ax
   3766	0FA8  B8 0005			     mov     ax,5
   3767	0FAB  50			     push    ax
   3768	0FAC  56			     push    si
   3769	0FAD  16			     push    ss
   3770	0FAE  8D 46 EA			     lea     ax,word ptr [bp-22]
   3771	0FB1  50			     push    ax
   3772	0FB2  E8 0000e			     call    near ptr _unsignedtostr
   3773	0FB5  83 C4 0A			     add     sp,10
   3774					;
   3775					;	   putstrxy(70,ini+3,str);
   3776					;
   3777	0FB8  16			     push    ss
   3778	0FB9  8D 46 EA			     lea     ax,word ptr [bp-22]
   3779	0FBC  50			     push    ax
   3780	0FBD  8B C7			     mov     ax,di
   3781	0FBF  05 0003			     add     ax,3
   3782	0FC2  50			     push    ax
   3783	0FC3  B8 0046			     mov     ax,70
   3784	0FC6  50			     push    ax
   3785	0FC7  E8 0000e			     call    near ptr _putstrxy
   3786	0FCA  83 C4 08			     add     sp,8
   3787	0FCD  46			     inc     si
   3788	0FCE			     @23@562:
   3789	0FCE  81 FE EA60		     cmp     si,-5536
   3790	0FD2  72 D1			     jb	     short @23@506
   3791					;
   3792					;      }
   3793					;      for (i=0;i<60000U;++i)  {
   3794					;
   3795	0FD4  33 F6			     xor     si,si
   3796	0FD6  EB 29			     jmp     short @23@674
   3797	0FD8			     @23@618:
   3798					;
   3799					;	   unsignedtostr(str,i,5,'0');
   3800					;
   3801	0FD8  B0 30			     mov     al,48
   3802	0FDA  50			     push    ax
   3803	0FDB  B8 0005			     mov     ax,5
   3804	0FDE  50			     push    ax
   3805	0FDF  56			     push    si
   3806	0FE0  16			     push    ss
   3807	0FE1  8D 46 EA			     lea     ax,word ptr [bp-22]
   3808	0FE4  50			     push    ax
   3809	0FE5  E8 0000e			     call    near ptr _unsignedtostr
   3810	0FE8  83 C4 0A			     add     sp,10
   3811					;
   3812					;	   putstrxy(70,ini+3,str);
   3813					;
   3814	0FEB  16			     push    ss
   3815	0FEC  8D 46 EA			     lea     ax,word ptr [bp-22]
   3816	0FEF  50			     push    ax
   3817	0FF0  8B C7			     mov     ax,di
   3818	0FF2  05 0003			     add     ax,3
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 68
command.ASM



   3819	0FF5  50			     push    ax
   3820	0FF6  B8 0046			     mov     ax,70
   3821	0FF9  50			     push    ax
   3822	0FFA  E8 0000e			     call    near ptr _putstrxy
   3823	0FFD  83 C4 08			     add     sp,8
   3824	1000  46			     inc     si
   3825	1001			     @23@674:
   3826	1001  81 FE EA60		     cmp     si,-5536
   3827	1005  72 D1			     jb	     short @23@618
   3828					;
   3829					;      }
   3830					;      exit(ec);
   3831					;
   3832	1007  FF 76 FE			     push    word ptr [bp-2]
   3833	100A  E8 0000e			     call    near ptr _exit
   3834	100D  59			     pop     cx
   3835					;
   3836					;    }
   3837					;
   3838	100E  5F			     pop     di
   3839	100F  5E			     pop     si
   3840	1010  8B E5			     mov     sp,bp
   3841	1012  5D			     pop     bp
   3842	1013  C3			     ret
   3843	1014			     demo    endp
   3844					;
   3845					;    int cmd_demo(int argc, char far *argv[])
   3846					;
   3847					     assume  cs:_TEXT
   3848	1014			     _cmd_demo	     proc    near
   3849	1014  55			     push    bp
   3850	1015  8B EC			     mov     bp,sp
   3851					;
   3852					;    {
   3853					;	     extern int	demo_linha;
   3854					;
   3855					;	     if	     (argc != 2)  {
   3856					;
   3857	1017  83 7E 04 02		     cmp     word ptr [bp+4],2
   3858	101B  74 0F			     je	     short @24@142
   3859					;
   3860					;		     putstr("Erro em demo: numero invalido de argumentos!\n");
   3861					;
   3862	101D  1E			     push    ds
   3863	101E  B8 09F7r			     mov     ax,offset DGROUP:s@+2371
   3864	1021			     @24@86:
   3865	1021  50			     push    ax
   3866	1022  E8 0000e			     call    near ptr _putstr
   3867	1025  59			     pop     cx
   3868	1026  59			     pop     cx
   3869					;
   3870					;		     return 1;
   3871					;
   3872	1027  B8 0001			     mov     ax,1
   3873	102A			     @24@114:
   3874	102A  EB 3A			     jmp     short @24@282
   3875	102C			     @24@142:
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 69
command.ASM



   3876					;
   3877					;	     }
   3878					;	     demo_linha	+= 5;
   3879					;
   3880	102C  83 06 00B0r 05		     add     word ptr DGROUP:demo_linha,5
   3881					;
   3882					;	     if	     (demo_linha >21)
   3883					;
   3884	1031  83 3E 00B0r 15		     cmp     word ptr DGROUP:demo_linha,21
   3885	1036  7E 06			     jle     short @24@198
   3886					;
   3887					;		     demo_linha	= 1;
   3888					;
   3889	1038  C7 06 00B0r 0001		     mov     word ptr DGROUP:demo_linha,1
   3890	103E			     @24@198:
   3891					;
   3892					;	     exitcode =	atoi(argv[1]);
   3893					;
   3894	103E  8B 5E 06			     mov     bx,word ptr [bp+6]
   3895	1041  FF 77 06			     push    word ptr [bx+6]
   3896	1044  FF 77 04			     push    word ptr [bx+4]
   3897	1047  E8 0000e			     call    near ptr _atoi
   3898	104A  59			     pop     cx
   3899	104B  59			     pop     cx
   3900	104C  A3 00B2r			     mov     word ptr DGROUP:exitcode,ax
   3901					;
   3902					;	     if	     (fork(demo)==miniSO_ERROR)	 {
   3903					;
   3904	104F  B8 0E3Fr			     mov     ax,offset demo
   3905	1052  50			     push    ax
   3906	1053  E8 0000e			     call    near ptr _fork
   3907	1056  59			     pop     cx
   3908	1057  3D FFFF			     cmp     ax,-1
   3909	105A  75 06			     jne     short @24@254
   3910					;
   3911					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   3912					;
   3913	105C  1E			     push    ds
   3914	105D  B8 0A25r			     mov     ax,offset DGROUP:s@+2417
   3915	1060  EB BF			     jmp     short @24@86
   3916	1062			     @24@254:
   3917					;
   3918					;		     return 1;
   3919					;	     }
   3920					;	     return 0;
   3921					;
   3922	1062  33 C0			     xor     ax,ax
   3923	1064  EB C4			     jmp     short @24@114
   3924	1066			     @24@282:
   3925					;
   3926					;    }
   3927					;
   3928	1066  5D			     pop     bp
   3929	1067  C3			     ret
   3930	1068			     _cmd_demo	     endp
   3931					;
   3932					;    int cmd_waitpid(int argc, char far	*argv[])
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 70
command.ASM



   3933					;
   3934					     assume  cs:_TEXT
   3935	1068			     _cmd_waitpid    proc    near
   3936	1068  55			     push    bp
   3937	1069  8B EC			     mov     bp,sp
   3938	106B  83 EC 16			     sub     sp,22
   3939	106E  56			     push    si
   3940					;
   3941					;    {
   3942					;	     int     status;
   3943					;	     pid_t   pid;
   3944					;	     char    str[20];
   3945					;
   3946					;	     if	     (argc != 2)  {
   3947					;
   3948	106F  83 7E 04 02		     cmp     word ptr [bp+4],2
   3949	1073  74 0F			     je	     short @25@114
   3950					;
   3951					;		     putstr("Erro em waitpid: numero invalido de argumentos!\n");
   3952					;
   3953	1075  1E			     push    ds
   3954	1076  B8 0A57r			     mov     ax,offset DGROUP:s@+2467
   3955	1079  50			     push    ax
   3956	107A  E8 0000e			     call    near ptr _putstr
   3957	107D  59			     pop     cx
   3958	107E  59			     pop     cx
   3959					;
   3960					;		     return 1;
   3961					;
   3962	107F  B8 0001			     mov     ax,1
   3963	1082			     @25@86:
   3964	1082  EB 6E			     jmp     short @25@142
   3965	1084			     @25@114:
   3966					;
   3967					;	     }
   3968					;	     pid = atoi(argv[1]);
   3969					;
   3970	1084  8B 5E 06			     mov     bx,word ptr [bp+6]
   3971	1087  FF 77 06			     push    word ptr [bx+6]
   3972	108A  FF 77 04			     push    word ptr [bx+4]
   3973	108D  E8 0000e			     call    near ptr _atoi
   3974	1090  59			     pop     cx
   3975	1091  59			     pop     cx
   3976	1092  8B F0			     mov     si,ax
   3977					;
   3978					;	     pid = waitpid(pid,&status);
   3979					;
   3980	1094  16			     push    ss
   3981	1095  8D 46 FE			     lea     ax,word ptr [bp-2]
   3982	1098  50			     push    ax
   3983	1099  56			     push    si
   3984	109A  E8 0000e			     call    near ptr _waitpid
   3985	109D  83 C4 06			     add     sp,6
   3986	10A0  8B F0			     mov     si,ax
   3987					;
   3988					;	     putstr("Processo ");
   3989					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 71
command.ASM



   3990	10A2  1E			     push    ds
   3991	10A3  B8 0A88r			     mov     ax,offset DGROUP:s@+2516
   3992	10A6  50			     push    ax
   3993	10A7  E8 0000e			     call    near ptr _putstr
   3994	10AA  59			     pop     cx
   3995	10AB  59			     pop     cx
   3996					;
   3997					;	     inttostr(str,pid);
   3998					;
   3999	10AC  56			     push    si
   4000	10AD  16			     push    ss
   4001	10AE  8D 46 EA			     lea     ax,word ptr [bp-22]
   4002	10B1  50			     push    ax
   4003	10B2  E8 0000e			     call    near ptr _inttostr
   4004	10B5  83 C4 06			     add     sp,6
   4005					;
   4006					;	     putstr(str);
   4007					;
   4008	10B8  16			     push    ss
   4009	10B9  8D 46 EA			     lea     ax,word ptr [bp-22]
   4010	10BC  50			     push    ax
   4011	10BD  E8 0000e			     call    near ptr _putstr
   4012	10C0  59			     pop     cx
   4013	10C1  59			     pop     cx
   4014					;
   4015					;	     putstr(" encerrado	com codigo de fim ");
   4016					;
   4017	10C2  1E			     push    ds
   4018	10C3  B8 0A92r			     mov     ax,offset DGROUP:s@+2526
   4019	10C6  50			     push    ax
   4020	10C7  E8 0000e			     call    near ptr _putstr
   4021	10CA  59			     pop     cx
   4022	10CB  59			     pop     cx
   4023					;
   4024					;	     inttostr(str,status);
   4025					;
   4026	10CC  FF 76 FE			     push    word ptr [bp-2]
   4027	10CF  16			     push    ss
   4028	10D0  8D 46 EA			     lea     ax,word ptr [bp-22]
   4029	10D3  50			     push    ax
   4030	10D4  E8 0000e			     call    near ptr _inttostr
   4031	10D7  83 C4 06			     add     sp,6
   4032					;
   4033					;	     putstr(str);
   4034					;
   4035	10DA  16			     push    ss
   4036	10DB  8D 46 EA			     lea     ax,word ptr [bp-22]
   4037	10DE  50			     push    ax
   4038	10DF  E8 0000e			     call    near ptr _putstr
   4039	10E2  59			     pop     cx
   4040	10E3  59			     pop     cx
   4041					;
   4042					;	     putstr("!\n");
   4043					;
   4044	10E4  1E			     push    ds
   4045	10E5  B8 0AB0r			     mov     ax,offset DGROUP:s@+2556
   4046	10E8  50			     push    ax
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 72
command.ASM



   4047	10E9  E8 0000e			     call    near ptr _putstr
   4048	10EC  59			     pop     cx
   4049	10ED  59			     pop     cx
   4050					;
   4051					;	     return 0;
   4052					;
   4053	10EE  33 C0			     xor     ax,ax
   4054	10F0  EB 90			     jmp     short @25@86
   4055	10F2			     @25@142:
   4056					;
   4057					;    }
   4058					;
   4059	10F2  5E			     pop     si
   4060	10F3  8B E5			     mov     sp,bp
   4061	10F5  5D			     pop     bp
   4062	10F6  C3			     ret
   4063	10F7			     _cmd_waitpid    endp
   4064					;
   4065					;    int cmd_wait(int argc, char far *argv[])
   4066					;
   4067					     assume  cs:_TEXT
   4068	10F7			     _cmd_wait	     proc    near
   4069	10F7  55			     push    bp
   4070	10F8  8B EC			     mov     bp,sp
   4071	10FA  83 EC 18			     sub     sp,24
   4072	10FD  56			     push    si
   4073	10FE  57			     push    di
   4074	10FF  8B 76 04			     mov     si,word ptr [bp+4]
   4075	1102  8B 7E 06			     mov     di,word ptr [bp+6]
   4076					;
   4077					;    {
   4078					;	     int     status=123;
   4079					;
   4080	1105  C7 46 FE 007B		     mov     word ptr [bp-2],123
   4081					;
   4082					;	     pid_t   pid;
   4083					;	     char    str[20];
   4084					;
   4085					;	     argc=argc;
   4086					;
   4087					;
   4088					;	     argv=argv;
   4089					;
   4090					;
   4091					;	     pid = wait(&status);
   4092					;
   4093	110A  16			     push    ss
   4094	110B  8D 46 FE			     lea     ax,word ptr [bp-2]
   4095	110E  50			     push    ax
   4096	110F  E8 0000e			     call    near ptr _wait
   4097	1112  59			     pop     cx
   4098	1113  59			     pop     cx
   4099	1114  89 46 FC			     mov     word ptr [bp-4],ax
   4100					;
   4101					;	     putstr("Processo ");
   4102					;
   4103	1117  1E			     push    ds
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 73
command.ASM



   4104	1118  B8 0AB3r			     mov     ax,offset DGROUP:s@+2559
   4105	111B  50			     push    ax
   4106	111C  E8 0000e			     call    near ptr _putstr
   4107	111F  59			     pop     cx
   4108	1120  59			     pop     cx
   4109					;
   4110					;	     inttostr(str,pid);
   4111					;
   4112	1121  FF 76 FC			     push    word ptr [bp-4]
   4113	1124  16			     push    ss
   4114	1125  8D 46 E8			     lea     ax,word ptr [bp-24]
   4115	1128  50			     push    ax
   4116	1129  E8 0000e			     call    near ptr _inttostr
   4117	112C  83 C4 06			     add     sp,6
   4118					;
   4119					;	     putstr(str);
   4120					;
   4121	112F  16			     push    ss
   4122	1130  8D 46 E8			     lea     ax,word ptr [bp-24]
   4123	1133  50			     push    ax
   4124	1134  E8 0000e			     call    near ptr _putstr
   4125	1137  59			     pop     cx
   4126	1138  59			     pop     cx
   4127					;
   4128					;	     putstr(" encerrado	com codigo de fim ");
   4129					;
   4130	1139  1E			     push    ds
   4131	113A  B8 0ABDr			     mov     ax,offset DGROUP:s@+2569
   4132	113D  50			     push    ax
   4133	113E  E8 0000e			     call    near ptr _putstr
   4134	1141  59			     pop     cx
   4135	1142  59			     pop     cx
   4136					;
   4137					;	     inttostr(str,status);
   4138					;
   4139	1143  FF 76 FE			     push    word ptr [bp-2]
   4140	1146  16			     push    ss
   4141	1147  8D 46 E8			     lea     ax,word ptr [bp-24]
   4142	114A  50			     push    ax
   4143	114B  E8 0000e			     call    near ptr _inttostr
   4144	114E  83 C4 06			     add     sp,6
   4145					;
   4146					;	     putstr(str);
   4147					;
   4148	1151  16			     push    ss
   4149	1152  8D 46 E8			     lea     ax,word ptr [bp-24]
   4150	1155  50			     push    ax
   4151	1156  E8 0000e			     call    near ptr _putstr
   4152	1159  59			     pop     cx
   4153	115A  59			     pop     cx
   4154					;
   4155					;	     putstr("!\n");
   4156					;
   4157	115B  1E			     push    ds
   4158	115C  B8 0ADBr			     mov     ax,offset DGROUP:s@+2599
   4159	115F  50			     push    ax
   4160	1160  E8 0000e			     call    near ptr _putstr
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 74
command.ASM



   4161	1163  59			     pop     cx
   4162	1164  59			     pop     cx
   4163					;
   4164					;	     return 0;
   4165					;
   4166	1165  33 C0			     xor     ax,ax
   4167	1167  EB 00			     jmp     short @26@58
   4168	1169			     @26@58:
   4169					;
   4170					;    }
   4171					;
   4172	1169  5F			     pop     di
   4173	116A  5E			     pop     si
   4174	116B  8B E5			     mov     sp,bp
   4175	116D  5D			     pop     bp
   4176	116E  C3			     ret
   4177	116F			     _cmd_wait	     endp
   4178					;
   4179					;    int cmd_semls(int argc, char far *argv[])
   4180					;
   4181					     assume  cs:_TEXT
   4182	116F			     _cmd_semls	     proc    near
   4183	116F  55			     push    bp
   4184	1170  8B EC			     mov     bp,sp
   4185	1172  83 EC 14			     sub     sp,20
   4186	1175  56			     push    si
   4187	1176  57			     push    di
   4188					;
   4189					;    {
   4190					;	     int i,n=0;
   4191					;
   4192	1177  33 FF			     xor     di,di
   4193					;
   4194					;	     char str[20];
   4195					;	     extern miniSO_SEM miniSO_sem[miniSO_MAXSEMAPHORES];
   4196					;
   4197					;	     argc=argc;
   4198					;
   4199	1179  8B 46 04			     mov     ax,word ptr [bp+4]
   4200	117C  89 46 04			     mov     word ptr [bp+4],ax
   4201					;
   4202					;	     argv=argv;
   4203					;
   4204	117F  8B 46 06			     mov     ax,word ptr [bp+6]
   4205	1182  89 46 06			     mov     word ptr [bp+6],ax
   4206					;
   4207					;	     putstr("Semaphores:\n");
   4208					;
   4209	1185  1E			     push    ds
   4210	1186  B8 0ADEr			     mov     ax,offset DGROUP:s@+2602
   4211	1189  50			     push    ax
   4212	118A  E8 0000e			     call    near ptr _putstr
   4213	118D  59			     pop     cx
   4214	118E  59			     pop     cx
   4215					;
   4216					;	     for     (i=0;i<miniSO_MAXSEMAPHORES;++i)
   4217					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 75
command.ASM



   4218	118F  33 F6			     xor     si,si
   4219	1191  E9 0095			     jmp     @27@142
   4220	1194			     @27@58:
   4221					;
   4222					;		     if	     (miniSO_sem[i].status!=FREE) {
   4223					;
   4224	1194  8B DE			     mov     bx,si
   4225	1196  B1 03			     mov     cl,3
   4226	1198  D3 E3			     shl     bx,cl
   4227	119A  83 BF 0000e FF		     cmp     word ptr DGROUP:_miniSO_sem[bx],-1
   4228	119F  75 03			     jne     @@6
   4229	11A1  E9 0084			     jmp     @27@114
   4230	11A4			     @@6:
   4231					;
   4232					;			     putstr("- id=");
   4233					;
   4234	11A4  1E			     push    ds
   4235	11A5  B8 0AEBr			     mov     ax,offset DGROUP:s@+2615
   4236	11A8  50			     push    ax
   4237	11A9  E8 0000e			     call    near ptr _putstr
   4238	11AC  59			     pop     cx
   4239	11AD  59			     pop     cx
   4240					;
   4241					;			     inttostr(str,miniSO_sem[i].semid);
   4242					;
   4243	11AE  8B DE			     mov     bx,si
   4244	11B0  B1 03			     mov     cl,3
   4245	11B2  D3 E3			     shl     bx,cl
   4246	11B4  FF B7 0002e		     push    word ptr DGROUP:_miniSO_sem[bx+2]
   4247	11B8  16			     push    ss
   4248	11B9  8D 46 EC			     lea     ax,word ptr [bp-20]
   4249	11BC  50			     push    ax
   4250	11BD  E8 0000e			     call    near ptr _inttostr
   4251	11C0  83 C4 06			     add     sp,6
   4252					;
   4253					;			     putstr(str);
   4254					;
   4255	11C3  16			     push    ss
   4256	11C4  8D 46 EC			     lea     ax,word ptr [bp-20]
   4257	11C7  50			     push    ax
   4258	11C8  E8 0000e			     call    near ptr _putstr
   4259	11CB  59			     pop     cx
   4260	11CC  59			     pop     cx
   4261					;
   4262					;			     putstr(" value=");
   4263					;
   4264	11CD  1E			     push    ds
   4265	11CE  B8 0AF1r			     mov     ax,offset DGROUP:s@+2621
   4266	11D1  50			     push    ax
   4267	11D2  E8 0000e			     call    near ptr _putstr
   4268	11D5  59			     pop     cx
   4269	11D6  59			     pop     cx
   4270					;
   4271					;			     inttostr(str,miniSO_sem[i].value);
   4272					;
   4273	11D7  8B DE			     mov     bx,si
   4274	11D9  B1 03			     mov     cl,3
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 76
command.ASM



   4275	11DB  D3 E3			     shl     bx,cl
   4276	11DD  FF B7 0004e		     push    word ptr DGROUP:_miniSO_sem[bx+4]
   4277	11E1  16			     push    ss
   4278	11E2  8D 46 EC			     lea     ax,word ptr [bp-20]
   4279	11E5  50			     push    ax
   4280	11E6  E8 0000e			     call    near ptr _inttostr
   4281	11E9  83 C4 06			     add     sp,6
   4282					;
   4283					;			     putstr(str);
   4284					;
   4285	11EC  16			     push    ss
   4286	11ED  8D 46 EC			     lea     ax,word ptr [bp-20]
   4287	11F0  50			     push    ax
   4288	11F1  E8 0000e			     call    near ptr _putstr
   4289	11F4  59			     pop     cx
   4290	11F5  59			     pop     cx
   4291					;
   4292					;			     putstr(" queue=");
   4293					;
   4294	11F6  1E			     push    ds
   4295	11F7  B8 0AF9r			     mov     ax,offset DGROUP:s@+2629
   4296	11FA  50			     push    ax
   4297	11FB  E8 0000e			     call    near ptr _putstr
   4298	11FE  59			     pop     cx
   4299	11FF  59			     pop     cx
   4300					;
   4301					;			     inttostr(str,miniSO_sem[i].queue);
   4302					;
   4303	1200  8B DE			     mov     bx,si
   4304	1202  B1 03			     mov     cl,3
   4305	1204  D3 E3			     shl     bx,cl
   4306	1206  FF B7 0006e		     push    word ptr DGROUP:_miniSO_sem[bx+6]
   4307	120A  16			     push    ss
   4308	120B  8D 46 EC			     lea     ax,word ptr [bp-20]
   4309	120E  50			     push    ax
   4310	120F  E8 0000e			     call    near ptr _inttostr
   4311	1212  83 C4 06			     add     sp,6
   4312					;
   4313					;			     putstr(str);
   4314					;
   4315	1215  16			     push    ss
   4316	1216  8D 46 EC			     lea     ax,word ptr [bp-20]
   4317	1219  50			     push    ax
   4318	121A  E8 0000e			     call    near ptr _putstr
   4319	121D  59			     pop     cx
   4320	121E  59			     pop     cx
   4321					;
   4322					;			     putch('\n');
   4323					;
   4324	121F  B8 000A			     mov     ax,10
   4325	1222  50			     push    ax
   4326	1223  E8 0000e			     call    near ptr _putch
   4327	1226  59			     pop     cx
   4328					;
   4329					;			     ++n;
   4330					;
   4331	1227  47			     inc     di
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 77
command.ASM



   4332	1228			     @27@114:
   4333	1228  46			     inc     si
   4334	1229			     @27@142:
   4335	1229  83 FE 0A			     cmp     si,10
   4336	122C  7D 03			     jge     @@7
   4337	122E  E9 FF63			     jmp     @27@58
   4338	1231			     @@7:
   4339					;
   4340					;		     }
   4341					;	     putstr("TOTAL=");
   4342					;
   4343	1231  1E			     push    ds
   4344	1232  B8 0B01r			     mov     ax,offset DGROUP:s@+2637
   4345	1235  50			     push    ax
   4346	1236  E8 0000e			     call    near ptr _putstr
   4347	1239  59			     pop     cx
   4348	123A  59			     pop     cx
   4349					;
   4350					;	     inttostr(str,n);
   4351					;
   4352	123B  57			     push    di
   4353	123C  16			     push    ss
   4354	123D  8D 46 EC			     lea     ax,word ptr [bp-20]
   4355	1240  50			     push    ax
   4356	1241  E8 0000e			     call    near ptr _inttostr
   4357	1244  83 C4 06			     add     sp,6
   4358					;
   4359					;	     putstr(str);
   4360					;
   4361	1247  16			     push    ss
   4362	1248  8D 46 EC			     lea     ax,word ptr [bp-20]
   4363	124B  50			     push    ax
   4364	124C  E8 0000e			     call    near ptr _putstr
   4365	124F  59			     pop     cx
   4366	1250  59			     pop     cx
   4367					;
   4368					;	     putstr("\n\n");
   4369					;
   4370	1251  1E			     push    ds
   4371	1252  B8 0B08r			     mov     ax,offset DGROUP:s@+2644
   4372	1255  50			     push    ax
   4373	1256  E8 0000e			     call    near ptr _putstr
   4374	1259  59			     pop     cx
   4375	125A  59			     pop     cx
   4376					;
   4377					;	     return 0;
   4378					;
   4379	125B  33 C0			     xor     ax,ax
   4380	125D  EB 00			     jmp     short @27@198
   4381	125F			     @27@198:
   4382					;
   4383					;    }
   4384					;
   4385	125F  5F			     pop     di
   4386	1260  5E			     pop     si
   4387	1261  8B E5			     mov     sp,bp
   4388	1263  5D			     pop     bp
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 78
command.ASM



   4389	1264  C3			     ret
   4390	1265			     _cmd_semls	     endp
   4391					;
   4392					;    int cmd_semcreate(int argc, char far *argv[])
   4393					;
   4394					     assume  cs:_TEXT
   4395	1265			     _cmd_semcreate  proc    near
   4396	1265  55			     push    bp
   4397	1266  8B EC			     mov     bp,sp
   4398	1268  83 EC 14			     sub     sp,20
   4399	126B  56			     push    si
   4400	126C  57			     push    di
   4401					;
   4402					;    {
   4403					;	     int     res,value;
   4404					;	     semid_t semid;
   4405					;	     char    str[20];
   4406					;
   4407					;	     if	     (argc != 2)     {
   4408					;
   4409	126D  83 7E 04 02		     cmp     word ptr [bp+4],2
   4410	1271  74 0F			     je	     short @28@142
   4411					;
   4412					;		     putstr("Erro em semcreate:	numero invalido	de argumentos!\n");
   4413					;
   4414	1273  1E			     push    ds
   4415	1274  B8 0B0Br			     mov     ax,offset DGROUP:s@+2647
   4416	1277  50			     push    ax
   4417	1278  E8 0000e			     call    near ptr _putstr
   4418	127B  59			     pop     cx
   4419	127C  59			     pop     cx
   4420					;
   4421					;		     return 1;
   4422					;
   4423	127D			     @28@86:
   4424	127D  B8 0001			     mov     ax,1
   4425	1280			     @28@114:
   4426	1280  EB 6C			     jmp     short @28@226
   4427	1282			     @28@142:
   4428					;
   4429					;	     }
   4430					;	     value = atoi(argv[1]);
   4431					;
   4432	1282  8B 5E 06			     mov     bx,word ptr [bp+6]
   4433	1285  FF 77 06			     push    word ptr [bx+6]
   4434	1288  FF 77 04			     push    word ptr [bx+4]
   4435	128B  E8 0000e			     call    near ptr _atoi
   4436	128E  59			     pop     cx
   4437	128F  59			     pop     cx
   4438	1290  8B F0			     mov     si,ax
   4439					;
   4440					;	     semid = semcreate(value);
   4441					;
   4442	1292  56			     push    si
   4443	1293  E8 0000e			     call    near ptr _semcreate
   4444	1296  59			     pop     cx
   4445	1297  8B F8			     mov     di,ax
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 79
command.ASM



   4446					;
   4447					;	     if	     (semid==miniSO_ERROR)
   4448					;
   4449	1299  83 FF FF			     cmp     di,-1
   4450	129C  75 02			     jne     short @28@198
   4451	129E  EB DD			     jmp     short @28@86
   4452	12A0			     @28@198:
   4453					;
   4454					;		     return 1;
   4455					;	     putstr("Semaforo id=");
   4456					;
   4457	12A0  1E			     push    ds
   4458	12A1  B8 0B3Er			     mov     ax,offset DGROUP:s@+2698
   4459	12A4  50			     push    ax
   4460	12A5  E8 0000e			     call    near ptr _putstr
   4461	12A8  59			     pop     cx
   4462	12A9  59			     pop     cx
   4463					;
   4464					;	     inttostr(str,semid);
   4465					;
   4466	12AA  57			     push    di
   4467	12AB  16			     push    ss
   4468	12AC  8D 46 EC			     lea     ax,word ptr [bp-20]
   4469	12AF  50			     push    ax
   4470	12B0  E8 0000e			     call    near ptr _inttostr
   4471	12B3  83 C4 06			     add     sp,6
   4472					;
   4473					;	     putstr(str);
   4474					;
   4475	12B6  16			     push    ss
   4476	12B7  8D 46 EC			     lea     ax,word ptr [bp-20]
   4477	12BA  50			     push    ax
   4478	12BB  E8 0000e			     call    near ptr _putstr
   4479	12BE  59			     pop     cx
   4480	12BF  59			     pop     cx
   4481					;
   4482					;	     putstr(" criado (value=");
   4483					;
   4484	12C0  1E			     push    ds
   4485	12C1  B8 0B4Br			     mov     ax,offset DGROUP:s@+2711
   4486	12C4  50			     push    ax
   4487	12C5  E8 0000e			     call    near ptr _putstr
   4488	12C8  59			     pop     cx
   4489	12C9  59			     pop     cx
   4490					;
   4491					;	     inttostr(str,value);
   4492					;
   4493	12CA  56			     push    si
   4494	12CB  16			     push    ss
   4495	12CC  8D 46 EC			     lea     ax,word ptr [bp-20]
   4496	12CF  50			     push    ax
   4497	12D0  E8 0000e			     call    near ptr _inttostr
   4498	12D3  83 C4 06			     add     sp,6
   4499					;
   4500					;	     putstr(str);
   4501					;
   4502	12D6  16			     push    ss
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 80
command.ASM



   4503	12D7  8D 46 EC			     lea     ax,word ptr [bp-20]
   4504	12DA  50			     push    ax
   4505	12DB  E8 0000e			     call    near ptr _putstr
   4506	12DE  59			     pop     cx
   4507	12DF  59			     pop     cx
   4508					;
   4509					;	     putstr(")\n");
   4510					;
   4511	12E0  1E			     push    ds
   4512	12E1  B8 0B5Br			     mov     ax,offset DGROUP:s@+2727
   4513	12E4  50			     push    ax
   4514	12E5  E8 0000e			     call    near ptr _putstr
   4515	12E8  59			     pop     cx
   4516	12E9  59			     pop     cx
   4517					;
   4518					;	     return 0;
   4519					;
   4520	12EA  33 C0			     xor     ax,ax
   4521	12EC  EB 92			     jmp     short @28@114
   4522	12EE			     @28@226:
   4523					;
   4524					;    }
   4525					;
   4526	12EE  5F			     pop     di
   4527	12EF  5E			     pop     si
   4528	12F0  8B E5			     mov     sp,bp
   4529	12F2  5D			     pop     bp
   4530	12F3  C3			     ret
   4531	12F4			     _cmd_semcreate  endp
   4532					;
   4533					;    void sem_aplic()
   4534					;
   4535					     assume  cs:_TEXT
   4536	12F4			     _sem_aplic	     proc    near
   4537	12F4  55			     push    bp
   4538	12F5  8B EC			     mov     bp,sp
   4539	12F7  83 EC 14			     sub     sp,20
   4540	12FA  56			     push    si
   4541	12FB  57			     push    di
   4542					;
   4543					;    {
   4544					;	     extern int	demo_linha;
   4545					;	     extern semid_t semid;
   4546					;	     unsigned i;
   4547					;	     int ini = demo_linha;
   4548					;
   4549	12FC  8B 3E 00B0r		     mov     di,word ptr DGROUP:demo_linha
   4550					;
   4551					;	     char str[20];
   4552					;
   4553					;	     putstrxy(65,ini+0,"⁄ƒƒ Thread ƒƒƒƒø");
   4554					;
   4555	1300  1E			     push    ds
   4556	1301  B8 0B5Er			     mov     ax,offset DGROUP:s@+2730
   4557	1304  50			     push    ax
   4558	1305  57			     push    di
   4559	1306  B8 0041			     mov     ax,65
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 81
command.ASM



   4560	1309  50			     push    ax
   4561	130A  E8 0000e			     call    near ptr _putstrxy
   4562	130D  83 C4 08			     add     sp,8
   4563					;
   4564					;	     putstrxy(65,ini+1,"≥ PID  =       ≥");
   4565					;
   4566	1310  1E			     push    ds
   4567	1311  B8 0B6Fr			     mov     ax,offset DGROUP:s@+2747
   4568	1314  50			     push    ax
   4569	1315  8B C7			     mov     ax,di
   4570	1317  40			     inc     ax
   4571	1318  50			     push    ax
   4572	1319  B8 0041			     mov     ax,65
   4573	131C  50			     push    ax
   4574	131D  E8 0000e			     call    near ptr _putstrxy
   4575	1320  83 C4 08			     add     sp,8
   4576					;
   4577					;	     putstrxy(65,ini+2,"≥ Execucao:    ≥");
   4578					;
   4579	1323  1E			     push    ds
   4580	1324  B8 0B80r			     mov     ax,offset DGROUP:s@+2764
   4581	1327  50			     push    ax
   4582	1328  8B C7			     mov     ax,di
   4583	132A  05 0002			     add     ax,2
   4584	132D  50			     push    ax
   4585	132E  B8 0041			     mov     ax,65
   4586	1331  50			     push    ax
   4587	1332  E8 0000e			     call    near ptr _putstrxy
   4588	1335  83 C4 08			     add     sp,8
   4589					;
   4590					;	     putstrxy(65,ini+3,"≥	       ≥");
   4591					;
   4592	1338  1E			     push    ds
   4593	1339  B8 0B91r			     mov     ax,offset DGROUP:s@+2781
   4594	133C  50			     push    ax
   4595	133D  8B C7			     mov     ax,di
   4596	133F  05 0003			     add     ax,3
   4597	1342  50			     push    ax
   4598	1343  B8 0041			     mov     ax,65
   4599	1346  50			     push    ax
   4600	1347  E8 0000e			     call    near ptr _putstrxy
   4601	134A  83 C4 08			     add     sp,8
   4602					;
   4603					;	     putstrxy(65,ini+4,"¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ");
   4604					;
   4605	134D  1E			     push    ds
   4606	134E  B8 0BA2r			     mov     ax,offset DGROUP:s@+2798
   4607	1351  50			     push    ax
   4608	1352  8B C7			     mov     ax,di
   4609	1354  05 0004			     add     ax,4
   4610	1357  50			     push    ax
   4611	1358  B8 0041			     mov     ax,65
   4612	135B  50			     push    ax
   4613	135C  E8 0000e			     call    near ptr _putstrxy
   4614	135F  83 C4 08			     add     sp,8
   4615					;
   4616					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 82
command.ASM



   4617					;	     inttostr(str,getpid());
   4618					;
   4619	1362  E8 0000e			     call    near ptr _getpid
   4620	1365  50			     push    ax
   4621	1366  16			     push    ss
   4622	1367  8D 46 EC			     lea     ax,word ptr [bp-20]
   4623	136A  50			     push    ax
   4624	136B  E8 0000e			     call    near ptr _inttostr
   4625	136E  83 C4 06			     add     sp,6
   4626					;
   4627					;	     putstrxy(74,ini+1,str);
   4628					;
   4629	1371  16			     push    ss
   4630	1372  8D 46 EC			     lea     ax,word ptr [bp-20]
   4631	1375  50			     push    ax
   4632	1376  8B C7			     mov     ax,di
   4633	1378  40			     inc     ax
   4634	1379  50			     push    ax
   4635	137A  B8 004A			     mov     ax,74
   4636	137D  50			     push    ax
   4637	137E  E8 0000e			     call    near ptr _putstrxy
   4638	1381  83 C4 08			     add     sp,8
   4639					;
   4640					;	     for     (i=0;i<30000U;++i)	 {
   4641					;
   4642	1384  33 F6			     xor     si,si
   4643	1386  EB 29			     jmp     short @29@114
   4644	1388			     @29@58:
   4645					;
   4646					;		     unsignedtostr(str,i,5,'0');
   4647					;
   4648	1388  B0 30			     mov     al,48
   4649	138A  50			     push    ax
   4650	138B  B8 0005			     mov     ax,5
   4651	138E  50			     push    ax
   4652	138F  56			     push    si
   4653	1390  16			     push    ss
   4654	1391  8D 46 EC			     lea     ax,word ptr [bp-20]
   4655	1394  50			     push    ax
   4656	1395  E8 0000e			     call    near ptr _unsignedtostr
   4657	1398  83 C4 0A			     add     sp,10
   4658					;
   4659					;		     putstrxy(70,ini+3,str);
   4660					;
   4661	139B  16			     push    ss
   4662	139C  8D 46 EC			     lea     ax,word ptr [bp-20]
   4663	139F  50			     push    ax
   4664	13A0  8B C7			     mov     ax,di
   4665	13A2  05 0003			     add     ax,3
   4666	13A5  50			     push    ax
   4667	13A6  B8 0046			     mov     ax,70
   4668	13A9  50			     push    ax
   4669	13AA  E8 0000e			     call    near ptr _putstrxy
   4670	13AD  83 C4 08			     add     sp,8
   4671	13B0  46			     inc     si
   4672	13B1			     @29@114:
   4673	13B1  81 FE 7530		     cmp     si,30000
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 83
command.ASM



   4674	13B5  72 D1			     jb	     short @29@58
   4675					;
   4676					;	     }
   4677					;	     semdown(semid);
   4678					;
   4679	13B7  FF 36 0014r		     push    word ptr DGROUP:_semid
   4680	13BB  E8 0000e			     call    near ptr _semdown
   4681	13BE  59			     pop     cx
   4682	13BF  EB 29			     jmp     short @29@226
   4683	13C1			     @29@170:
   4684					;
   4685					;	     for     (;i<60000U;++i)  {
   4686					;		     unsignedtostr(str,i,5,'0');
   4687					;
   4688	13C1  B0 30			     mov     al,48
   4689	13C3  50			     push    ax
   4690	13C4  B8 0005			     mov     ax,5
   4691	13C7  50			     push    ax
   4692	13C8  56			     push    si
   4693	13C9  16			     push    ss
   4694	13CA  8D 46 EC			     lea     ax,word ptr [bp-20]
   4695	13CD  50			     push    ax
   4696	13CE  E8 0000e			     call    near ptr _unsignedtostr
   4697	13D1  83 C4 0A			     add     sp,10
   4698					;
   4699					;		     putstrxy(70,ini+3,str);
   4700					;
   4701	13D4  16			     push    ss
   4702	13D5  8D 46 EC			     lea     ax,word ptr [bp-20]
   4703	13D8  50			     push    ax
   4704	13D9  8B C7			     mov     ax,di
   4705	13DB  05 0003			     add     ax,3
   4706	13DE  50			     push    ax
   4707	13DF  B8 0046			     mov     ax,70
   4708	13E2  50			     push    ax
   4709	13E3  E8 0000e			     call    near ptr _putstrxy
   4710	13E6  83 C4 08			     add     sp,8
   4711	13E9  46			     inc     si
   4712	13EA			     @29@226:
   4713	13EA  81 FE EA60		     cmp     si,-5536
   4714	13EE  72 D1			     jb	     short @29@170
   4715					;
   4716					;	     }
   4717					;	     exit(0);
   4718					;
   4719	13F0  33 C0			     xor     ax,ax
   4720	13F2  50			     push    ax
   4721	13F3  E8 0000e			     call    near ptr _exit
   4722	13F6  59			     pop     cx
   4723					;
   4724					;    }
   4725					;
   4726	13F7  5F			     pop     di
   4727	13F8  5E			     pop     si
   4728	13F9  8B E5			     mov     sp,bp
   4729	13FB  5D			     pop     bp
   4730	13FC  C3			     ret
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 84
command.ASM



   4731	13FD			     _sem_aplic	     endp
   4732					;
   4733					;    int cmd_semtest(int argc, char far	*argv[])
   4734					;
   4735					     assume  cs:_TEXT
   4736	13FD			     _cmd_semtest    proc    near
   4737	13FD  55			     push    bp
   4738	13FE  8B EC			     mov     bp,sp
   4739					;
   4740					;    {
   4741					;	     extern int	demo_linha;
   4742					;	     extern semid_t semid;
   4743					;
   4744					;	     if	     (argc != 2)     {
   4745					;
   4746	1400  83 7E 04 02		     cmp     word ptr [bp+4],2
   4747	1404  74 0F			     je	     short @30@142
   4748					;
   4749					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4750					;
   4751	1406  1E			     push    ds
   4752	1407  B8 0BB3r			     mov     ax,offset DGROUP:s@+2815
   4753	140A			     @30@86:
   4754	140A  50			     push    ax
   4755	140B  E8 0000e			     call    near ptr _putstr
   4756	140E  59			     pop     cx
   4757	140F  59			     pop     cx
   4758					;
   4759					;		     return 1;
   4760					;
   4761	1410  B8 0001			     mov     ax,1
   4762	1413			     @30@114:
   4763	1413  EB 3A			     jmp     short @30@282
   4764	1415			     @30@142:
   4765					;
   4766					;	     }
   4767					;	     semid = atoi(argv[1]);
   4768					;
   4769	1415  8B 5E 06			     mov     bx,word ptr [bp+6]
   4770	1418  FF 77 06			     push    word ptr [bx+6]
   4771	141B  FF 77 04			     push    word ptr [bx+4]
   4772	141E  E8 0000e			     call    near ptr _atoi
   4773	1421  59			     pop     cx
   4774	1422  59			     pop     cx
   4775	1423  A3 0014r			     mov     word ptr DGROUP:_semid,ax
   4776					;
   4777					;	     demo_linha	+= 5;
   4778					;
   4779	1426  83 06 00B0r 05		     add     word ptr DGROUP:demo_linha,5
   4780					;
   4781					;	     if	     (demo_linha >21)
   4782					;
   4783	142B  83 3E 00B0r 15		     cmp     word ptr DGROUP:demo_linha,21
   4784	1430  7E 06			     jle     short @30@198
   4785					;
   4786					;		     demo_linha	= 1;
   4787					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 85
command.ASM



   4788	1432  C7 06 00B0r 0001		     mov     word ptr DGROUP:demo_linha,1
   4789	1438			     @30@198:
   4790					;
   4791					;	     if	     (fork(sem_aplic)==miniSO_ERROR)  {
   4792					;
   4793	1438  B8 12F4r			     mov     ax,offset _sem_aplic
   4794	143B  50			     push    ax
   4795	143C  E8 0000e			     call    near ptr _fork
   4796	143F  59			     pop     cx
   4797	1440  3D FFFF			     cmp     ax,-1
   4798	1443  75 06			     jne     short @30@254
   4799					;
   4800					;		     putstr("Erro em demo: fork() nao conseguiu	criar thread!\n");
   4801					;
   4802	1445  1E			     push    ds
   4803	1446  B8 0BE4r			     mov     ax,offset DGROUP:s@+2864
   4804	1449  EB BF			     jmp     short @30@86
   4805	144B			     @30@254:
   4806					;
   4807					;		     return 1;
   4808					;	     }
   4809					;	     return 0;
   4810					;
   4811	144B  33 C0			     xor     ax,ax
   4812	144D  EB C4			     jmp     short @30@114
   4813	144F			     @30@282:
   4814					;
   4815					;    }
   4816					;
   4817	144F  5D			     pop     bp
   4818	1450  C3			     ret
   4819	1451			     _cmd_semtest    endp
   4820					;
   4821					;    int cmd_semup(int argc, char far *argv[])
   4822					;
   4823					     assume  cs:_TEXT
   4824	1451			     _cmd_semup	     proc    near
   4825	1451  55			     push    bp
   4826	1452  8B EC			     mov     bp,sp
   4827	1454  83 EC 02			     sub     sp,2
   4828					;
   4829					;    {
   4830					;	     semid_t semid;
   4831					;
   4832					;	     if	     (argc != 2)     {
   4833					;
   4834	1457  83 7E 04 02		     cmp     word ptr [bp+4],2
   4835	145B  74 0F			     je	     short @31@114
   4836					;
   4837					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4838					;
   4839	145D  1E			     push    ds
   4840	145E  B8 0C16r			     mov     ax,offset DGROUP:s@+2914
   4841	1461  50			     push    ax
   4842	1462  E8 0000e			     call    near ptr _putstr
   4843	1465  59			     pop     cx
   4844	1466  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 86
command.ASM



   4845					;
   4846					;		     return 1;
   4847					;
   4848	1467  B8 0001			     mov     ax,1
   4849	146A			     @31@86:
   4850	146A  EB 1A			     jmp     short @31@142
   4851	146C			     @31@114:
   4852					;
   4853					;	     }
   4854					;	     semid = atoi(argv[1]);
   4855					;
   4856	146C  8B 5E 06			     mov     bx,word ptr [bp+6]
   4857	146F  FF 77 06			     push    word ptr [bx+6]
   4858	1472  FF 77 04			     push    word ptr [bx+4]
   4859	1475  E8 0000e			     call    near ptr _atoi
   4860	1478  59			     pop     cx
   4861	1479  59			     pop     cx
   4862	147A  89 46 FE			     mov     word ptr [bp-2],ax
   4863					;
   4864					;	     return semup(semid);
   4865					;
   4866	147D  FF 76 FE			     push    word ptr [bp-2]
   4867	1480  E8 0000e			     call    near ptr _semup
   4868	1483  59			     pop     cx
   4869	1484  EB E4			     jmp     short @31@86
   4870	1486			     @31@142:
   4871					;
   4872					;    }
   4873					;
   4874	1486  8B E5			     mov     sp,bp
   4875	1488  5D			     pop     bp
   4876	1489  C3			     ret
   4877	148A			     _cmd_semup	     endp
   4878					;
   4879					;    int cmd_semdestroy(int argc, char far *argv[])
   4880					;
   4881					     assume  cs:_TEXT
   4882	148A			     _cmd_semdestroy proc    near
   4883	148A  55			     push    bp
   4884	148B  8B EC			     mov     bp,sp
   4885	148D  83 EC 02			     sub     sp,2
   4886					;
   4887					;    {
   4888					;	     semid_t semid;
   4889					;
   4890					;	     if	     (argc != 2)     {
   4891					;
   4892	1490  83 7E 04 02		     cmp     word ptr [bp+4],2
   4893	1494  74 0F			     je	     short @32@114
   4894					;
   4895					;		     putstr("Erro em semtest: numero invalido de argumentos!\n");
   4896					;
   4897	1496  1E			     push    ds
   4898	1497  B8 0C47r			     mov     ax,offset DGROUP:s@+2963
   4899	149A  50			     push    ax
   4900	149B  E8 0000e			     call    near ptr _putstr
   4901	149E  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 87
command.ASM



   4902	149F  59			     pop     cx
   4903					;
   4904					;		     return 1;
   4905					;
   4906	14A0  B8 0001			     mov     ax,1
   4907	14A3			     @32@86:
   4908	14A3  EB 1A			     jmp     short @32@142
   4909	14A5			     @32@114:
   4910					;
   4911					;	     }
   4912					;	     semid = atoi(argv[1]);
   4913					;
   4914	14A5  8B 5E 06			     mov     bx,word ptr [bp+6]
   4915	14A8  FF 77 06			     push    word ptr [bx+6]
   4916	14AB  FF 77 04			     push    word ptr [bx+4]
   4917	14AE  E8 0000e			     call    near ptr _atoi
   4918	14B1  59			     pop     cx
   4919	14B2  59			     pop     cx
   4920	14B3  89 46 FE			     mov     word ptr [bp-2],ax
   4921					;
   4922					;	     return semdestroy(semid);
   4923					;
   4924	14B6  FF 76 FE			     push    word ptr [bp-2]
   4925	14B9  E8 0000e			     call    near ptr _semdestroy
   4926	14BC  59			     pop     cx
   4927	14BD  EB E4			     jmp     short @32@86
   4928	14BF			     @32@142:
   4929					;
   4930					;    }
   4931					;
   4932	14BF  8B E5			     mov     sp,bp
   4933	14C1  5D			     pop     bp
   4934	14C2  C3			     ret
   4935	14C3			     _cmd_semdestroy endp
   4936					;
   4937					;    int cmd_stop(int argc, char far *argv[]){
   4938					;
   4939					     assume  cs:_TEXT
   4940	14C3			     _cmd_stop	     proc    near
   4941	14C3  55			     push    bp
   4942	14C4  8B EC			     mov     bp,sp
   4943	14C6  56			     push    si
   4944	14C7  57			     push    di
   4945					;
   4946					;	 int t=0;
   4947					;
   4948	14C8  33 F6			     xor     si,si
   4949					;
   4950					;	 pid_t pid=0;
   4951					;
   4952	14CA  33 FF			     xor     di,di
   4953					;
   4954					;	 if(argc<2) {
   4955					;
   4956	14CC  83 7E 04 02		     cmp     word ptr [bp+4],2
   4957	14D0  7D 0F			     jge     short @33@114
   4958					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 88
command.ASM



   4959					;	     putstr("stop: nenhum parametro foi	fornecido\n");
   4960					;
   4961	14D2  1E			     push    ds
   4962	14D3  B8 0C78r			     mov     ax,offset DGROUP:s@+3012
   4963	14D6  50			     push    ax
   4964	14D7  E8 0000e			     call    near ptr _putstr
   4965	14DA  59			     pop     cx
   4966	14DB  59			     pop     cx
   4967					;
   4968					;	     return miniSO_ERROR;
   4969					;
   4970	14DC  B8 FFFF			     mov     ax,-1
   4971	14DF			     @33@86:
   4972	14DF  EB 2A			     jmp     short @33@198
   4973	14E1			     @33@114:
   4974					;
   4975					;	 }
   4976					;	 pid = atoi(argv[1]);
   4977					;
   4978	14E1  8B 5E 06			     mov     bx,word ptr [bp+6]
   4979	14E4  FF 77 06			     push    word ptr [bx+6]
   4980	14E7  FF 77 04			     push    word ptr [bx+4]
   4981	14EA  E8 0000e			     call    near ptr _atoi
   4982	14ED  59			     pop     cx
   4983	14EE  59			     pop     cx
   4984	14EF  8B F8			     mov     di,ax
   4985					;
   4986					;	 t = stop(pid);
   4987					;
   4988	14F1  57			     push    di
   4989	14F2  E8 0000e			     call    near ptr _stop
   4990	14F5  59			     pop     cx
   4991	14F6  8B F0			     mov     si,ax
   4992					;
   4993					;	 if(t==miniSO_ERROR){ putstr("stop: impossivel suspender a thread\n");}
   4994					;
   4995	14F8  83 FE FF			     cmp     si,-1
   4996	14FB  75 0A			     jne     short @33@170
   4997	14FD  1E			     push    ds
   4998	14FE  B8 0C9Er			     mov     ax,offset DGROUP:s@+3050
   4999	1501  50			     push    ax
   5000	1502  E8 0000e			     call    near ptr _putstr
   5001	1505  59			     pop     cx
   5002	1506  59			     pop     cx
   5003	1507			     @33@170:
   5004					;
   5005					;	 return	t;
   5006					;
   5007	1507  8B C6			     mov     ax,si
   5008	1509  EB D4			     jmp     short @33@86
   5009	150B			     @33@198:
   5010					;
   5011					;    }
   5012					;
   5013	150B  5F			     pop     di
   5014	150C  5E			     pop     si
   5015	150D  5D			     pop     bp
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 89
command.ASM



   5016	150E  C3			     ret
   5017	150F			     _cmd_stop	     endp
   5018					;
   5019					;    int cmd_resume(int	argc, char far *argv[]){
   5020					;
   5021					     assume  cs:_TEXT
   5022	150F			     _cmd_resume     proc    near
   5023	150F  55			     push    bp
   5024	1510  8B EC			     mov     bp,sp
   5025	1512  56			     push    si
   5026	1513  57			     push    di
   5027					;
   5028					;	 int t=0;
   5029					;
   5030	1514  33 F6			     xor     si,si
   5031					;
   5032					;	 pid_t pid=0;
   5033					;
   5034	1516  33 FF			     xor     di,di
   5035					;
   5036					;	 if(argc<2){
   5037					;
   5038	1518  83 7E 04 02		     cmp     word ptr [bp+4],2
   5039	151C  7D 0F			     jge     short @34@114
   5040					;
   5041					;	     putstr("resume: nenhum parametro foi fornecido\n");
   5042					;
   5043	151E  1E			     push    ds
   5044	151F  B8 0CC3r			     mov     ax,offset DGROUP:s@+3087
   5045	1522  50			     push    ax
   5046	1523  E8 0000e			     call    near ptr _putstr
   5047	1526  59			     pop     cx
   5048	1527  59			     pop     cx
   5049					;
   5050					;	     return miniSO_ERROR;
   5051					;
   5052	1528  B8 FFFF			     mov     ax,-1
   5053	152B			     @34@86:
   5054	152B  EB 2A			     jmp     short @34@198
   5055	152D			     @34@114:
   5056					;
   5057					;	 }
   5058					;	 pid = atoi(argv[1]);
   5059					;
   5060	152D  8B 5E 06			     mov     bx,word ptr [bp+6]
   5061	1530  FF 77 06			     push    word ptr [bx+6]
   5062	1533  FF 77 04			     push    word ptr [bx+4]
   5063	1536  E8 0000e			     call    near ptr _atoi
   5064	1539  59			     pop     cx
   5065	153A  59			     pop     cx
   5066	153B  8B F8			     mov     di,ax
   5067					;
   5068					;	 t = resume(pid);
   5069					;
   5070	153D  57			     push    di
   5071	153E  E8 0000e			     call    near ptr _resume
   5072	1541  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 90
command.ASM



   5073	1542  8B F0			     mov     si,ax
   5074					;
   5075					;	 if(t==miniSO_ERROR){ putstr("resume: impossivel reiniciar a thread\n");}
   5076					;
   5077	1544  83 FE FF			     cmp     si,-1
   5078	1547  75 0A			     jne     short @34@170
   5079	1549  1E			     push    ds
   5080	154A  B8 0CEBr			     mov     ax,offset DGROUP:s@+3127
   5081	154D  50			     push    ax
   5082	154E  E8 0000e			     call    near ptr _putstr
   5083	1551  59			     pop     cx
   5084	1552  59			     pop     cx
   5085	1553			     @34@170:
   5086					;
   5087					;	 return	t;
   5088					;
   5089	1553  8B C6			     mov     ax,si
   5090	1555  EB D4			     jmp     short @34@86
   5091	1557			     @34@198:
   5092					;
   5093					;    }
   5094					;
   5095	1557  5F			     pop     di
   5096	1558  5E			     pop     si
   5097	1559  5D			     pop     bp
   5098	155A  C3			     ret
   5099	155B			     _cmd_resume     endp
   5100					;
   5101					;    void inicializaBuffer() {
   5102					;
   5103					     assume  cs:_TEXT
   5104	155B			     _inicializaBuffer	     proc    near
   5105	155B  55			     push    bp
   5106	155C  8B EC			     mov     bp,sp
   5107					;
   5108					;	 int i=0;
   5109					;
   5110	155E  33 D2			     xor     dx,dx
   5111	1560  EB 0B			     jmp     short @35@114
   5112	1562			     @35@58:
   5113					;
   5114					;	 for (;	i < tamanhoDoBuffer; i++) buffer[i] = 0;
   5115					;
   5116	1562  8B DA			     mov     bx,dx
   5117	1564  D1 E3			     shl     bx,1
   5118	1566  C7 87 0020r 0000		     mov     word ptr DGROUP:buffer[bx],0
   5119	156C  42			     inc     dx
   5120	156D			     @35@114:
   5121	156D  3B 16 00AEr		     cmp     dx,word ptr DGROUP:tamanhoDoBuffer
   5122	1571  7C EF			     jl	     short @35@58
   5123					;
   5124					;    }
   5125					;
   5126	1573  5D			     pop     bp
   5127	1574  C3			     ret
   5128	1575			     _inicializaBuffer	     endp
   5129					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 91
command.ASM



   5130					;    void imprimeConteudoBuffer() {
   5131					;
   5132					     assume  cs:_TEXT
   5133	1575			     _imprimeConteudoBuffer  proc    near
   5134	1575  55			     push    bp
   5135	1576  8B EC			     mov     bp,sp
   5136	1578  83 EC 06			     sub     sp,6
   5137	157B  56			     push    si
   5138					;
   5139					;	 char str[1];
   5140					;
   5141					;	 int i = 0;
   5142					;
   5143	157C  33 F6			     xor     si,si
   5144					;
   5145					;	 int x = 56;
   5146					;
   5147	157E  C7 46 FC 0038		     mov     word ptr [bp-4],56
   5148					;
   5149					;	 int y = demo_linha + 10;
   5150					;
   5151	1583  A1 00B0r			     mov     ax,word ptr DGROUP:demo_linha
   5152	1586  05 000A			     add     ax,10
   5153	1589  89 46 FA			     mov     word ptr [bp-6],ax
   5154	158C  EB 2F			     jmp     short @36@114
   5155	158E			     @36@58:
   5156					;
   5157					;
   5158					;	 for(;i<tamanhoDoBuffer;i++) {
   5159					;	     inttostr(str, buffer[i]);
   5160					;
   5161	158E  8B DE			     mov     bx,si
   5162	1590  D1 E3			     shl     bx,1
   5163	1592  FF B7 0020r		     push    word ptr DGROUP:buffer[bx]
   5164	1596  16			     push    ss
   5165	1597  8D 46 FE			     lea     ax,word ptr [bp-2]
   5166	159A  50			     push    ax
   5167	159B  E8 0000e			     call    near ptr _inttostr
   5168	159E  83 C4 06			     add     sp,6
   5169					;
   5170					;	     putstrxy(x+2+i, y+8, str);
   5171					;
   5172	15A1  16			     push    ss
   5173	15A2  8D 46 FE			     lea     ax,word ptr [bp-2]
   5174	15A5  50			     push    ax
   5175	15A6  8B 46 FA			     mov     ax,word ptr [bp-6]
   5176	15A9  05 0008			     add     ax,8
   5177	15AC  50			     push    ax
   5178	15AD  8B 46 FC			     mov     ax,word ptr [bp-4]
   5179	15B0  03 C6			     add     ax,si
   5180	15B2  05 0002			     add     ax,2
   5181	15B5  50			     push    ax
   5182	15B6  E8 0000e			     call    near ptr _putstrxy
   5183	15B9  83 C4 08			     add     sp,8
   5184	15BC  46			     inc     si
   5185	15BD			     @36@114:
   5186	15BD  3B 36 00AEr		     cmp     si,word ptr DGROUP:tamanhoDoBuffer
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 92
command.ASM



   5187	15C1  7C CB			     jl	     short @36@58
   5188					;
   5189					;	 }
   5190					;    }
   5191					;
   5192	15C3  5E			     pop     si
   5193	15C4  8B E5			     mov     sp,bp
   5194	15C6  5D			     pop     bp
   5195	15C7  C3			     ret
   5196	15C8			     _imprimeConteudoBuffer  endp
   5197					;
   5198					;    void imprimeBuffer() {
   5199					;
   5200					     assume  cs:_TEXT
   5201	15C8			     _imprimeBuffer  proc    near
   5202	15C8  55			     push    bp
   5203	15C9  8B EC			     mov     bp,sp
   5204	15CB  83 EC 14			     sub     sp,20
   5205	15CE  56			     push    si
   5206	15CF  57			     push    di
   5207					;
   5208					;	 extern	int demo_linha;
   5209					;	 int x = 56;
   5210					;
   5211	15D0  BE 0038			     mov     si,56
   5212					;
   5213					;	 int y = demo_linha + 10;
   5214					;
   5215	15D3  A1 00B0r			     mov     ax,word ptr DGROUP:demo_linha
   5216	15D6  05 000A			     add     ax,10
   5217	15D9  8B F8			     mov     di,ax
   5218					;
   5219					;	 char str[20];
   5220					;
   5221					;	 putstrxy(x, y+4, "		 ");
   5222					;
   5223	15DB  1E			     push    ds
   5224	15DC  B8 0D12r			     mov     ax,offset DGROUP:s@+3166
   5225	15DF  50			     push    ax
   5226	15E0  8B C7			     mov     ax,di
   5227	15E2  05 0004			     add     ax,4
   5228	15E5  50			     push    ax
   5229	15E6  56			     push    si
   5230	15E7  E8 0000e			     call    near ptr _putstrxy
   5231	15EA  83 C4 08			     add     sp,8
   5232					;
   5233					;	 putstrxy(x, y+5, "		 ");
   5234					;
   5235	15ED  1E			     push    ds
   5236	15EE  B8 0D21r			     mov     ax,offset DGROUP:s@+3181
   5237	15F1  50			     push    ax
   5238	15F2  8B C7			     mov     ax,di
   5239	15F4  05 0005			     add     ax,5
   5240	15F7  50			     push    ax
   5241	15F8  56			     push    si
   5242	15F9  E8 0000e			     call    near ptr _putstrxy
   5243	15FC  83 C4 08			     add     sp,8
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 93
command.ASM



   5244					;
   5245					;	 putstrxy(x, y+6, "   Prodcons	 ");
   5246					;
   5247	15FF  1E			     push    ds
   5248	1600  B8 0D30r			     mov     ax,offset DGROUP:s@+3196
   5249	1603  50			     push    ax
   5250	1604  8B C7			     mov     ax,di
   5251	1606  05 0006			     add     ax,6
   5252	1609  50			     push    ax
   5253	160A  56			     push    si
   5254	160B  E8 0000e			     call    near ptr _putstrxy
   5255	160E  83 C4 08			     add     sp,8
   5256					;
   5257					;
   5258					;	 putstrxy(x, y+7, "Tamanho do buffer:");
   5259					;
   5260	1611  1E			     push    ds
   5261	1612  B8 0D3Fr			     mov     ax,offset DGROUP:s@+3211
   5262	1615  50			     push    ax
   5263	1616  8B C7			     mov     ax,di
   5264	1618  05 0007			     add     ax,7
   5265	161B  50			     push    ax
   5266	161C  56			     push    si
   5267	161D  E8 0000e			     call    near ptr _putstrxy
   5268	1620  83 C4 08			     add     sp,8
   5269					;
   5270					;	 inttostr(str, tamanhoDoBuffer);
   5271					;
   5272	1623  FF 36 00AEr		     push    word ptr DGROUP:tamanhoDoBuffer
   5273	1627  16			     push    ss
   5274	1628  8D 46 EC			     lea     ax,word ptr [bp-20]
   5275	162B  50			     push    ax
   5276	162C  E8 0000e			     call    near ptr _inttostr
   5277	162F  83 C4 06			     add     sp,6
   5278					;
   5279					;	 putstrxy(x+17,	y+7, str);
   5280					;
   5281	1632  16			     push    ss
   5282	1633  8D 46 EC			     lea     ax,word ptr [bp-20]
   5283	1636  50			     push    ax
   5284	1637  8B C7			     mov     ax,di
   5285	1639  05 0007			     add     ax,7
   5286	163C  50			     push    ax
   5287	163D  8B C6			     mov     ax,si
   5288	163F  05 0011			     add     ax,17
   5289	1642  50			     push    ax
   5290	1643  E8 0000e			     call    near ptr _putstrxy
   5291	1646  83 C4 08			     add     sp,8
   5292					;
   5293					;
   5294					;	 putstrxy(x, y+8, "X ");
   5295					;
   5296	1649  1E			     push    ds
   5297	164A  B8 0D52r			     mov     ax,offset DGROUP:s@+3230
   5298	164D  50			     push    ax
   5299	164E  8B C7			     mov     ax,di
   5300	1650  05 0008			     add     ax,8
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 94
command.ASM



   5301	1653  50			     push    ax
   5302	1654  56			     push    si
   5303	1655  E8 0000e			     call    near ptr _putstrxy
   5304	1658  83 C4 08			     add     sp,8
   5305					;
   5306					;	 imprimeConteudoBuffer();
   5307					;
   5308	165B  E8 FF17			     call    near ptr _imprimeConteudoBuffer
   5309					;
   5310					;	 putstrxy(x+20,	y+8, "	X");
   5311					;
   5312	165E  1E			     push    ds
   5313	165F  B8 0D55r			     mov     ax,offset DGROUP:s@+3233
   5314	1662  50			     push    ax
   5315	1663  8B C7			     mov     ax,di
   5316	1665  05 0008			     add     ax,8
   5317	1668  50			     push    ax
   5318	1669  8B C6			     mov     ax,si
   5319	166B  05 0014			     add     ax,20
   5320	166E  50			     push    ax
   5321	166F  E8 0000e			     call    near ptr _putstrxy
   5322	1672  83 C4 08			     add     sp,8
   5323					;
   5324					;
   5325					;	 inttostr(str, tempoDeProducao);
   5326					;
   5327	1675  FF 36 001Er		     push    word ptr DGROUP:tempoDeProducao
   5328	1679  16			     push    ss
   5329	167A  8D 46 EC			     lea     ax,word ptr [bp-20]
   5330	167D  50			     push    ax
   5331	167E  E8 0000e			     call    near ptr _inttostr
   5332	1681  83 C4 06			     add     sp,6
   5333					;
   5334					;	 putstrxy(x, y+9, "Produtor:	   ");
   5335					;
   5336	1684  1E			     push    ds
   5337	1685  B8 0D59r			     mov     ax,offset DGROUP:s@+3237
   5338	1688  50			     push    ax
   5339	1689  8B C7			     mov     ax,di
   5340	168B  05 0009			     add     ax,9
   5341	168E  50			     push    ax
   5342	168F  56			     push    si
   5343	1690  E8 0000e			     call    near ptr _putstrxy
   5344	1693  83 C4 08			     add     sp,8
   5345					;
   5346					;	 putstrxy(x+12,	y+9, str);
   5347					;
   5348	1696  16			     push    ss
   5349	1697  8D 46 EC			     lea     ax,word ptr [bp-20]
   5350	169A  50			     push    ax
   5351	169B  8B C7			     mov     ax,di
   5352	169D  05 0009			     add     ax,9
   5353	16A0  50			     push    ax
   5354	16A1  8B C6			     mov     ax,si
   5355	16A3  05 000C			     add     ax,12
   5356	16A6  50			     push    ax
   5357	16A7  E8 0000e			     call    near ptr _putstrxy
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 95
command.ASM



   5358	16AA  83 C4 08			     add     sp,8
   5359					;
   5360					;
   5361					;	 inttostr(str, tempoDeConsumo);
   5362					;
   5363	16AD  FF 36 001Cr		     push    word ptr DGROUP:tempoDeConsumo
   5364	16B1  16			     push    ss
   5365	16B2  8D 46 EC			     lea     ax,word ptr [bp-20]
   5366	16B5  50			     push    ax
   5367	16B6  E8 0000e			     call    near ptr _inttostr
   5368	16B9  83 C4 06			     add     sp,6
   5369					;
   5370					;	 putstrxy(x, y+10, "Consumidor:	      ");
   5371					;
   5372	16BC  1E			     push    ds
   5373	16BD  B8 0D6Ar			     mov     ax,offset DGROUP:s@+3254
   5374	16C0  50			     push    ax
   5375	16C1  8B C7			     mov     ax,di
   5376	16C3  05 000A			     add     ax,10
   5377	16C6  50			     push    ax
   5378	16C7  56			     push    si
   5379	16C8  E8 0000e			     call    near ptr _putstrxy
   5380	16CB  83 C4 08			     add     sp,8
   5381					;
   5382					;	 putstrxy(x+14,	y+10, str);
   5383					;
   5384	16CE  16			     push    ss
   5385	16CF  8D 46 EC			     lea     ax,word ptr [bp-20]
   5386	16D2  50			     push    ax
   5387	16D3  8B C7			     mov     ax,di
   5388	16D5  05 000A			     add     ax,10
   5389	16D8  50			     push    ax
   5390	16D9  8B C6			     mov     ax,si
   5391	16DB  05 000E			     add     ax,14
   5392	16DE  50			     push    ax
   5393	16DF  E8 0000e			     call    near ptr _putstrxy
   5394	16E2  83 C4 08			     add     sp,8
   5395					;
   5396					;
   5397					;	 putstrxy(x, y+11, " --------------- ");
   5398					;
   5399	16E5  1E			     push    ds
   5400	16E6  B8 0D7Dr			     mov     ax,offset DGROUP:s@+3273
   5401	16E9  50			     push    ax
   5402	16EA  8B C7			     mov     ax,di
   5403	16EC  05 000B			     add     ax,11
   5404	16EF  50			     push    ax
   5405	16F0  56			     push    si
   5406	16F1  E8 0000e			     call    near ptr _putstrxy
   5407	16F4  83 C4 08			     add     sp,8
   5408					;
   5409					;    }
   5410					;
   5411	16F7  5F			     pop     di
   5412	16F8  5E			     pop     si
   5413	16F9  8B E5			     mov     sp,bp
   5414	16FB  5D			     pop     bp
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 96
command.ASM



   5415	16FC  C3			     ret
   5416	16FD			     _imprimeBuffer  endp
   5417					;
   5418					;    int incrementaPosicaoNoBuffer(pos)	{
   5419					;
   5420					     assume  cs:_TEXT
   5421	16FD			     _incrementaPosicaoNoBuffer	     proc    near
   5422	16FD  55			     push    bp
   5423	16FE  8B EC			     mov     bp,sp
   5424	1700  8B 56 04			     mov     dx,word ptr [bp+4]
   5425					;
   5426					;	 return	pos == tamanhoDoBuffer - 1 ? 0 : pos + 1;
   5427					;
   5428	1703  A1 00AEr			     mov     ax,word ptr DGROUP:tamanhoDoBuffer
   5429	1706  48			     dec     ax
   5430	1707  3B C2			     cmp     ax,dx
   5431	1709  75 04			     jne     short @38@86
   5432	170B  33 C0			     xor     ax,ax
   5433	170D  EB 03			     jmp     short @38@114
   5434	170F			     @38@86:
   5435	170F  8B C2			     mov     ax,dx
   5436	1711  40			     inc     ax
   5437	1712			     @38@114:
   5438	1712  EB 00			     jmp     short @38@142
   5439	1714			     @38@142:
   5440					;
   5441					;    }
   5442					;
   5443	1714  5D			     pop     bp
   5444	1715  C3			     ret
   5445	1716			     _incrementaPosicaoNoBuffer	     endp
   5446					;
   5447					;    void sleep(int segundos) {
   5448					;
   5449					     assume  cs:_TEXT
   5450	1716			     _sleep  proc    near
   5451	1716  55			     push    bp
   5452	1717  8B EC			     mov     bp,sp
   5453	1719  83 EC 08			     sub     sp,8
   5454					;
   5455					;	 long i	= 0;
   5456					;
   5457	171C  C7 46 FE 0000		     mov     word ptr [bp-2],0
   5458	1721  C7 46 FC 0000		     mov     word ptr [bp-4],0
   5459	1726  EB 30			     jmp     short @39@226
   5460	1728			     @39@58:
   5461					;
   5462					;	 long j;
   5463					;
   5464					;	 for(;i	< segundos; i++) {
   5465					;	     for(j=0; j	< segundoDoProcessador;	j++) {}
   5466					;
   5467	1728  C7 46 FA 0000		     mov     word ptr [bp-6],0
   5468	172D  C7 46 F8 0000		     mov     word ptr [bp-8],0
   5469	1732  EB 08			     jmp     short @39@114
   5470	1734			     @39@86:
   5471	1734  83 46 F8 01		     add     word ptr [bp-8],1
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 97
command.ASM



   5472	1738  83 56 FA 00		     adc     word ptr [bp-6],0
   5473	173C			     @39@114:
   5474	173C  8B 46 FA			     mov     ax,word ptr [bp-6]
   5475	173F  8B 56 F8			     mov     dx,word ptr [bp-8]
   5476	1742  3B 06 00ACr		     cmp     ax,word ptr DGROUP:segundoDoProcessador+2
   5477	1746  7C EC			     jl	     short @39@86
   5478	1748  75 06			     jne     short @39@198
   5479	174A  3B 16 00AAr		     cmp     dx,word ptr DGROUP:segundoDoProcessador
   5480	174E  72 E4			     jb	     short @39@86
   5481	1750			     @39@198:
   5482	1750  83 46 FC 01		     add     word ptr [bp-4],1
   5483	1754  83 56 FE 00		     adc     word ptr [bp-2],0
   5484	1758			     @39@226:
   5485	1758  8B 46 04			     mov     ax,word ptr [bp+4]
   5486	175B  99			     cwd
   5487	175C  3B 56 FE			     cmp     dx,word ptr [bp-2]
   5488	175F  7F C7			     jg	     short @39@58
   5489	1761  75 05			     jne     short @39@310
   5490	1763  3B 46 FC			     cmp     ax,word ptr [bp-4]
   5491	1766  77 C0			     ja	     short @39@58
   5492	1768			     @39@310:
   5493					;
   5494					;	 }
   5495					;    }
   5496					;
   5497	1768  8B E5			     mov     sp,bp
   5498	176A  5D			     pop     bp
   5499	176B  C3			     ret
   5500	176C			     _sleep  endp
   5501					;
   5502					;    int produz(pos) {
   5503					;
   5504					     assume  cs:_TEXT
   5505	176C			     _produz proc    near
   5506	176C  55			     push    bp
   5507	176D  8B EC			     mov     bp,sp
   5508	176F  56			     push    si
   5509	1770  8B 76 04			     mov     si,word ptr [bp+4]
   5510					;
   5511					;	 buffer[pos] = 1;
   5512					;
   5513	1773  8B DE			     mov     bx,si
   5514	1775  D1 E3			     shl     bx,1
   5515	1777  C7 87 0020r 0001		     mov     word ptr DGROUP:buffer[bx],1
   5516					;
   5517					;	 imprimeBuffer();
   5518					;
   5519	177D  E8 FE48			     call    near ptr _imprimeBuffer
   5520					;
   5521					;	 return	incrementaPosicaoNoBuffer(pos);
   5522					;
   5523	1780  56			     push    si
   5524	1781  E8 FF79			     call    near ptr _incrementaPosicaoNoBuffer
   5525	1784  59			     pop     cx
   5526	1785  EB 00			     jmp     short @40@58
   5527	1787			     @40@58:
   5528					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 98
command.ASM



   5529					;    }
   5530					;
   5531	1787  5E			     pop     si
   5532	1788  5D			     pop     bp
   5533	1789  C3			     ret
   5534	178A			     _produz endp
   5535					;
   5536					;    void produtor() {
   5537					;
   5538					     assume  cs:_TEXT
   5539	178A			     _produtor	     proc    near
   5540	178A  55			     push    bp
   5541	178B  8B EC			     mov     bp,sp
   5542	178D  56			     push    si
   5543					;
   5544					;	 int posicaoDeProducao = 0;
   5545					;
   5546	178E  33 F6			     xor     si,si
   5547	1790			     @41@58:
   5548					;
   5549					;	 while(1) {
   5550					;	     semdown(vazio);
   5551					;
   5552	1790  FF 36 0018r		     push    word ptr DGROUP:vazio
   5553	1794  E8 0000e			     call    near ptr _semdown
   5554	1797  59			     pop     cx
   5555					;
   5556					;	     semdown(mutex);
   5557					;
   5558	1798  FF 36 001Ar		     push    word ptr DGROUP:mutex
   5559	179C  E8 0000e			     call    near ptr _semdown
   5560	179F  59			     pop     cx
   5561					;
   5562					;
   5563					;	     posicaoDeProducao = produz(posicaoDeProducao);
   5564					;
   5565	17A0  56			     push    si
   5566	17A1  E8 FFC8			     call    near ptr _produz
   5567	17A4  59			     pop     cx
   5568	17A5  8B F0			     mov     si,ax
   5569					;
   5570					;
   5571					;	     semup(mutex);
   5572					;
   5573	17A7  FF 36 001Ar		     push    word ptr DGROUP:mutex
   5574	17AB  E8 0000e			     call    near ptr _semup
   5575	17AE  59			     pop     cx
   5576					;
   5577					;	     semup(cheio);
   5578					;
   5579	17AF  FF 36 0016r		     push    word ptr DGROUP:cheio
   5580	17B3  E8 0000e			     call    near ptr _semup
   5581	17B6  59			     pop     cx
   5582					;
   5583					;
   5584					;	     sleep(tempoDeProducao);
   5585					;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 99
command.ASM



   5586	17B7  FF 36 001Er		     push    word ptr DGROUP:tempoDeProducao
   5587	17BB  E8 FF58			     call    near ptr _sleep
   5588	17BE  59			     pop     cx
   5589	17BF  EB CF			     jmp     short @41@58
   5590					;
   5591					;	 }
   5592					;
   5593					;    }
   5594					;
   5595	17C1  5E			     pop     si
   5596	17C2  5D			     pop     bp
   5597	17C3  C3			     ret
   5598	17C4			     _produtor	     endp
   5599					;
   5600					;    int consome(pos) {
   5601					;
   5602					     assume  cs:_TEXT
   5603	17C4			     _consome	     proc    near
   5604	17C4  55			     push    bp
   5605	17C5  8B EC			     mov     bp,sp
   5606	17C7  56			     push    si
   5607	17C8  8B 76 04			     mov     si,word ptr [bp+4]
   5608					;
   5609					;	 buffer[pos] = 0;
   5610					;
   5611	17CB  8B DE			     mov     bx,si
   5612	17CD  D1 E3			     shl     bx,1
   5613	17CF  C7 87 0020r 0000		     mov     word ptr DGROUP:buffer[bx],0
   5614					;
   5615					;	 imprimeBuffer();
   5616					;
   5617	17D5  E8 FDF0			     call    near ptr _imprimeBuffer
   5618					;
   5619					;	 return	incrementaPosicaoNoBuffer(pos);
   5620					;
   5621	17D8  56			     push    si
   5622	17D9  E8 FF21			     call    near ptr _incrementaPosicaoNoBuffer
   5623	17DC  59			     pop     cx
   5624	17DD  EB 00			     jmp     short @42@58
   5625	17DF			     @42@58:
   5626					;
   5627					;    }
   5628					;
   5629	17DF  5E			     pop     si
   5630	17E0  5D			     pop     bp
   5631	17E1  C3			     ret
   5632	17E2			     _consome	     endp
   5633					;
   5634					;    void consumidor() {
   5635					;
   5636					     assume  cs:_TEXT
   5637	17E2			     _consumidor     proc    near
   5638	17E2  55			     push    bp
   5639	17E3  8B EC			     mov     bp,sp
   5640	17E5  56			     push    si
   5641					;
   5642					;	 int posicaoDeConsumo =	0;
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 100
command.ASM



   5643					;
   5644	17E6  33 F6			     xor     si,si
   5645	17E8			     @43@58:
   5646					;
   5647					;	 while(1) {
   5648					;	     semdown(cheio);
   5649					;
   5650	17E8  FF 36 0016r		     push    word ptr DGROUP:cheio
   5651	17EC  E8 0000e			     call    near ptr _semdown
   5652	17EF  59			     pop     cx
   5653					;
   5654					;	     semdown(mutex);
   5655					;
   5656	17F0  FF 36 001Ar		     push    word ptr DGROUP:mutex
   5657	17F4  E8 0000e			     call    near ptr _semdown
   5658	17F7  59			     pop     cx
   5659					;
   5660					;
   5661					;	     posicaoDeConsumo =	consome(posicaoDeConsumo);
   5662					;
   5663	17F8  56			     push    si
   5664	17F9  E8 FFC8			     call    near ptr _consome
   5665	17FC  59			     pop     cx
   5666	17FD  8B F0			     mov     si,ax
   5667					;
   5668					;
   5669					;	     semup(mutex);
   5670					;
   5671	17FF  FF 36 001Ar		     push    word ptr DGROUP:mutex
   5672	1803  E8 0000e			     call    near ptr _semup
   5673	1806  59			     pop     cx
   5674					;
   5675					;	     semup(vazio);
   5676					;
   5677	1807  FF 36 0018r		     push    word ptr DGROUP:vazio
   5678	180B  E8 0000e			     call    near ptr _semup
   5679	180E  59			     pop     cx
   5680					;
   5681					;
   5682					;	     sleep(tempoDeProducao);
   5683					;
   5684	180F  FF 36 001Er		     push    word ptr DGROUP:tempoDeProducao
   5685	1813  E8 FF00			     call    near ptr _sleep
   5686	1816  59			     pop     cx
   5687	1817  EB CF			     jmp     short @43@58
   5688					;
   5689					;	 }
   5690					;    }
   5691					;
   5692	1819  5E			     pop     si
   5693	181A  5D			     pop     bp
   5694	181B  C3			     ret
   5695	181C			     _consumidor     endp
   5696					;
   5697					;    int cmd_prodcons(int argc,	char far *argv[])
   5698					;
   5699					     assume  cs:_TEXT
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 101
command.ASM



   5700	181C			     _cmd_prodcons   proc    near
   5701	181C  55			     push    bp
   5702	181D  8B EC			     mov     bp,sp
   5703	181F  56			     push    si
   5704	1820  8B 76 06			     mov     si,word ptr [bp+6]
   5705					;
   5706					;    {
   5707					;
   5708					;	     if	     (argc != 4)  {
   5709					;
   5710	1823  83 7E 04 04		     cmp     word ptr [bp+4],4
   5711	1827  74 10			     je	     short @44@142
   5712					;
   5713					;		     putstr("Erro em prodcons: numero invalido de argumentos!\n");
   5714					;
   5715	1829  1E			     push    ds
   5716	182A  B8 0D8Fr			     mov     ax,offset DGROUP:s@+3291
   5717	182D			     @44@86:
   5718	182D  50			     push    ax
   5719	182E  E8 0000e			     call    near ptr _putstr
   5720	1831  59			     pop     cx
   5721	1832  59			     pop     cx
   5722					;
   5723					;		     return 1;
   5724					;
   5725	1833  B8 0001			     mov     ax,1
   5726	1836			     @44@114:
   5727	1836  E9 0091			     jmp     @44@338
   5728	1839			     @44@142:
   5729					;
   5730					;	     }
   5731					;
   5732					;	 tempoDeProducao = atoi(argv[1]);
   5733					;
   5734	1839  FF 74 06			     push    word ptr [si+6]
   5735	183C  FF 74 04			     push    word ptr [si+4]
   5736	183F  E8 0000e			     call    near ptr _atoi
   5737	1842  59			     pop     cx
   5738	1843  59			     pop     cx
   5739	1844  A3 001Er			     mov     word ptr DGROUP:tempoDeProducao,ax
   5740					;
   5741					;	 tempoDeConsumo	= atoi(argv[2]);
   5742					;
   5743	1847  FF 74 0A			     push    word ptr [si+10]
   5744	184A  FF 74 08			     push    word ptr [si+8]
   5745	184D  E8 0000e			     call    near ptr _atoi
   5746	1850  59			     pop     cx
   5747	1851  59			     pop     cx
   5748	1852  A3 001Cr			     mov     word ptr DGROUP:tempoDeConsumo,ax
   5749					;
   5750					;	 tamanhoDoBuffer = atoi(argv[3]);
   5751					;
   5752	1855  FF 74 0E			     push    word ptr [si+14]
   5753	1858  FF 74 0C			     push    word ptr [si+12]
   5754	185B  E8 0000e			     call    near ptr _atoi
   5755	185E  59			     pop     cx
   5756	185F  59			     pop     cx
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 102
command.ASM



   5757	1860  A3 00AEr			     mov     word ptr DGROUP:tamanhoDoBuffer,ax
   5758					;
   5759					;
   5760					;	 if (tamanhoDoBuffer ==	0) {
   5761					;
   5762	1863  83 3E 00AEr 00		     cmp     word ptr DGROUP:tamanhoDoBuffer,0
   5763	1868  75 06			     jne     short @44@198
   5764					;
   5765					;		     putstr("Erro em prodcons: numero invalido de tamanho do buffer!\n");
   5766					;
   5767	186A  1E			     push    ds
   5768	186B  B8 0DC1r			     mov     ax,offset DGROUP:s@+3341
   5769	186E  EB BD			     jmp     short @44@86
   5770	1870			     @44@198:
   5771					;
   5772					;		     return 1;
   5773					;	     }
   5774					;
   5775					;	 mutex = semcreate(1);
   5776					;
   5777	1870  B8 0001			     mov     ax,1
   5778	1873  50			     push    ax
   5779	1874  E8 0000e			     call    near ptr _semcreate
   5780	1877  59			     pop     cx
   5781	1878  A3 001Ar			     mov     word ptr DGROUP:mutex,ax
   5782					;
   5783					;	 vazio = semcreate(tamanhoDoBuffer);
   5784					;
   5785	187B  FF 36 00AEr		     push    word ptr DGROUP:tamanhoDoBuffer
   5786	187F  E8 0000e			     call    near ptr _semcreate
   5787	1882  59			     pop     cx
   5788	1883  A3 0018r			     mov     word ptr DGROUP:vazio,ax
   5789					;
   5790					;	 cheio = semcreate(0);
   5791					;
   5792	1886  33 C0			     xor     ax,ax
   5793	1888  50			     push    ax
   5794	1889  E8 0000e			     call    near ptr _semcreate
   5795	188C  59			     pop     cx
   5796	188D  A3 0016r			     mov     word ptr DGROUP:cheio,ax
   5797					;
   5798					;
   5799					;	 inicializaBuffer();
   5800					;
   5801	1890  E8 FCC8			     call    near ptr _inicializaBuffer
   5802					;
   5803					;
   5804					;	 imprimeBuffer();
   5805					;
   5806	1893  E8 FD32			     call    near ptr _imprimeBuffer
   5807					;
   5808					;
   5809					;	 if (fork(produtor)==miniSO_ERROR) {
   5810					;
   5811	1896  B8 178Ar			     mov     ax,offset _produtor
   5812	1899  50			     push    ax
   5813	189A  E8 0000e			     call    near ptr _fork
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 103
command.ASM



   5814	189D  59			     pop     cx
   5815	189E  3D FFFF			     cmp     ax,-1
   5816	18A1  75 06			     jne     short @44@254
   5817					;
   5818					;	     putstr("Erro em prodcons: erro ao criar fork!\n");
   5819					;
   5820	18A3  1E			     push    ds
   5821	18A4  B8 0DFAr			     mov     ax,offset DGROUP:s@+3398
   5822	18A7  EB 84			     jmp     @44@86
   5823	18A9			     @44@254:
   5824					;
   5825					;	     return 1;
   5826					;	 }
   5827					;
   5828					;	 if (fork(consumidor)==miniSO_ERROR) {
   5829					;
   5830	18A9  B8 17E2r			     mov     ax,offset _consumidor
   5831	18AC  50			     push    ax
   5832	18AD  E8 0000e			     call    near ptr _fork
   5833	18B0  59			     pop     cx
   5834	18B1  3D FFFF			     cmp     ax,-1
   5835	18B4  75 07			     jne     short @44@310
   5836					;
   5837					;	     putstr("Erro em prodcons: erro ao criar fork!\n");
   5838					;
   5839	18B6  1E			     push    ds
   5840	18B7  B8 0E21r			     mov     ax,offset DGROUP:s@+3437
   5841	18BA  E9 FF70			     jmp     @44@86
   5842	18BD			     @44@310:
   5843					;
   5844					;	     return 1;
   5845					;	 }
   5846					;
   5847					;	 sleep(tempoDeProducao);
   5848					;
   5849	18BD  FF 36 001Er		     push    word ptr DGROUP:tempoDeProducao
   5850	18C1  E8 FE52			     call    near ptr _sleep
   5851	18C4  59			     pop     cx
   5852					;
   5853					;	     return 0;
   5854					;
   5855	18C5  33 C0			     xor     ax,ax
   5856	18C7  E9 FF6C			     jmp     @44@114
   5857	18CA			     @44@338:
   5858					;
   5859					;    }
   5860					;
   5861	18CA  5E			     pop     si
   5862	18CB  5D			     pop     bp
   5863	18CC  C3			     ret
   5864	18CD			     _cmd_prodcons   endp
   5865					;
   5866					;    int cmd_tprod(int argc, char far *argv[]) {
   5867					;
   5868					     assume  cs:_TEXT
   5869	18CD			     _cmd_tprod	     proc    near
   5870	18CD  55			     push    bp
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 104
command.ASM



   5871	18CE  8B EC			     mov     bp,sp
   5872					;
   5873					;	 if (argc != 2)	{
   5874					;
   5875	18D0  83 7E 04 02		     cmp     word ptr [bp+4],2
   5876	18D4  74 0F			     je	     short @45@114
   5877					;
   5878					;	     putstr("Erro em prodcons: numero invalido de argumentos!\n");
   5879					;
   5880	18D6  1E			     push    ds
   5881	18D7  B8 0E48r			     mov     ax,offset DGROUP:s@+3476
   5882	18DA  50			     push    ax
   5883	18DB  E8 0000e			     call    near ptr _putstr
   5884	18DE  59			     pop     cx
   5885	18DF  59			     pop     cx
   5886					;
   5887					;	     return 1;
   5888					;
   5889	18E0  B8 0001			     mov     ax,1
   5890	18E3			     @45@86:
   5891	18E3  EB 15			     jmp     short @45@142
   5892	18E5			     @45@114:
   5893					;
   5894					;	 }
   5895					;
   5896					;	 tempoDeProducao = atoi(argv[1]); return 0;
   5897					;
   5898	18E5  8B 5E 06			     mov     bx,word ptr [bp+6]
   5899	18E8  FF 77 06			     push    word ptr [bx+6]
   5900	18EB  FF 77 04			     push    word ptr [bx+4]
   5901	18EE  E8 0000e			     call    near ptr _atoi
   5902	18F1  59			     pop     cx
   5903	18F2  59			     pop     cx
   5904	18F3  A3 001Er			     mov     word ptr DGROUP:tempoDeProducao,ax
   5905	18F6  33 C0			     xor     ax,ax
   5906	18F8  EB E9			     jmp     short @45@86
   5907	18FA			     @45@142:
   5908					;
   5909					;    }
   5910					;
   5911	18FA  5D			     pop     bp
   5912	18FB  C3			     ret
   5913	18FC			     _cmd_tprod	     endp
   5914					;
   5915					;    int cmd_tcons(int argc, char far *argv[]) {
   5916					;
   5917					     assume  cs:_TEXT
   5918	18FC			     _cmd_tcons	     proc    near
   5919	18FC  55			     push    bp
   5920	18FD  8B EC			     mov     bp,sp
   5921					;
   5922					;	 if (argc != 2)	{
   5923					;
   5924	18FF  83 7E 04 02		     cmp     word ptr [bp+4],2
   5925	1903  74 0F			     je	     short @46@114
   5926					;
   5927					;	     putstr("Erro em prodcons: numero invalido de argumentos!\n");
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 105
command.ASM



   5928					;
   5929	1905  1E			     push    ds
   5930	1906  B8 0E7Ar			     mov     ax,offset DGROUP:s@+3526
   5931	1909  50			     push    ax
   5932	190A  E8 0000e			     call    near ptr _putstr
   5933	190D  59			     pop     cx
   5934	190E  59			     pop     cx
   5935					;
   5936					;	     return 1;
   5937					;
   5938	190F  B8 0001			     mov     ax,1
   5939	1912			     @46@86:
   5940	1912  EB 15			     jmp     short @46@142
   5941	1914			     @46@114:
   5942					;
   5943					;	 }
   5944					;
   5945					;	 tempoDeConsumo	= atoi(argv[1]); return	0;
   5946					;
   5947	1914  8B 5E 06			     mov     bx,word ptr [bp+6]
   5948	1917  FF 77 06			     push    word ptr [bx+6]
   5949	191A  FF 77 04			     push    word ptr [bx+4]
   5950	191D  E8 0000e			     call    near ptr _atoi
   5951	1920  59			     pop     cx
   5952	1921  59			     pop     cx
   5953	1922  A3 001Cr			     mov     word ptr DGROUP:tempoDeConsumo,ax
   5954	1925  33 C0			     xor     ax,ax
   5955	1927  EB E9			     jmp     short @46@86
   5956	1929			     @46@142:
   5957					;
   5958					;    }
   5959					;
   5960	1929  5D			     pop     bp
   5961	192A  C3			     ret
   5962	192B			     _cmd_tcons	     endp
   5963	192B			     _TEXT   ends
   5964	0014			     _BSS    segment word public 'BSS'
   5965	0014			     _semid  label   word
   5966	0014  02*(??)			     db	     2 dup (?)
   5967	0016			     cheio   label   word
   5968	0016  02*(??)			     db	     2 dup (?)
   5969	0018			     vazio   label   word
   5970	0018  02*(??)			     db	     2 dup (?)
   5971	001A			     mutex   label   word
   5972	001A  02*(??)			     db	     2 dup (?)
   5973	001C			     tempoDeConsumo  label   word
   5974	001C  02*(??)			     db	     2 dup (?)
   5975	001E			     tempoDeProducao label   word
   5976	001E  02*(??)			     db	     2 dup (?)
   5977	0020			     buffer  label   word
   5978	0020  28*(??)			     db	     40	dup (?)
   5979	0048			     var     label   word
   5980	0048  01F4*(??)			     db	     500 dup (?)
   5981	023C			     history_pos     label   word
   5982	023C  02*(??)			     db	     2 dup (?)
   5983	023E			     history_nxt     label   word
   5984	023E  02*(??)			     db	     2 dup (?)
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 106
command.ASM



   5985	0240			     history_ini     label   word
   5986	0240  02*(??)			     db	     2 dup (?)
   5987	0242			     history_len     label   word
   5988	0242  02*(??)			     db	     2 dup (?)
   5989	0244			     history label   byte
   5990	0244  0136*(??)			     db	     310 dup (?)
   5991	037A			     argv    label   dword
   5992	037A  40*(??)			     db	     64	dup (?)
   5993	03BA			     argline label   byte
   5994	03BA  025F*(??)			     db	     607 dup (?)
   5995	0619			     palavra label   byte
   5996	0619  1F*(??)			     db	     31	dup (?)
   5997	0638			     cmdline label   byte
   5998	0638  1F*(??)			     db	     31	dup (?)
   5999	0657			     end_command     label   word
   6000	0657  02*(??)			     db	     2 dup (?)
   6001					     ?debug  C E9
   6002					     ?debug  C FA00000000
   6003	0659			     _BSS    ends
   6004	00B4			     _DATA   segment word public 'DATA'
   6005	00B4			     s@	     label   byte
   6006	00B4  3F			     db	     '?'
   6007	00B5  00			     db	     0
   6008	00B6  20 20 20 20 20 20	20+	     db	     '			 exibe estas informacoes'
   6009	      20 20 20 20 20 20	20+
   6010	      20 20 20 20 20 65	78+
   6011	      69 62 65 20 65 73	74+
   6012	      61 73 20 69 6E 66	6F+
   6013	      72 6D 61 63 6F 65	73
   6014	00E0  00			     db	     0
   6015	00E1  68 65 6C 70		     db	     'help'
   6016	00E5  00			     db	     0
   6017	00E6  20 20 20 20 20 20	20+	     db	     '		      exibe estas informacoes'
   6018	      20 20 20 20 20 20	20+
   6019	      20 20 65 78 69 62	65+
   6020	      20 65 73 74 61 73	20+
   6021	      69 6E 66 6F 72 6D	61+
   6022	      63 6F 65 73
   6023	010D  00			     db	     0
   6024	010E  76 65 72			     db	     'ver'
   6025	0111  00			     db	     0
   6026	0112  20 20 20 20 20 20	20+	     db	     '		       mostra a	versao do MSO'
   6027	      20 20 20 20 20 20	20+
   6028	      20 20 20 6D 6F 73	74+
   6029	      72 61 20 61 20 76	65+
   6030	      72 73 61 6F 20 64	6F+
   6031	      20 4D 53 4F
   6032	0139  00			     db	     0
   6033	013A  64 61 74 65		     db	     'date'
   6034	013E  00			     db	     0
   6035	013F  20 20 20 20 20 20	20+	     db	     '		      mostra a data'
   6036	      20 20 20 20 20 20	20+
   6037	      20 20 6D 6F 73 74	72+
   6038	      61 20 61 20 64 61	74+
   6039	      61
   6040	015C  00			     db	     0
   6041	015D  74 69 6D 65		     db	     'time'
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 107
command.ASM



   6042	0161  00			     db	     0
   6043	0162  20 20 20 20 20 20	20+	     db	     '		      mostra a hora'
   6044	      20 20 20 20 20 20	20+
   6045	      20 20 6D 6F 73 74	72+
   6046	      61 20 61 20 68 6F	72+
   6047	      61
   6048	017F  00			     db	     0
   6049	0180  63 6C 73			     db	     'cls'
   6050	0183  00			     db	     0
   6051	0184  20 20 20 20 20 20	20+	     db	     '		       limpa a tela'
   6052	      20 20 20 20 20 20	20+
   6053	      20 20 20 6C 69 6D	70+
   6054	      61 20 61 20 74 65	6C+
   6055	      61
   6056	01A1  00			     db	     0
   6057	01A2  63 6C 65 61 72		     db	     'clear'
   6058	01A7  00			     db	     0
   6059	01A8  20 20 20 20 20 20	20+	     db	     '		     limpa a tela'
   6060	      20 20 20 20 20 20	20+
   6061	      20 6C 69 6D 70 61	20+
   6062	      61 20 74 65 6C 61
   6063	01C3  00			     db	     0
   6064	01C4  72 65 62 6F 6F 74		     db	     'reboot'
   6065	01CA  00			     db	     0
   6066	01CB  20 20 20 20 20 20	20+	     db	     '		    reinicializa o sistema'
   6067	      20 20 20 20 20 20	20+
   6068	      72 65 69 6E 69 63	69+
   6069	      61 6C 69 7A 61 20	6F+
   6070	      20 73 69 73 74 65	6D+
   6071	      61
   6072	01EF  00			     db	     0
   6073	01F0  65 78 69 74		     db	     'exit'
   6074	01F4  00			     db	     0
   6075	01F5  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   6076	      20 20 20 20 20 20	20+
   6077	      20 20 61 62 61 6E	64+
   6078	      6F 6E 61 20 6F 20	73+
   6079	      69 73 74 65 6D 61
   6080	0217  00			     db	     0
   6081	0218  71 75 69 74		     db	     'quit'
   6082	021C  00			     db	     0
   6083	021D  20 20 20 20 20 20	20+	     db	     '		      abandona o sistema'
   6084	      20 20 20 20 20 20	20+
   6085	      20 20 61 62 61 6E	64+
   6086	      6F 6E 61 20 6F 20	73+
   6087	      69 73 74 65 6D 61
   6088	023F  00			     db	     0
   6089	0240  70 73			     db	     'ps'
   6090	0242  00			     db	     0
   6091	0243  20 20 20 20 20 20	20+	     db	     '			exibe processos/threads	em execucao'
   6092	      20 20 20 20 20 20	20+
   6093	      20 20 20 20 65 78	69+
   6094	      62 65 20 70 72 6F	63+
   6095	      65 73 73 6F 73 2F	74+
   6096	      68 72 65 61 64 73	20+
   6097	      65 6D 20 65 78 65	63+
   6098	      75 63 61 6F
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 108
command.ASM



   6099	0278  00			     db	     0
   6100	0279  6B 69 6C 6C		     db	     'kill'
   6101	027D  00			     db	     0
   6102	027E  20 3C 70 69 64 3E	20+	     db	     ' <pid>	      encerra um processo/thread'
   6103	      20 20 20 20 20 20	20+
   6104	      20 20 65 6E 63 65	72+
   6105	      72 61 20 75 6D 20	70+
   6106	      72 6F 63 65 73 73	6F+
   6107	      2F 74 68 72 65 61	64
   6108	02A8  00			     db	     0
   6109	02A9  64 65 6D 6F		     db	     'demo'
   6110	02AD  00			     db	     0
   6111	02AE  20 3C 65 78 69 74	63+	     db	     ' <exitcode>     inicia processos/threads de demonstracao'
   6112	      6F 64 65 3E 20 20	20+
   6113	      20 20 69 6E 69 63	69+
   6114	      61 20 70 72 6F 63	65+
   6115	      73 73 6F 73 2F 74	68+
   6116	      72 65 61 64 73 20	64+
   6117	      65 20 64 65 6D 6F	6E+
   6118	      73 74 72 61 63 61	6F
   6119	02E6  00			     db	     0
   6120	02E7  73 65 74			     db	     'set'
   6121	02EA  00			     db	     0
   6122	02EB  20 5B 3C 76 61 72	3E+	     db	     ' [<var> [<val>]] define o	valor da variavel ou exibe variavei'
   6123	      20 5B 3C 76 61 6C	3E+
   6124	      5D 5D 20 64 65 66	69+
   6125	      6E 65 20 6F 20 76	61+
   6126	      6C 6F 72 20 64 61	20+
   6127	      76 61 72 69 61 76	65+
   6128	      6C 20 6F 75 20 65	78+
   6129	      69 62 65 20 76 61	72+
   6130	      69 61 76 65 69
   6131	0328  73			     db	     's'
   6132	0329  00			     db	     0
   6133	032A  75 6E 73 65 74		     db	     'unset'
   6134	032F  00			     db	     0
   6135	0330  20 3C 76 61 72 3E	20+	     db	     ' <var>	     apaga a variavel'
   6136	      20 20 20 20 20 20	20+
   6137	      20 61 70 61 67 61	20+
   6138	      61 20 76 61 72 69	61+
   6139	      76 65 6C
   6140	034F  00			     db	     0
   6141	0350  65 63 68 6F		     db	     'echo'
   6142	0354  00			     db	     0
   6143	0355  20 5B 2D 6E 5D 20	3C+	     db	     ' [-n] <args>... imprime argumentos'
   6144	      61 72 67 73 3E 2E	2E+
   6145	      2E 20 69 6D 70 72	69+
   6146	      6D 65 20 61 72 67	75+
   6147	      6D 65 6E 74 6F 73
   6148	0377  00			     db	     0
   6149	0378  77 61 69 74 70 69	64	     db	     'waitpid'
   6150	037F  00			     db	     0
   6151	0380  20 3C 70 69 64 3E	20+	     db	     ' <pid>	   espera pelo processo-filho indicado'
   6152	      20 20 20 20 20 20	65+
   6153	      73 70 65 72 61 20	70+
   6154	      65 6C 6F 20 70 72	6F+
   6155	      63 65 73 73 6F 2D	66+
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 109
command.ASM



   6156	      69 6C 68 6F 20 69	6E+
   6157	      64 69 63 61 64 6F
   6158	03B0  00			     db	     0
   6159	03B1  77 61 69 74		     db	     'wait'
   6160	03B5  00			     db	     0
   6161	03B6  20 20 20 20 20 20	20+	     db	     '		      espera por um processo-filho'
   6162	      20 20 20 20 20 20	20+
   6163	      20 20 65 73 70 65	72+
   6164	      61 20 70 6F 72 20	75+
   6165	      6D 20 70 72 6F 63	65+
   6166	      73 73 6F 2D 66 69	6C+
   6167	      68 6F
   6168	03E2  00			     db	     0
   6169	03E3  73 65 6D 6C 73		     db	     'semls'
   6170	03E8  00			     db	     0
   6171	03E9  20 20 20 20 20 20	20+	     db	     '		     lista tabela de semaforos'
   6172	      20 20 20 20 20 20	20+
   6173	      20 6C 69 73 74 61	20+
   6174	      74 61 62 65 6C 61	20+
   6175	      64 65 20 73 65 6D	61+
   6176	      66 6F 72 6F 73
   6177	0411  00			     db	     0
   6178	0412  73 65 6D 63 72 65	61+	     db	     'semcreate'
   6179	      74 65
   6180	041B  00			     db	     0
   6181	041C  20 3C 76 61 6C 75	65+	     db	     ' <value>	 cria um semaforo'
   6182	      3E 20 20 20 63 72	69+
   6183	      61 20 75 6D 20 73	65+
   6184	      6D 61 66 6F 72 6F
   6185	0437  00			     db	     0
   6186	0438  73 65 6D 74 65 73	74	     db	     'semtest'
   6187	043F  00			     db	     0
   6188	0440  20 3C 73 65 6D 69	64+	     db	     ' <semid>	   aplicacao para teste	de semaforos'
   6189	      3E 20 20 20 20 20	61+
   6190	      70 6C 69 63 61 63	61+
   6191	      6F 20 70 61 72 61	20+
   6192	      74 65 73 74 65 20	64+
   6193	      65 20 73 65 6D 61	66+
   6194	      6F 72 6F 73
   6195	046E  00			     db	     0
   6196	046F  73 65 6D 75 70		     db	     'semup'
   6197	0474  00			     db	     0
   6198	0475  20 3C 73 65 6D 69	64+	     db	     ' <semid>	     incrementa	o valor	de um semaforo'
   6199	      3E 20 20 20 20 20	20+
   6200	      20 69 6E 63 72 65	6D+
   6201	      65 6E 74 61 20 6F	20+
   6202	      76 61 6C 6F 72 20	64+
   6203	      65 20 75 6D 20 73	65+
   6204	      6D 61 66 6F 72 6F
   6205	04A5  00			     db	     0
   6206	04A6  73 65 6D 64 65 73	74+	     db	     'semdestroy'
   6207	      72 6F 79
   6208	04B0  00			     db	     0
   6209	04B1  20 3C 73 65 6D 69	64+	     db	     ' <semid>	destroi	um semaforo'
   6210	      3E 20 20 64 65 73	74+
   6211	      72 6F 69 20 75 6D	20+
   6212	      73 65 6D 61 66 6F	72+
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 110
command.ASM



   6213	      6F
   6214	04CE  00			     db	     0
   6215	04CF  73 74 6F 70		     db	     'stop'
   6216	04D3  00			     db	     0
   6217	04D4  20 3C 70 69 64 3E	20+	     db	     ' <pid> suspende um processo/thread'
   6218	      73 75 73 70 65 6E	64+
   6219	      65 20 75 6D 20 70	72+
   6220	      6F 63 65 73 73 6F	2F+
   6221	      74 68 72 65 61 64
   6222	04F6  00			     db	     0
   6223	04F7  72 65 73 75 6D 65		     db	     'resume'
   6224	04FD  00			     db	     0
   6225	04FE  20 3C 70 69 64 3E	20+	     db	     ' <pid> reinicia um processo/thread'
   6226	      72 65 69 6E 69 63	69+
   6227	      61 20 75 6D 20 70	72+
   6228	      6F 63 65 73 73 6F	2F+
   6229	      74 68 72 65 61 64
   6230	0520  00			     db	     0
   6231	0521  70 72 6F 64 63 6F	6E+	     db	     'prodcons'
   6232	      73
   6233	0529  00			     db	     0
   6234	052A  20 69 6E 69 63 69	61+	     db	     ' inicia o	processo consumidor e produtor'
   6235	      20 6F 20 70 72 6F	63+
   6236	      65 73 73 6F 20 63	6F+
   6237	      6E 73 75 6D 69 64	6F+
   6238	      72 20 65 20 70 72	6F+
   6239	      64 75 74 6F 72
   6240	0552  00			     db	     0
   6241	0553  74 70 72 6F 64		     db	     'tprod'
   6242	0558  00			     db	     0
   6243	0559  20 20 69 6E 69 63	69+	     db	     '	inicia produtor'
   6244	      61 20 70 72 6F 64	75+
   6245	      74 6F 72
   6246	056A  00			     db	     0
   6247	056B  74 63 6F 6E 73		     db	     'tcons'
   6248	0570  00			     db	     0
   6249	0571  20 20 69 6E 69 63	69+	     db	     '	inicia consumidor'
   6250	      61 20 63 6F 6E 73	75+
   6251	      6D 69 64 6F 72
   6252	0584  00			     db	     0
   6253	0585  20 20 20 20 20 20	20+	     db	     '			'
   6254	      20 20 20 20 20 20	20+
   6255	      20 20 20 20
   6256	0597  DC			     db	     -36
   6257	0598  DC			     db	     -36
   6258	0599  DC			     db	     -36
   6259	059A  DC			     db	     -36
   6260	059B  DC			     db	     -36
   6261	059C  DC			     db	     -36
   6262	059D  DC			     db	     -36
   6263	059E  20 20			     db	     '	'
   6264	05A0  DC			     db	     -36
   6265	05A1  DC			     db	     -36
   6266	05A2  DC			     db	     -36
   6267	05A3  DC			     db	     -36
   6268	05A4  DC			     db	     -36
   6269	05A5  DC			     db	     -36
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 111
command.ASM



   6270	05A6  0A			     db	     10
   6271	05A7  00			     db	     0
   6272	05A8  20			     db	     ' '
   6273	05A9  DC			     db	     -36
   6274	05AA  DC			     db	     -36
   6275	05AB  DC			     db	     -36
   6276	05AC  DC			     db	     -36
   6277	05AD  DC			     db	     -36
   6278	05AE  20 20			     db	     '	'
   6279	05B0  DC			     db	     -36
   6280	05B1  20 20			     db	     '	'
   6281	05B3  DC			     db	     -36
   6282	05B4  DC			     db	     -36
   6283	05B5  DC			     db	     -36
   6284	05B6  20 20			     db	     '	'
   6285	05B8  DC			     db	     -36
   6286	05B9  20			     db	     ' '
   6287	05BA  DB			     db	     -37
   6288	05BB  DB			     db	     -37
   6289	05BC  20 20 20			     db	     '	 '
   6290	05BF  DF			     db	     -33
   6291	05C0  DF			     db	     -33
   6292	05C1  20 20			     db	     '	'
   6293	05C3  DB			     db	     -37
   6294	05C4  DB			     db	     -37
   6295	05C5  20 20			     db	     '	'
   6296	05C7  DB			     db	     -37
   6297	05C8  DB			     db	     -37
   6298	05C9  20 20			     db	     '	'
   6299	05CB  00			     db	     0
   6300	05CC  4D 69 6E 69 73 53	69+	     db	     'MinisSistema Operacional'
   6301	      73 74 65 6D 61 20	4F+
   6302	      70 65 72 61 63 69	6F+
   6303	      6E 61 6C
   6304	05E4  0A			     db	     10
   6305	05E5  00			     db	     0
   6306	05E6  DC			     db	     -36
   6307	05E7  DB			     db	     -37
   6308	05E8  20			     db	     ' '
   6309	05E9  DB			     db	     -37
   6310	05EA  20			     db	     ' '
   6311	05EB  DB			     db	     -37
   6312	05EC  20			     db	     ' '
   6313	05ED  DC			     db	     -36
   6314	05EE  DB			     db	     -37
   6315	05EF  20			     db	     ' '
   6316	05F0  DC			     db	     -36
   6317	05F1  DB			     db	     -37
   6318	05F2  20			     db	     ' '
   6319	05F3  DB			     db	     -37
   6320	05F4  20			     db	     ' '
   6321	05F5  DC			     db	     -36
   6322	05F6  DB			     db	     -37
   6323	05F7  20			     db	     ' '
   6324	05F8  DF			     db	     -33
   6325	05F9  DF			     db	     -33
   6326	05FA  DF			     db	     -33
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 112
command.ASM



   6327	05FB  DF			     db	     -33
   6328	05FC  DB			     db	     -37
   6329	05FD  DB			     db	     -37
   6330	05FE  DB			     db	     -37
   6331	05FF  20			     db	     ' '
   6332	0600  DB			     db	     -37
   6333	0601  DB			     db	     -37
   6334	0602  DB			     db	     -37
   6335	0603  20 20			     db	     '	'
   6336	0605  DB			     db	     -37
   6337	0606  DB			     db	     -37
   6338	0607  20 20			     db	     '	'
   6339	0609  00			     db	     0
   6340	060A  56 73 20			     db	     'Vs '
   6341	060D  00			     db	     0
   6342	060E  32 30 31 37		     db	     '2017'
   6343	0612  00			     db	     0
   6344	0613  0A			     db	     10
   6345	0614  00			     db	     0
   6346	0615  DB			     db	     -37
   6347	0616  DB			     db	     -37
   6348	0617  20			     db	     ' '
   6349	0618  DB			     db	     -37
   6350	0619  20			     db	     ' '
   6351	061A  DB			     db	     -37
   6352	061B  20			     db	     ' '
   6353	061C  DB			     db	     -37
   6354	061D  DB			     db	     -37
   6355	061E  20			     db	     ' '
   6356	061F  DB			     db	     -37
   6357	0620  DB			     db	     -37
   6358	0621  20			     db	     ' '
   6359	0622  DB			     db	     -37
   6360	0623  20			     db	     ' '
   6361	0624  DB			     db	     -37
   6362	0625  DB			     db	     -37
   6363	0626  20			     db	     ' '
   6364	0627  DB			     db	     -37
   6365	0628  DB			     db	     -37
   6366	0629  DC			     db	     -36
   6367	062A  DC			     db	     -36
   6368	062B  DB			     db	     -37
   6369	062C  DB			     db	     -37
   6370	062D  DB			     db	     -37
   6371	062E  20			     db	     ' '
   6372	062F  DB			     db	     -37
   6373	0630  DB			     db	     -37
   6374	0631  DB			     db	     -37
   6375	0632  DC			     db	     -36
   6376	0633  DC			     db	     -36
   6377	0634  DB			     db	     -37
   6378	0635  DB			     db	     -37
   6379	0636  20 20			     db	     '	'
   6380	0638  00			     db	     0
   6381	0639  70 6F 72 20 52 6F	6C+	     db	     'por Roland Teodorowitsch'
   6382	      61 6E 64 20 54 65	6F+
   6383	      64 6F 72 6F 77 69	74+
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 113
command.ASM



   6384	      73 63 68
   6385	0651  0A			     db	     10
   6386	0652  00			     db	     0
   6387	0653  DB			     db	     -37
   6388	0654  DB			     db	     -37
   6389	0655  20			     db	     ' '
   6390	0656  DB			     db	     -37
   6391	0657  20			     db	     ' '
   6392	0658  DB			     db	     -37
   6393	0659  20			     db	     ' '
   6394	065A  DB			     db	     -37
   6395	065B  DB			     db	     -37
   6396	065C  20			     db	     ' '
   6397	065D  DB			     db	     -37
   6398	065E  DB			     db	     -37
   6399	065F  20			     db	     ' '
   6400	0660  DB			     db	     -37
   6401	0661  20			     db	     ' '
   6402	0662  DB			     db	     -37
   6403	0663  DB			     db	     -37
   6404	0664  20			     db	     ' '
   6405	0665  DB			     db	     -37
   6406	0666  DB			     db	     -37
   6407	0667  DC			     db	     -36
   6408	0668  DC			     db	     -36
   6409	0669  DB			     db	     -37
   6410	066A  DB			     db	     -37
   6411	066B  DB			     db	     -37
   6412	066C  20			     db	     ' '
   6413	066D  DB			     db	     -37
   6414	066E  DB			     db	     -37
   6415	066F  DB			     db	     -37
   6416	0670  DC			     db	     -36
   6417	0671  DC			     db	     -36
   6418	0672  DB			     db	     -37
   6419	0673  DB			     db	     -37
   6420	0674  20 20			     db	     '	'
   6421	0676  00			     db	     0
   6422	0677  61 6C 74 65 72 61	63+	     db	     'alteracoes por Jean Bauer'
   6423	      6F 65 73 20 70 6F	72+
   6424	      20 4A 65 61 6E 20	42+
   6425	      61 75 65 72
   6426	0690  0A			     db	     10
   6427	0691  00			     db	     0
   6428	0692  0A			     db	     10
   6429	0693  44 69 67 69 74 65	20	     db	     'Digite '
   6430	069A  27			     db	     39
   6431	069B  68 65 6C 70		     db	     'help'
   6432	069F  27			     db	     39
   6433	06A0  20 6F 75 20		     db	     ' ou '
   6434	06A4  27			     db	     39
   6435	06A5  3F			     db	     '?'
   6436	06A6  27			     db	     39
   6437	06A7  20 70 61 72 61 20	61+	     db	     ' para ajuda...'
   6438	      6A 75 64 61 2E 2E	2E
   6439	06B5  0A			     db	     10
   6440	06B6  0A			     db	     10
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 114
command.ASM



   6441	06B7  00			     db	     0
   6442	06B8  0A			     db	     10
   6443	06B9  4D 6F 64 69 66 69	63+	     db	     'Modificado em 25/10/2017'
   6444	      61 64 6F 20 65 6D	20+
   6445	      32 35 2F 31 30 2F	32+
   6446	      30 31 37
   6447	06D1  0A			     db	     10
   6448	06D2  0A			     db	     10
   6449	06D3  00			     db	     0
   6450	06D4  0A			     db	     10
   6451	06D5  50 6F 72 20 4A 65	61+	     db	     'Por Jean... testando output'
   6452	      6E 2E 2E 2E 20 74	65+
   6453	      73 74 61 6E 64 6F	20+
   6454	      6F 75 74 70 75 74
   6455	06F0  0A			     db	     10
   6456	06F1  0A			     db	     10
   6457	06F2  00			     db	     0
   6458	06F3  50 52 4F 4D 50 54		     db	     'PROMPT'
   6459	06F9  00			     db	     0
   6460	06FA  6D 69 6E 69 53 4F	3E	     db	     'miniSO>'
   6461	0701  00			     db	     0
   6462	0702  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   6463	      56 45 4C
   6464	070C  00			     db	     0
   6465	070D  30			     db	     '0'
   6466	070E  00			     db	     0
   6467	070F  45 52 52 4F 52 4C	45+	     db	     'ERRORLEVEL'
   6468	      56 45 4C
   6469	0719  00			     db	     0
   6470	071A  45 72 72 6F 3A 20	63+	     db	     'Erro: comando desconhecido!'
   6471	      6F 6D 61 6E 64 6F	20+
   6472	      64 65 73 63 6F 6E	68+
   6473	      65 63 69 64 6F 21
   6474	0735  0A			     db	     10
   6475	0736  00			     db	     0
   6476	0737  50 52 4F 4D 50 54		     db	     'PROMPT'
   6477	073D  00			     db	     0
   6478	073E  43 6F 6D 61 6E 64	6F+	     db	     'Comandos do minisSistema Operacional:'
   6479	      73 20 64 6F 20 6D	69+
   6480	      6E 69 73 53 69 73	74+
   6481	      65 6D 61 20 4F 70	65+
   6482	      72 61 63 69 6F 6E	61+
   6483	      6C 3A
   6484	0763  0A			     db	     10
   6485	0764  00			     db	     0
   6486	0765  6D 69 6E 69 73 53	69+	     db	     'minisSistema Operacional - Vs '
   6487	      73 74 65 6D 61 20	4F+
   6488	      70 65 72 61 63 69	6F+
   6489	      6E 61 6C 20 2D 20	56+
   6490	      73 20
   6491	0783  00			     db	     0
   6492	0784  32 30 31 37		     db	     '2017'
   6493	0788  00			     db	     0
   6494	0789  20 42 43 50 20 20	20+	     db	     ' BCP   PID   PPID	 STATUS	  WAIT	 ZLIST	PREV   NEXT'
   6495	      50 49 44 20 20 20	50+
   6496	      50 49 44 20 20 53	54+
   6497	      41 54 55 53 20 20	20+
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 115
command.ASM



   6498	      57 41 49 54 20 20	20+
   6499	      5A 4C 49 53 54 20	20+
   6500	      50 52 45 56 20 20	20+
   6501	      4E 45 58 54
   6502	07BE  0A			     db	     10
   6503	07BF  00			     db	     0
   6504	07C0  20 20			     db	     '	'
   6505	07C2  00			     db	     0
   6506	07C3  20 20			     db	     '	'
   6507	07C5  00			     db	     0
   6508	07C6  20 20			     db	     '	'
   6509	07C8  00			     db	     0
   6510	07C9  46 52 45 45 20 20	20	     db	     'FREE   '
   6511	07D0  00			     db	     0
   6512	07D1  52 45 41 44 59 20	20	     db	     'READY  '
   6513	07D8  00			     db	     0
   6514	07D9  52 55 4E 4E 49 4E	47	     db	     'RUNNING'
   6515	07E0  00			     db	     0
   6516	07E1  5A 4F 4D 42 49 45	20	     db	     'ZOMBIE '
   6517	07E8  00			     db	     0
   6518	07E9  57 41 49 54 20 20	20	     db	     'WAIT   '
   6519	07F0  00			     db	     0
   6520	07F1  57 41 49 54 53 49	47	     db	     'WAITSIG'
   6521	07F8  00			     db	     0
   6522	07F9  57 41 49 54 53 45	4D	     db	     'WAITSEM'
   6523	0800  00			     db	     0
   6524	0801  53 54 4F 50 50 45	44	     db	     'STOPPED'
   6525	0808  00			     db	     0
   6526	0809  20 20			     db	     '	'
   6527	080B  00			     db	     0
   6528	080C  20 20			     db	     '	'
   6529	080E  00			     db	     0
   6530	080F  20			     db	     ' '
   6531	0810  00			     db	     0
   6532	0811  20 20			     db	     '	'
   6533	0813  00			     db	     0
   6534	0814  45 72 72 6F 20 65	6D+	     db	     'Erro em kill: parametro nao fornecido!'
   6535	      20 6B 69 6C 6C 3A	20+
   6536	      70 61 72 61 6D 65	74+
   6537	      72 6F 20 6E 61 6F	20+
   6538	      66 6F 72 6E 65 63	69+
   6539	      64 6F 21
   6540	083A  0A			     db	     10
   6541	083B  00			     db	     0
   6542	083C  6B 69 6C 6C 3A 20	69+	     db	     'kill: impossivel matar o processo/thread'
   6543	      6D 70 6F 73 73 69	76+
   6544	      65 6C 20 6D 61 74	61+
   6545	      72 20 6F 20 70 72	6F+
   6546	      63 65 73 73 6F 2F	74+
   6547	      68 72 65 61 64
   6548	0864  0A			     db	     10
   6549	0865  00			     db	     0
   6550	0866  00			     db	     0
   6551	0867  45 72 72 6F 20 65	6D+	     db	     'Erro em set: nao ha espaco para novas variaveis!'
   6552	      20 73 65 74 3A 20	6E+
   6553	      61 6F 20 68 61 20	65+
   6554	      73 70 61 63 6F 20	70+
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 116
command.ASM



   6555	      61 72 61 20 6E 6F	76+
   6556	      61 73 20 76 61 72	69+
   6557	      61 76 65 69 73 21
   6558	0897  0A			     db	     10
   6559	0898  00			     db	     0
   6560	0899  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	nome da	variavel e muito grande!'
   6561	      20 73 65 74 3A 20	6F+
   6562	      20 74 61 6D 61 6E	68+
   6563	      6F 20 64 6F 20 6E	6F+
   6564	      6D 65 20 64 61 20	76+
   6565	      61 72 69 61 76 65	6C+
   6566	      20 65 20 6D 75 69	74+
   6567	      6F 20 67 72 61 6E	64+
   6568	      65 21
   6569	08D3  0A			     db	     10
   6570	08D4  00			     db	     0
   6571	08D5  45 72 72 6F 20 65	6D+	     db	     'Erro em set: o tamanho do	conteudo da variavel e muito grande'
   6572	      20 73 65 74 3A 20	6F+
   6573	      20 74 61 6D 61 6E	68+
   6574	      6F 20 64 6F 20 63	6F+
   6575	      6E 74 65 75 64 6F	20+
   6576	      64 61 20 76 61 72	69+
   6577	      61 76 65 6C 20 65	20+
   6578	      6D 75 69 74 6F 20	67+
   6579	      72 61 6E 64 65
   6580	0912  21			     db	     '!'
   6581	0913  0A			     db	     10
   6582	0914  00			     db	     0
   6583	0915  45 72 72 6F 20 65	6D+	     db	     'Erro em set: argumentos demais na	linha de comando!'
   6584	      20 73 65 74 3A 20	61+
   6585	      72 67 75 6D 65 6E	74+
   6586	      6F 73 20 64 65 6D	61+
   6587	      69 73 20 6E 61 20	6C+
   6588	      69 6E 68 61 20 64	65+
   6589	      20 63 6F 6D 61 6E	64+
   6590	      6F 21
   6591	0948  0A			     db	     10
   6592	0949  00			     db	     0
   6593	094A  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: numero invalido de	argumentos!'
   6594	      20 75 6E 73 65 74	3A+
   6595	      20 6E 75 6D 65 72	6F+
   6596	      20 69 6E 76 61 6C	69+
   6597	      64 6F 20 64 65 20	61+
   6598	      72 67 75 6D 65 6E	74+
   6599	      6F 73 21
   6600	0977  0A			     db	     10
   6601	0978  00			     db	     0
   6602	0979  45 72 72 6F 20 65	6D+	     db	     'Erro em unset: variavel inexistente!'
   6603	      20 75 6E 73 65 74	3A+
   6604	      20 76 61 72 69 61	76+
   6605	      65 6C 20 69 6E 65	78+
   6606	      69 73 74 65 6E 74	65+
   6607	      21
   6608	099D  0A			     db	     10
   6609	099E  00			     db	     0
   6610	099F  2D 6E			     db	     '-n'
   6611	09A1  00			     db	     0
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 117
command.ASM



   6612	09A2  DA			     db	     -38
   6613	09A3  C4			     db	     -60
   6614	09A4  C4			     db	     -60
   6615	09A5  20 54 68 72 65 61	64+	     db	     ' Thread '
   6616	      20
   6617	09AD  C4			     db	     -60
   6618	09AE  C4			     db	     -60
   6619	09AF  C4			     db	     -60
   6620	09B0  C4			     db	     -60
   6621	09B1  BF			     db	     -65
   6622	09B2  00			     db	     0
   6623	09B3  B3			     db	     -77
   6624	09B4  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   6625	      20 20 20 20 20 20	20
   6626	09C2  B3			     db	     -77
   6627	09C3  00			     db	     0
   6628	09C4  B3			     db	     -77
   6629	09C5  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   6630	      61 6F 3A 20 20 20	20
   6631	09D3  B3			     db	     -77
   6632	09D4  00			     db	     0
   6633	09D5  B3			     db	     -77
   6634	09D6  20 20 20 20 20 20	20+	     db	     '		    '
   6635	      20 20 20 20 20 20	20
   6636	09E4  B3			     db	     -77
   6637	09E5  00			     db	     0
   6638	09E6  C0			     db	     -64
   6639	09E7  C4			     db	     -60
   6640	09E8  C4			     db	     -60
   6641	09E9  C4			     db	     -60
   6642	09EA  C4			     db	     -60
   6643	09EB  C4			     db	     -60
   6644	09EC  C4			     db	     -60
   6645	09ED  C4			     db	     -60
   6646	09EE  C4			     db	     -60
   6647	09EF  C4			     db	     -60
   6648	09F0  C4			     db	     -60
   6649	09F1  C4			     db	     -60
   6650	09F2  C4			     db	     -60
   6651	09F3  C4			     db	     -60
   6652	09F4  C4			     db	     -60
   6653	09F5  D9			     db	     -39
   6654	09F6  00			     db	     0
   6655	09F7  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: numero invalido de argumentos!'
   6656	      20 64 65 6D 6F 3A	20+
   6657	      6E 75 6D 65 72 6F	20+
   6658	      69 6E 76 61 6C 69	64+
   6659	      6F 20 64 65 20 61	72+
   6660	      67 75 6D 65 6E 74	6F+
   6661	      73 21
   6662	0A23  0A			     db	     10
   6663	0A24  00			     db	     0
   6664	0A25  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   6665	      20 64 65 6D 6F 3A	20+
   6666	      66 6F 72 6B 28 29	20+
   6667	      6E 61 6F 20 63 6F	6E+
   6668	      73 65 67 75 69 75	20+
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 118
command.ASM



   6669	      63 72 69 61 72 20	74+
   6670	      68 72 65 61 64 21
   6671	0A55  0A			     db	     10
   6672	0A56  00			     db	     0
   6673	0A57  45 72 72 6F 20 65	6D+	     db	     'Erro em waitpid: numero invalido de argumentos!'
   6674	      20 77 61 69 74 70	69+
   6675	      64 3A 20 6E 75 6D	65+
   6676	      72 6F 20 69 6E 76	61+
   6677	      6C 69 64 6F 20 64	65+
   6678	      20 61 72 67 75 6D	65+
   6679	      6E 74 6F 73 21
   6680	0A86  0A			     db	     10
   6681	0A87  00			     db	     0
   6682	0A88  50 72 6F 63 65 73	73+	     db	     'Processo '
   6683	      6F 20
   6684	0A91  00			     db	     0
   6685	0A92  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   6686	      61 64 6F 20 63 6F	6D+
   6687	      20 63 6F 64 69 67	6F+
   6688	      20 64 65 20 66 69	6D+
   6689	      20
   6690	0AAF  00			     db	     0
   6691	0AB0  21			     db	     '!'
   6692	0AB1  0A			     db	     10
   6693	0AB2  00			     db	     0
   6694	0AB3  50 72 6F 63 65 73	73+	     db	     'Processo '
   6695	      6F 20
   6696	0ABC  00			     db	     0
   6697	0ABD  20 65 6E 63 65 72	72+	     db	     ' encerrado com codigo de fim '
   6698	      61 64 6F 20 63 6F	6D+
   6699	      20 63 6F 64 69 67	6F+
   6700	      20 64 65 20 66 69	6D+
   6701	      20
   6702	0ADA  00			     db	     0
   6703	0ADB  21			     db	     '!'
   6704	0ADC  0A			     db	     10
   6705	0ADD  00			     db	     0
   6706	0ADE  53 65 6D 61 70 68	6F+	     db	     'Semaphores:'
   6707	      72 65 73 3A
   6708	0AE9  0A			     db	     10
   6709	0AEA  00			     db	     0
   6710	0AEB  2D 20 69 64 3D		     db	     '-	id='
   6711	0AF0  00			     db	     0
   6712	0AF1  20 76 61 6C 75 65	3D	     db	     ' value='
   6713	0AF8  00			     db	     0
   6714	0AF9  20 71 75 65 75 65	3D	     db	     ' queue='
   6715	0B00  00			     db	     0
   6716	0B01  54 4F 54 41 4C 3D		     db	     'TOTAL='
   6717	0B07  00			     db	     0
   6718	0B08  0A			     db	     10
   6719	0B09  0A			     db	     10
   6720	0B0A  00			     db	     0
   6721	0B0B  45 72 72 6F 20 65	6D+	     db	     'Erro em semcreate: numero	invalido de argumentos!'
   6722	      20 73 65 6D 63 72	65+
   6723	      61 74 65 3A 20 6E	75+
   6724	      6D 65 72 6F 20 69	6E+
   6725	      76 61 6C 69 64 6F	20+
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 119
command.ASM



   6726	      64 65 20 61 72 67	75+
   6727	      6D 65 6E 74 6F 73	21
   6728	0B3C  0A			     db	     10
   6729	0B3D  00			     db	     0
   6730	0B3E  53 65 6D 61 66 6F	72+	     db	     'Semaforo id='
   6731	      6F 20 69 64 3D
   6732	0B4A  00			     db	     0
   6733	0B4B  20 63 72 69 61 64	6F+	     db	     ' criado (value='
   6734	      20 28 76 61 6C 75	65+
   6735	      3D
   6736	0B5A  00			     db	     0
   6737	0B5B  29			     db	     ')'
   6738	0B5C  0A			     db	     10
   6739	0B5D  00			     db	     0
   6740	0B5E  DA			     db	     -38
   6741	0B5F  C4			     db	     -60
   6742	0B60  C4			     db	     -60
   6743	0B61  20 54 68 72 65 61	64+	     db	     ' Thread '
   6744	      20
   6745	0B69  C4			     db	     -60
   6746	0B6A  C4			     db	     -60
   6747	0B6B  C4			     db	     -60
   6748	0B6C  C4			     db	     -60
   6749	0B6D  BF			     db	     -65
   6750	0B6E  00			     db	     0
   6751	0B6F  B3			     db	     -77
   6752	0B70  20 50 49 44 20 20	3D+	     db	     ' PID  =	    '
   6753	      20 20 20 20 20 20	20
   6754	0B7E  B3			     db	     -77
   6755	0B7F  00			     db	     0
   6756	0B80  B3			     db	     -77
   6757	0B81  20 45 78 65 63 75	63+	     db	     ' Execucao:    '
   6758	      61 6F 3A 20 20 20	20
   6759	0B8F  B3			     db	     -77
   6760	0B90  00			     db	     0
   6761	0B91  B3			     db	     -77
   6762	0B92  20 20 20 20 20 20	20+	     db	     '		    '
   6763	      20 20 20 20 20 20	20
   6764	0BA0  B3			     db	     -77
   6765	0BA1  00			     db	     0
   6766	0BA2  C0			     db	     -64
   6767	0BA3  C4			     db	     -60
   6768	0BA4  C4			     db	     -60
   6769	0BA5  C4			     db	     -60
   6770	0BA6  C4			     db	     -60
   6771	0BA7  C4			     db	     -60
   6772	0BA8  C4			     db	     -60
   6773	0BA9  C4			     db	     -60
   6774	0BAA  C4			     db	     -60
   6775	0BAB  C4			     db	     -60
   6776	0BAC  C4			     db	     -60
   6777	0BAD  C4			     db	     -60
   6778	0BAE  C4			     db	     -60
   6779	0BAF  C4			     db	     -60
   6780	0BB0  C4			     db	     -60
   6781	0BB1  D9			     db	     -39
   6782	0BB2  00			     db	     0
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 120
command.ASM



   6783	0BB3  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6784	      20 73 65 6D 74 65	73+
   6785	      74 3A 20 6E 75 6D	65+
   6786	      72 6F 20 69 6E 76	61+
   6787	      6C 69 64 6F 20 64	65+
   6788	      20 61 72 67 75 6D	65+
   6789	      6E 74 6F 73 21
   6790	0BE2  0A			     db	     10
   6791	0BE3  00			     db	     0
   6792	0BE4  45 72 72 6F 20 65	6D+	     db	     'Erro em demo: fork() nao conseguiu criar thread!'
   6793	      20 64 65 6D 6F 3A	20+
   6794	      66 6F 72 6B 28 29	20+
   6795	      6E 61 6F 20 63 6F	6E+
   6796	      73 65 67 75 69 75	20+
   6797	      63 72 69 61 72 20	74+
   6798	      68 72 65 61 64 21
   6799	0C14  0A			     db	     10
   6800	0C15  00			     db	     0
   6801	0C16  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6802	      20 73 65 6D 74 65	73+
   6803	      74 3A 20 6E 75 6D	65+
   6804	      72 6F 20 69 6E 76	61+
   6805	      6C 69 64 6F 20 64	65+
   6806	      20 61 72 67 75 6D	65+
   6807	      6E 74 6F 73 21
   6808	0C45  0A			     db	     10
   6809	0C46  00			     db	     0
   6810	0C47  45 72 72 6F 20 65	6D+	     db	     'Erro em semtest: numero invalido de argumentos!'
   6811	      20 73 65 6D 74 65	73+
   6812	      74 3A 20 6E 75 6D	65+
   6813	      72 6F 20 69 6E 76	61+
   6814	      6C 69 64 6F 20 64	65+
   6815	      20 61 72 67 75 6D	65+
   6816	      6E 74 6F 73 21
   6817	0C76  0A			     db	     10
   6818	0C77  00			     db	     0
   6819	0C78  73 74 6F 70 3A 20	6E+	     db	     'stop: nenhum parametro foi fornecido'
   6820	      65 6E 68 75 6D 20	70+
   6821	      61 72 61 6D 65 74	72+
   6822	      6F 20 66 6F 69 20	66+
   6823	      6F 72 6E 65 63 69	64+
   6824	      6F
   6825	0C9C  0A			     db	     10
   6826	0C9D  00			     db	     0
   6827	0C9E  73 74 6F 70 3A 20	69+	     db	     'stop: impossivel suspender a thread'
   6828	      6D 70 6F 73 73 69	76+
   6829	      65 6C 20 73 75 73	70+
   6830	      65 6E 64 65 72 20	61+
   6831	      20 74 68 72 65 61	64
   6832	0CC1  0A			     db	     10
   6833	0CC2  00			     db	     0
   6834	0CC3  72 65 73 75 6D 65	3A+	     db	     'resume: nenhum parametro foi fornecido'
   6835	      20 6E 65 6E 68 75	6D+
   6836	      20 70 61 72 61 6D	65+
   6837	      74 72 6F 20 66 6F	69+
   6838	      20 66 6F 72 6E 65	63+
   6839	      69 64 6F
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 121
command.ASM



   6840	0CE9  0A			     db	     10
   6841	0CEA  00			     db	     0
   6842	0CEB  72 65 73 75 6D 65	3A+	     db	     'resume: impossivel reiniciar a thread'
   6843	      20 69 6D 70 6F 73	73+
   6844	      69 76 65 6C 20 72	65+
   6845	      69 6E 69 63 69 61	72+
   6846	      20 61 20 74 68 72	65+
   6847	      61 64
   6848	0D10  0A			     db	     10
   6849	0D11  00			     db	     0
   6850	0D12  20 20 20 20 20 20	20+	     db	     '		    '
   6851	      20 20 20 20 20 20	20
   6852	0D20  00			     db	     0
   6853	0D21  20 20 20 20 20 20	20+	     db	     '		    '
   6854	      20 20 20 20 20 20	20
   6855	0D2F  00			     db	     0
   6856	0D30  20 20 20 50 72 6F	64+	     db	     '	 Prodcons   '
   6857	      63 6F 6E 73 20 20	20
   6858	0D3E  00			     db	     0
   6859	0D3F  54 61 6D 61 6E 68	6F+	     db	     'Tamanho do buffer:'
   6860	      20 64 6F 20 62 75	66+
   6861	      66 65 72 3A
   6862	0D51  00			     db	     0
   6863	0D52  58 20			     db	     'X	'
   6864	0D54  00			     db	     0
   6865	0D55  20 20 58			     db	     '	X'
   6866	0D58  00			     db	     0
   6867	0D59  50 72 6F 64 75 74	6F+	     db	     'Produtor:	      '
   6868	      72 3A 20 20 20 20	20+
   6869	      20 20
   6870	0D69  00			     db	     0
   6871	0D6A  43 6F 6E 73 75 6D	69+	     db	     'Consumidor:	'
   6872	      64 6F 72 3A 20 20	20+
   6873	      20 20 20 20
   6874	0D7C  00			     db	     0
   6875	0D7D  20 2D 2D 2D 2D 2D	2D+	     db	     ' --------------- '
   6876	      2D 2D 2D 2D 2D 2D	2D+
   6877	      2D 2D 20
   6878	0D8E  00			     db	     0
   6879	0D8F  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	numero invalido	de argumentos!'
   6880	      20 70 72 6F 64 63	6F+
   6881	      6E 73 3A 20 6E 75	6D+
   6882	      65 72 6F 20 69 6E	76+
   6883	      61 6C 69 64 6F 20	64+
   6884	      65 20 61 72 67 75	6D+
   6885	      65 6E 74 6F 73 21
   6886	0DBF  0A			     db	     10
   6887	0DC0  00			     db	     0
   6888	0DC1  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	numero invalido	de tamanho do buffer!'
   6889	      20 70 72 6F 64 63	6F+
   6890	      6E 73 3A 20 6E 75	6D+
   6891	      65 72 6F 20 69 6E	76+
   6892	      61 6C 69 64 6F 20	64+
   6893	      65 20 74 61 6D 61	6E+
   6894	      68 6F 20 64 6F 20	62+
   6895	      75 66 66 65 72 21
   6896	0DF8  0A			     db	     10
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 122
command.ASM



   6897	0DF9  00			     db	     0
   6898	0DFA  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	erro ao	criar fork!'
   6899	      20 70 72 6F 64 63	6F+
   6900	      6E 73 3A 20 65 72	72+
   6901	      6F 20 61 6F 20 63	72+
   6902	      69 61 72 20 66 6F	72+
   6903	      6B 21
   6904	0E1F  0A			     db	     10
   6905	0E20  00			     db	     0
   6906	0E21  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	erro ao	criar fork!'
   6907	      20 70 72 6F 64 63	6F+
   6908	      6E 73 3A 20 65 72	72+
   6909	      6F 20 61 6F 20 63	72+
   6910	      69 61 72 20 66 6F	72+
   6911	      6B 21
   6912	0E46  0A			     db	     10
   6913	0E47  00			     db	     0
   6914	0E48  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	numero invalido	de argumentos!'
   6915	      20 70 72 6F 64 63	6F+
   6916	      6E 73 3A 20 6E 75	6D+
   6917	      65 72 6F 20 69 6E	76+
   6918	      61 6C 69 64 6F 20	64+
   6919	      65 20 61 72 67 75	6D+
   6920	      65 6E 74 6F 73 21
   6921	0E78  0A			     db	     10
   6922	0E79  00			     db	     0
   6923	0E7A  45 72 72 6F 20 65	6D+	     db	     'Erro em prodcons:	numero invalido	de argumentos!'
   6924	      20 70 72 6F 64 63	6F+
   6925	      6E 73 3A 20 6E 75	6D+
   6926	      65 72 6F 20 69 6E	76+
   6927	      61 6C 69 64 6F 20	64+
   6928	      65 20 61 72 67 75	6D+
   6929	      65 6E 74 6F 73 21
   6930	0EAA  0A			     db	     10
   6931	0EAB  00			     db	     0
   6932	0EAC			     _DATA   ends
   6933	192B			     _TEXT   segment byte public 'CODE'
   6934	192B			     _TEXT   ends
   6935					     public  _consumidor
   6936					     public  _consome
   6937					     public  _produtor
   6938					     public  _produz
   6939					     public  _sleep
   6940					     public  _incrementaPosicaoNoBuffer
   6941					     public  _imprimeBuffer
   6942					     public  _imprimeConteudoBuffer
   6943					     public  _inicializaBuffer
   6944					     public  _sem_aplic
   6945					     public  _semid
   6946					     extrn   _miniSO_sem:word
   6947				     _exitcode	     equ     exitcode
   6948				     _demo_linha     equ     demo_linha
   6949				     _demo   equ     demo
   6950					     extrn   _miniSO_thread:word
   6951				     _cheio  equ     cheio
   6952				     _vazio  equ     vazio
   6953				     _mutex  equ     mutex
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 123
command.ASM



   6954				     _tempoDeConsumo equ     tempoDeConsumo
   6955				     _tempoDeProducao	     equ     tempoDeProducao
   6956				     _tamanhoDoBuffer	     equ     tamanhoDoBuffer
   6957				     _segundoDoProcessador   equ     segundoDoProcessador
   6958				     _buffer equ     buffer
   6959				     _commands	     equ     commands
   6960				     _var    equ     var
   6961				     _num_var	     equ     num_var
   6962				     _history_pos    equ     history_pos
   6963				     _history_nxt    equ     history_nxt
   6964				     _history_ini    equ     history_ini
   6965				     _history_len    equ     history_len
   6966				     _history	     equ     history
   6967				     _argv   equ     argv
   6968				     _argline	     equ     argline
   6969				     _palavra	     equ     palavra
   6970				     _cmdline	     equ     cmdline
   6971				     _end_command    equ     end_command
   6972					     extrn   _resume:near
   6973					     extrn   _stop:near
   6974					     extrn   _semdestroy:near
   6975					     extrn   _semdown:near
   6976					     extrn   _semup:near
   6977					     extrn   _semcreate:near
   6978					     extrn   _getpid:near
   6979					     extrn   _exit:near
   6980					     extrn   _waitpid:near
   6981					     extrn   _wait:near
   6982					     extrn   _kill:near
   6983					     extrn   _fork:near
   6984					     extrn   _reboot:near
   6985					     extrn   _inttostr:near
   6986					     extrn   _unsignedtostr:near
   6987					     extrn   _atoi:near
   6988					     extrn   _strlen:near
   6989					     extrn   _strcmp:near
   6990					     extrn   _strcpy:near
   6991					     extrn   _gettime:near
   6992					     extrn   _getdate:near
   6993					     extrn   _gotoxy:near
   6994					     extrn   _wherey:near
   6995					     extrn   _wherex:near
   6996					     extrn   _setcolor:near
   6997					     extrn   _getcolor:near
   6998					     extrn   _putstrxy:near
   6999					     extrn   _putstr:near
   7000					     extrn   _clrscr:near
   7001					     extrn   _getch:near
   7002					     extrn   _putch:near
   7003					     public  _cmd_tprod
   7004					     public  _cmd_tcons
   7005					     public  _cmd_prodcons
   7006					     public  _cmd_resume
   7007					     public  _cmd_stop
   7008					     public  _cmd_semdestroy
   7009					     public  _cmd_semup
   7010					     public  _cmd_semtest
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 124
command.ASM



   7011					     public  _cmd_semcreate
   7012					     public  _cmd_semls
   7013					     public  _cmd_waitpid
   7014					     public  _cmd_wait
   7015					     public  _cmd_echo
   7016					     public  _cmd_unset
   7017					     public  _cmd_set
   7018					     public  _cmd_demo
   7019					     public  _cmd_kill
   7020					     public  _cmd_ps
   7021					     public  _cmd_ver
   7022					     public  _cmd_cls
   7023					     public  _cmd_time
   7024					     public  _cmd_date
   7025					     public  _cmd_help
   7026					     public  _cmd_reboot
   7027					     public  _cmd_exit
   7028				     _command_var_set	     equ     command_var_set
   7029				     _command_var_value	     equ     command_var_value
   7030				     _command_var_unset	     equ     command_var_unset
   7031				     _command_var_search     equ     command_var_search
   7032				     _command_var_list	     equ     command_var_list
   7033				     _command_var_nextfree   equ     command_var_nextfree
   7034				     _command_var_init	     equ     command_var_init
   7035				     _command_showprompt     equ     command_showprompt
   7036				     _command_backspace	     equ     command_backspace
   7037					     public  _command
   7038				     _s@     equ     s@
   7039					     end
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 125
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/06/17"
??FILENAME		Text   "command	"
??TIME			Text   "01:51:20"
??VERSION		Number 030A
@10@114			Near   _TEXT:0785		   1876	 #1883
@10@170			Near   _TEXT:079A		   1893	 #1899
@10@254			Near   _TEXT:07BB		   1923	 #1929
@10@282			Near   _TEXT:07D3		   1913	 #1943
@10@310			Near   _TEXT:07EF		   1882	 #1963
@10@86			Near   _TEXT:0783		   #1881  1898	1928  1962
@11@58			Near   _TEXT:0804		   1997	 #1998
@12@58			Near   _TEXT:081B		   2031	 #2032
@13@114			Near   _TEXT:0868		   2073	 #2107
@13@170			Near   _TEXT:0871		   2115	 #2116
@13@58			Near   _TEXT:0839		   #2074  2109
@14@58			Near   _TEXT:090A		   2254	 #2255
@15@58			Near   _TEXT:09AA		   2395	 #2396
@16@58			Near   _TEXT:09C2		   2432	 #2433
@17@58			Near   _TEXT:09F1		   2489	 #2490
@18@1010		Near   _TEXT:0C60		   2997	 #3007
@18@1066		Near   _TEXT:0C7A		   2552	 #3028
@18@1094		Near   _TEXT:0C7B		   2541	 #3030
@18@114			Near   _TEXT:0A42		   #2574  2587
@18@1150		Near   _TEXT:0C87		   3041	 #3042
@18@142			Near   _TEXT:0A4A		   2573	 #2583
@18@198			Near   _TEXT:0A8C		   #2630  2643
@18@226			Near   _TEXT:0A94		   2629	 #2639
@18@282			Near   _TEXT:0AD6		   #2686  2699
@18@310			Near   _TEXT:0ADE		   2685	 #2695
@18@450			Near   _TEXT:0B14		   #2731  3052
@18@478			Near   _TEXT:0B18		   #2737  2749	2756  2763  2770  2777	2784  2791
@18@506			Near   _TEXT:0B20		   #2743  3053
@18@534			Near   _TEXT:0B26		   #2750  3054
@18@562			Near   _TEXT:0B2C		   #2757  3055
@18@58			Near   _TEXT:0A15		   #2542  3033
@18@590			Near   _TEXT:0B32		   #2764  3056
@18@618			Near   _TEXT:0B38		   #2771  3057
@18@646			Near   _TEXT:0B3E		   #2778  3058
@18@674			Near   _TEXT:0B44		   #2785  3059
@18@702			Near   _TEXT:0B4A		   2728	 2742  #2792
@18@730			Near   _TEXT:0B7A		   #2827  2840
@18@758			Near   _TEXT:0B82		   2826	 #2836
@18@814			Near   _TEXT:0BC4		   #2884  2897
@18@842			Near   _TEXT:0BCC		   2883	 #2893
@18@898			Near   _TEXT:0C0E		   #2941  2954
@18@926			Near   _TEXT:0C16		   2940	 #2950
@18@982			Near   _TEXT:0C58		   #2998  3011
@18@C1266		Word   _TEXT:0C8B		   2730	 #3051
@19@114			Near   _TEXT:0CB7		   #3099  3138
@19@142			Near   _TEXT:0CB9		   3084	 #3101
@19@198			Near   _TEXT:0CDB		   3124	 #3131
@19@226			Near   _TEXT:0CDF		   3100	 #3139
@19@86			Near   _TEXT:0CAE		   #3090  3130
@1@1094			Near   _TEXT:0206		   564	#579
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 126
Symbol Table



@1@1150			Near   _TEXT:0216		   578	585  #594
@1@1178			Near   _TEXT:0218		   559	#601
@1@1262			Near   _TEXT:0233		   618	#623
@1@1290			Near   _TEXT:023A		   607	#632
@1@1374			Near   _TEXT:0257		   649	#655
@1@142			Near   _TEXT:012D		   #366	 371
@1@1430			Near   _TEXT:0264		   661	#667
@1@1458			Near   _TEXT:026A		   600	631  639  654  666  #673
@1@1514			Near   _TEXT:0272		   #684	 697
@1@1542			Near   _TEXT:0276		   683	#695
@1@1598			Near   _TEXT:02A8		   549	682  #732
@1@1626			Near   _TEXT:02AB		   #739	 1322
@1@1766			Near   _TEXT:02D6		   763	#769
@1@1794			Near   _TEXT:02DC		   768	#775
@1@1822			Near   _TEXT:02DE		   756	#780
@1@1878			Near   _TEXT:02EF		   790	#795
@1@1934			Near   _TEXT:02FE		   779	801  #806
@1@1962			Near   _TEXT:0300		   #808	 822
@1@1990			Near   _TEXT:0304		   807	#820
@1@2074			Near   _TEXT:033D		   746	750  828  #862
@1@2102			Near   _TEXT:033F		   445	520  541  738  868  #869
@1@2130			Near   _TEXT:0342		   #875	 1337
@1@2158			Near   _TEXT:0367		   #906	 1071
@1@2186			Near   _TEXT:0369		   #908	 921  924
@1@2214			Near   _TEXT:036C		   907	#915
@1@226			Near   _TEXT:013D		   369	#373
@1@2298			Near   _TEXT:0387		   918	#925
@1@2354			Near   _TEXT:0393		   931	#936
@1@2382			Near   _TEXT:0397		   #942	 964
@1@2410			Near   _TEXT:03A5		   941	#955
@1@2494			Near   _TEXT:03C0		   958	961  #965
@1@254			Near   _TEXT:0141		   #375	 1336
@1@2578			Near   _TEXT:0403		   992	#1017
@1@2606			Near   _TEXT:0405		   975	1016  #1023
@1@2662			Near   _TEXT:0441		   1060	 #1065
@1@2690			Near   _TEXT:0444		   1022	 #1070
@1@2718			Near   _TEXT:0447		   935	1064  #1072
@1@2774			Near   _TEXT:0453		   1079	 #1088
@1@282			Near   _TEXT:0144		   #381	 1335
@1@2830			Near   _TEXT:0478		   1109	 #1115
@1@2886			Near   _TEXT:0487		   1121	 #1127
@1@2914			Near   _TEXT:048B		   1114	 1126  #1133
@1@2970			Near   _TEXT:049A		   1139	 #1145
@1@2998			Near   _TEXT:049E		   1144	 #1151
@1@3026			Near   _TEXT:04A7		   #1162  1190
@1@3082			Near   _TEXT:04CE		   1177	 #1186
@1@3110			Near   _TEXT:04CF		   1161	 #1188
@1@3138			Near   _TEXT:04D4		   1185	 #1191
@1@3194			Near   _TEXT:0513		   1200	 #1239
@1@3222			Near   _TEXT:051D		   1238	 #1250
@1@3278			Near   _TEXT:0527		   1256	 #1261
@1@3306			Near   _TEXT:052B		   372	#1271
@1@3362			Near   _TEXT:0541		   349	380  401  423  874  1087  1270	1277  #1292
@1@338			Near   _TEXT:014C		   387	#396
@1@366			Near   _TEXT:014F		   #402	 1338
@1@394			Near   _TEXT:0151		   #404	 418
@1@422			Near   _TEXT:0155		   403	#416
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 127
Symbol Table



@1@478			Near   _TEXT:015C		   #424	 1334
@1@562			Near   _TEXT:016F		   #439	 444
@1@58			Near   _TEXT:011A		   #350	 1295
@1@646			Near   _TEXT:017F		   442	#446
@1@674			Near   _TEXT:0183		   #448	 1319
@1@702			Near   _TEXT:018B		   #455	 468
@1@730			Near   _TEXT:018F		   454	#466
@1@786			Near   _TEXT:019F		   #483	 511
@1@842			Near   _TEXT:01C4		   482	#509
@1@898			Near   _TEXT:01D0		   #521	 1321
@1@954			Near   _TEXT:01D8		   527	#536
@1@982			Near   _TEXT:01DB		   #542	 1320
@1@C3234		Word   _TEXT:0561		   365	#1323
@1@C3330		Word   _TEXT:0551		   438	#1310
@20@114			Near   _TEXT:0CFB		   #3177  3275
@20@142			Near   _TEXT:0CFD		   3167	 #3179
@20@198			Near   _TEXT:0D18		   3185	 #3198
@20@254			Near   _TEXT:0D34		   3203	 #3215
@20@282			Near   _TEXT:0D39		   3197	 3214  #3221
@20@366			Near   _TEXT:0D4B		   #3231  3294
@20@394			Near   _TEXT:0D51		   #3239  3293
@20@422			Near   _TEXT:0D57		   #3248  3292
@20@450			Near   _TEXT:0D5D		   #3258  3291
@20@478			Near   _TEXT:0D61		   3238	 3247  3257  #3266
@20@506			Near   _TEXT:0D6C		   3228	 #3276
@20@534			Near   _TEXT:0D6E		   3178	 #3278
@20@86			Near   _TEXT:0CF9		   #3175  3277
@20@C482		Word   _TEXT:0D74		   3230	 #3290
@21@114			Near   _TEXT:0D95		   #3325  3357
@21@142			Near   _TEXT:0D97		   3310	 #3327
@21@198			Near   _TEXT:0DB4		   3343	 #3350
@21@226			Near   _TEXT:0DB8		   3326	 #3358
@21@86			Near   _TEXT:0D8C		   #3316  3349
@22@114			Near   _TEXT:0DEE		   3399	 #3405
@22@142			Near   _TEXT:0DF9		   3404	 #3415
@22@170			Near   _TEXT:0DFE		   #3421  3452
@22@226			Near   _TEXT:0E09		   3426	 #3429
@22@254			Near   _TEXT:0E11		   3428	 #3437
@22@310			Near   _TEXT:0E22		   3420	 #3450
@22@338			Near   _TEXT:0E27		   3387	 #3453
@22@394			Near   _TEXT:0E35		   3460	 #3468
@22@422			Near   _TEXT:0E39		   3473	 #3474
@23@114			Near   _TEXT:0F02		   3611	 #3640
@23@170			Near   _TEXT:0F0C		   #3649  3679
@23@226			Near   _TEXT:0F35		   3648	 #3677
@23@282			Near   _TEXT:0F3F		   #3686  3716
@23@338			Near   _TEXT:0F68		   3685	 #3714
@23@394			Near   _TEXT:0F72		   #3723  3753
@23@450			Near   _TEXT:0F9B		   3722	 #3751
@23@506			Near   _TEXT:0FA5		   #3760  3790
@23@562			Near   _TEXT:0FCE		   3759	 #3788
@23@58			Near   _TEXT:0ED9		   #3612  3642
@23@618			Near   _TEXT:0FD8		   #3797  3827
@23@674			Near   _TEXT:1001		   3796	 #3825
@24@114			Near   _TEXT:102A		   #3873  3923
@24@142			Near   _TEXT:102C		   3858	 #3875
@24@198			Near   _TEXT:103E		   3885	 #3890
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 128
Symbol Table



@24@254			Near   _TEXT:1062		   3909	 #3916
@24@282			Near   _TEXT:1066		   3874	 #3924
@24@86			Near   _TEXT:1021		   #3864  3915
@25@114			Near   _TEXT:1084		   3949	 #3965
@25@142			Near   _TEXT:10F2		   3964	 #4055
@25@86			Near   _TEXT:1082		   #3963  4054
@26@58			Near   _TEXT:1169		   4167	 #4168
@27@114			Near   _TEXT:1228		   4229	 #4332
@27@142			Near   _TEXT:1229		   4219	 #4334
@27@198			Near   _TEXT:125F		   4380	 #4381
@27@58			Near   _TEXT:1194		   #4220  4337
@28@114			Near   _TEXT:1280		   #4425  4521
@28@142			Near   _TEXT:1282		   4410	 #4427
@28@198			Near   _TEXT:12A0		   4450	 #4452
@28@226			Near   _TEXT:12EE		   4426	 #4522
@28@86			Near   _TEXT:127D		   #4423  4451
@29@114			Near   _TEXT:13B1		   4643	 #4672
@29@170			Near   _TEXT:13C1		   #4683  4714
@29@226			Near   _TEXT:13EA		   4682	 #4712
@29@58			Near   _TEXT:1388		   #4644  4674
@30@114			Near   _TEXT:1413		   #4762  4812
@30@142			Near   _TEXT:1415		   4747	 #4764
@30@198			Near   _TEXT:1438		   4784	 #4789
@30@254			Near   _TEXT:144B		   4798	 #4805
@30@282			Near   _TEXT:144F		   4763	 #4813
@30@86			Near   _TEXT:140A		   #4753  4804
@31@114			Near   _TEXT:146C		   4835	 #4851
@31@142			Near   _TEXT:1486		   4850	 #4870
@31@86			Near   _TEXT:146A		   #4849  4869
@32@114			Near   _TEXT:14A5		   4893	 #4909
@32@142			Near   _TEXT:14BF		   4908	 #4928
@32@86			Near   _TEXT:14A3		   #4907  4927
@33@114			Near   _TEXT:14E1		   4957	 #4973
@33@170			Near   _TEXT:1507		   4996	 #5003
@33@198			Near   _TEXT:150B		   4972	 #5009
@33@86			Near   _TEXT:14DF		   #4971  5008
@34@114			Near   _TEXT:152D		   5039	 #5055
@34@170			Near   _TEXT:1553		   5078	 #5085
@34@198			Near   _TEXT:1557		   5054	 #5091
@34@86			Near   _TEXT:152B		   #5053  5090
@35@114			Near   _TEXT:156D		   5111	 #5120
@35@58			Near   _TEXT:1562		   #5112  5122
@36@114			Near   _TEXT:15BD		   5154	 #5185
@36@58			Near   _TEXT:158E		   #5155  5187
@38@114			Near   _TEXT:1712		   5433	 #5437
@38@142			Near   _TEXT:1714		   5438	 #5439
@38@86			Near   _TEXT:170F		   5431	 #5434
@39@114			Near   _TEXT:173C		   5469	 #5473
@39@198			Near   _TEXT:1750		   5478	 #5481
@39@226			Near   _TEXT:1758		   5459	 #5484
@39@310			Near   _TEXT:1768		   5489	 #5492
@39@58			Near   _TEXT:1728		   #5460  5488	5491
@39@86			Near   _TEXT:1734		   #5470  5477	5480
@3@86			Near   _TEXT:05DF		   1424	 #1453
@40@58			Near   _TEXT:1787		   5526	 #5527
@41@58			Near   _TEXT:1790		   #5547  5589
@42@58			Near   _TEXT:17DF		   5624	 #5625
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 129
Symbol Table



@43@58			Near   _TEXT:17E8		   #5645  5687
@44@114			Near   _TEXT:1836		   #5726  5856
@44@142			Near   _TEXT:1839		   5711	 #5728
@44@198			Near   _TEXT:1870		   5763	 #5770
@44@254			Near   _TEXT:18A9		   5816	 #5823
@44@310			Near   _TEXT:18BD		   5835	 #5842
@44@338			Near   _TEXT:18CA		   5727	 #5857
@44@86			Near   _TEXT:182D		   #5717  5769	5822  5841
@45@114			Near   _TEXT:18E5		   5876	 #5892
@45@142			Near   _TEXT:18FA		   5891	 #5907
@45@86			Near   _TEXT:18E3		   #5890  5906
@46@114			Near   _TEXT:1914		   5925	 #5941
@46@142			Near   _TEXT:1929		   5940	 #5956
@46@86			Near   _TEXT:1912		   #5939  5955
@4@114			Near   _TEXT:060F		   1483	 #1502
@4@58			Near   _TEXT:05F2		   #1484  1504
@5@114			Near   _TEXT:062B		   1530	 #1538
@5@142			Near   _TEXT:062F		   #1544  1563
@5@198			Near   _TEXT:0643		   1553	 #1559
@5@226			Near   _TEXT:0644		   1543	 #1561
@5@282			Near   _TEXT:064B		   1537	 #1565
@5@58			Near   _TEXT:0626		   #1531  1564
@5@86			Near   _TEXT:0629		   #1536  1558
@6@114			Near   _TEXT:06B1		   1605	 #1659
@6@142			Near   _TEXT:06B2		   1595	 #1661
@6@58			Near   _TEXT:065E		   #1596  1663
@7@114			Near   _TEXT:06CE		   1690	 #1698
@7@142			Near   _TEXT:06D2		   #1704  1729
@7@198			Near   _TEXT:06F2		   1719	 #1725
@7@226			Near   _TEXT:06F3		   1703	 #1727
@7@282			Near   _TEXT:06FA		   1697	 #1731
@7@58			Near   _TEXT:06C9		   #1691  1730
@7@86			Near   _TEXT:06CC		   #1696  1724
@8@114			Near   _TEXT:0718		   1765	 #1772
@8@142			Near   _TEXT:073C		   1771	 #1798
@8@86			Near   _TEXT:0716		   #1770  1797
@9@114			Near   _TEXT:075B		   1830	 #1838
@9@142			Near   _TEXT:0769		   1837	 #1848
@9@86			Near   _TEXT:0759		   #1836  1847
@@0			Near   _TEXT:01E5		   548	#550
@@1			Near   _TEXT:02B5		   745	#747
@@2			Near   _TEXT:02BF		   749	#751
@@3			Near   _TEXT:054B		   1294	 #1296
@@4			Near   _TEXT:0A28		   2551	 #2553
@@5			Near   _TEXT:0C83		   3032	 #3034
@@6			Near   _TEXT:11A4		   4228	 #4230
@@7			Near   _TEXT:1231		   4336	 #4338
@CPU			Text   0101H
@CURSEG			Text   _TEXT			   #10	#14  #18  #22  #120  #2500  #2503  #3485  #3493	 #5964	#6004	  +
							   #6933
@FILENAME		Text   COMMAND
@WORDSIZE		Text   2			   #10	#14  #18  #22  #120  #2500  #2503  #3485  #3493	 #5964	#6004	  +
							   #6933
ARGLINE			Byte   _BSS:03BA		   1034	 1042  #5993
ARGV			Dword  _BSS:037A		   1046	 1047  1172  1173  1204	 #5991
B@			Byte   _BSS:0000		   #19
B@W			Word   _BSS:0000		   #20	2559  2567  2592  2615	2623  2648  2671  2679	2704  2812  2820  +
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 130
Symbol Table



							   2845	 2869  2877  2902  2926	 2934  2959  2983  2991	 3016
BUFFER			Word   _BSS:0020		   5118	 5163  5515  5613  #5977
CHEIO			Word   _BSS:0016		   5579	 5650  5796  #5967
CMDLINE			Byte   _BSS:0638		   709	717  726  839  847  856	 891  897  1095	 1290  #5997
COMMANDS		Word   _DATA:0002		   #26	1171  1211  2083  2095
COMMAND_BACKSPACE	Near   _TEXT:0575		   395	415  465  535  694  819	 #1343
COMMAND_SHOWPROMPT	Near   _TEXT:059F		   348	516  1083  1260	 #1400
COMMAND_VAR_INIT	Near   _TEXT:05EB		   321	#1473
COMMAND_VAR_LIST	Near   _TEXT:064D		   #1577  3171
COMMAND_VAR_NEXTFREE	Near   _TEXT:061C		   #1520  1917
COMMAND_VAR_SEARCH	Near   _TEXT:06BC		   #1678  1757	1822  1905
COMMAND_VAR_SET		Near   _TEXT:076C		   331	342  1233  #1860  3194	3211
COMMAND_VAR_UNSET	Near   _TEXT:06FD		   #1745  3335
COMMAND_VAR_VALUE	Near   _TEXT:073F		   982	1414  #1810
D@			Byte   _DATA:0000		   #15
D@W			Word   _DATA:0000		   #16
DEMO			Near   _TEXT:0E3F		   #3498  3904
DEMO_LINHA		Word   _DATA:00B0		   #3486  3511	3880  3884  3889  4549	4779  4783  4788  5151	5215
END_COMMAND		Word   _BSS:0657		   146	1255  1293  2026  #5999
EXITCODE		Word   _DATA:00B2		   #3489  3516	3900
HISTORY			Byte   _BSS:0244		   496	706  836  1101	#5989
HISTORY_INI		Word   _BSS:0240		   150	488  638  648  1120  1125  1132	 #5985
HISTORY_LEN		Word   _BSS:0242		   510	547  558  744  755  760	 1108  1113  #5987
HISTORY_NXT		Word   _BSS:023E		   154	568  611  800  1098  1138  1143	 1150  #5983
HISTORY_POS		Word   _BSS:023C		   158	453  563  570  584  589	 606  613  617	622  637  647  653  660	  +
							   665	672  703  748  762  767	 774  785  789	794  799  805  827  833	  +
							   880	#5981
MUTEX			Word   _BSS:001A		   5558	 5573  5656  5671  5781	 #5971
NUM_VAR			Word   _DATA:0000		   #23	1509  1529  1792
PALAVRA			Byte   _BSS:0619		   949	970  974  980  999  1007  1030	#5995
S@			Byte   _DATA:00B4		   27  28  30  31  33  34  36  37  39  40  42  43  45  46  48  49  51  52 +
							   54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76  78  79 +
							   81  82  84  85  87  88  90  91  93  94  96  97  99  100  102	 103  105 +
							   106	108  109  182  192  202	 216  226  232	238  252  262  272  282	  +
							   292	302  311  326  329  337	 340  1231  1245  1412	2064  2464  2473  +
							   2532	 2601  2657  2713  2736	 2748  2755  2762  2769	 2776  2783  2790 +
							   2798	 2855  2912  2969  3089	 3129  3190  3237  3246	 3256  3265  3315 +
							   3348	 3392  3523  3534  3547	 3560  3573  3863  3914	 3954  3991  4018 +
							   4045	 4104  4131  4158  4210	 4235  4265  4295  4344	 4371  4415  4458 +
							   4485	 4512  4556  4567  4580	 4593  4606  4752  4803	 4840  4898  4962 +
							   4998	 5044  5080  5224  5236	 5248  5261  5297  5313	 5337  5373  5400 +
							   5716	 5768  5821  5840  5881	 5930  #6005
SEGUNDODOPROCESSADOR	Word   _DATA:00AA		   #111	 5476  5479
TAMANHODOBUFFER		Word   _DATA:00AE		   #116	 5121  5186  5272  5428	 5757  5762  5785
TEMPODECONSUMO		Word   _BSS:001C		   5363	 5748  5953  #5973
TEMPODEPRODUCAO		Word   _BSS:001E		   5327	 5586  5684  5739  5849	 5904  #5975
VAR			Word   _BSS:0048		   1492	 1500  1552  1604  1613	 1639  1712  1780  1788	 1845  1939  1954 +
							   #5979
VAZIO			Word   _BSS:0018		   5552	 5677  5788  #5969
_ARGLINE		Alias  ARGLINE			   #6968
_ARGV			Alias  ARGV			   #6967
_ATOI			Near   ----:---- Extern		   3109	 3897  3973  4435  4772	 4859  4917  4981  5063	 5736  5745  5754 +
							   5901	 5950  #6987
_BUFFER			Alias  BUFFER			   #6958
_CHEIO			Alias  CHEIO			   #6951
_CLRSCR			Near   ----:---- Extern		   170	2427  #7000
_CMDLINE		Alias  CMDLINE			   #6970
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 131
Symbol Table



_CMD_CLS		Near   _TEXT:09B0		   44  47  #2410  7022
_CMD_DATE		Near   _TEXT:0875		   38  #2129  7024
_CMD_DEMO		Near   _TEXT:1014		   65  #3848  7018
_CMD_ECHO		Near   _TEXT:0DBC		   74  #3370  7015
_CMD_EXIT		Near   _TEXT:0808		   53  56  #2011  7027
_CMD_HELP		Near   _TEXT:081D		   29  32  #2043  7025
_CMD_KILL		Near   _TEXT:0C9B		   62  #3064  7019
_CMD_PRODCONS		Near   _TEXT:181C		   104	#5700  7005
_CMD_PS			Near   _TEXT:09F5		   59  #2508  7020
_CMD_REBOOT		Near   _TEXT:07F2		   50  #1975  7026
_CMD_RESUME		Near   _TEXT:150F		   101	#5022  7006
_CMD_SEMCREATE		Near   _TEXT:1265		   86  #4395  7011
_CMD_SEMDESTROY		Near   _TEXT:148A		   95  #4882  7008
_CMD_SEMLS		Near   _TEXT:116F		   83  #4182  7012
_CMD_SEMTEST		Near   _TEXT:13FD		   89  #4736  7010
_CMD_SEMUP		Near   _TEXT:1451		   92  #4824  7009
_CMD_SET		Near   _TEXT:0CE3		   68  #3152  7017
_CMD_STOP		Near   _TEXT:14C3		   98  #4940  7007
_CMD_TCONS		Near   _TEXT:18FC		   110	#5918  7004
_CMD_TIME		Near   _TEXT:0910		   41  #2269  7023
_CMD_TPROD		Near   _TEXT:18CD		   107	#5869  7003
_CMD_UNSET		Near   _TEXT:0D7C		   71  #3299  7016
_CMD_VER		Near   _TEXT:09C6		   35  #2446  7021
_CMD_WAIT		Near   _TEXT:10F7		   80  #4068  7014
_CMD_WAITPID		Near   _TEXT:1068		   77  #3935  7013
_COMMAND		Near   _TEXT:0000		   #125	 7037
_COMMANDS		Alias  COMMANDS			   #6959
_COMMAND_BACKSPACE	Alias  COMMAND_BACKSPACE	   #7036
_COMMAND_SHOWPROMPT	Alias  COMMAND_SHOWPROMPT	   #7035
_COMMAND_VAR_INIT	Alias  COMMAND_VAR_INIT		   #7034
_COMMAND_VAR_LIST	Alias  COMMAND_VAR_LIST		   #7032
_COMMAND_VAR_NEXTFREE	Alias  COMMAND_VAR_NEXTFREE	   #7033
_COMMAND_VAR_SEARCH	Alias  COMMAND_VAR_SEARCH	   #7031
_COMMAND_VAR_SET	Alias  COMMAND_VAR_SET		   #7028
_COMMAND_VAR_UNSET	Alias  COMMAND_VAR_UNSET	   #7030
_COMMAND_VAR_VALUE	Alias  COMMAND_VAR_VALUE	   #7029
_CONSOME		Near   _TEXT:17C4		   #5603  5664	6936
_CONSUMIDOR		Near   _TEXT:17E2		   #5637  5830	6935
_DEMO			Alias  DEMO			   #6949
_DEMO_LINHA		Alias  DEMO_LINHA		   #6948
_END_COMMAND		Alias  END_COMMAND		   #6971
_EXIT			Near   ----:---- Extern		   3833	 4721  #6979
_EXITCODE		Alias  EXITCODE			   #6947
_FORK			Near   ----:---- Extern		   3906	 4795  5813  5832  #6983
_GETCH			Near   ----:---- Extern		   356	429  #7001
_GETCOLOR		Near   ----:---- Extern		   1428	 1589  #6997
_GETDATE		Near   ----:---- Extern		   2156	 #6992
_GETPID			Near   ----:---- Extern		   3586	 4619  #6978
_GETTIME		Near   ----:---- Extern		   2293	 #6991
_GOTOXY			Near   ----:---- Extern		   1370	 1385  #6993
_HISTORY		Alias  HISTORY			   #6966
_HISTORY_INI		Alias  HISTORY_INI		   #6964
_HISTORY_LEN		Alias  HISTORY_LEN		   #6965
_HISTORY_NXT		Alias  HISTORY_NXT		   #6963
_HISTORY_POS		Alias  HISTORY_POS		   #6962
_IMPRIMEBUFFER		Near   _TEXT:15C8		   #5201  5519	5617  5806  6941
_IMPRIMECONTEUDOBUFFER	Near   _TEXT:1575		   #5133  5308	6942
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 132
Symbol Table



_INCREMENTAPOSICAONOBU	Near   _TEXT:16FD		   #5421  5524	5622  6940
FFER
_INICIALIZABUFFER	Near   _TEXT:155B		   #5104  5801	6943
_INTTOSTR		Near   ----:---- Extern		   1222	 2561  2617  2673  2814	 2871  2928  2985  3591	 4003  4030  4116 +
							   4143	 4250  4280  4310  4356	 4470  4497  4624  5167	 5276  5331  5367 +
							   #6985
_KILL			Near   ----:---- Extern		   3117	 #6982
_MINISO_SEM		Word   ----:---- Extern		   4227	 4246  4276  4306  #6946
_MINISO_THREAD		Word   ----:---- Extern		   2550	 2613  2669  2725  2810	 2867  2924  2981  #6950
_MUTEX			Alias  MUTEX			   #6953
_NUM_VAR		Alias  NUM_VAR			   #6961
_PALAVRA		Alias  PALAVRA			   #6969
_PRODUTOR		Near   _TEXT:178A		   #5539  5811	6937
_PRODUZ			Near   _TEXT:176C		   #5505  5566	6938
_PUTCH			Near   ----:---- Extern		   475	506  886  1284	1378  1460  1623  1657	2104  2188  2219  2248	  +
							   2325	 2358  2389  2483  2581	 2637  2693  2834  2891	 2948  3005  3026 +
							   3435	 3466  4326  #7002
_PUTSTR			Near   ----:---- Extern		   184	194  204  218  228  234	 240  254  264	274  284  294  304  313	  +
							   498	719  849  1247	1442  1615  1641  2066	2084  2096  2180  2211	  +
							   2240	 2317  2350  2381  2466	 2475  2534  2594  2603	 2650  2659  2706 +
							   2715	 2739  2800  2847  2857	 2904  2914  2961  2971	 3018  3092  3268 +
							   3318	 3412  3446  3866  3956	 3993  4011  4020  4038	 4047  4106  4124 +
							   4133	 4151  4160  4212  4237	 4258  4267  4288  4297	 4318  4346  4364 +
							   4373	 4417  4460  4478  4487	 4505  4514  4755  4842	 4900  4964  5000 +
							   5046	 5082  5719  5883  5932	 #6999
_PUTSTRXY		Near   ----:---- Extern		   3528	 3541  3554  3567  3580	 3604  3637  3674  3711	 3748  3785  3822 +
							   4561	 4574  4587  4600  4613	 4637  4669  4709  5182	 5230  5242  5254 +
							   5267	 5290  5303  5321  5343	 5357  5379  5393  5406	 #6998
_REBOOT			Near   ----:---- Extern		   1992	 #6984
_RESUME			Near   ----:---- Extern		   5071	 #6972
_S@			Alias  S@			   #7038
_SEGUNDODOPROCESSADOR	Alias  SEGUNDODOPROCESSADOR	   #6957
_SEMCREATE		Near   ----:---- Extern		   4443	 5779  5786  5794  #6977
_SEMDESTROY		Near   ----:---- Extern		   4925	 #6974
_SEMDOWN		Near   ----:---- Extern		   4680	 5553  5559  5651  5657	 #6975
_SEMID			Word   _BSS:0014		   4679	 4775  #5965  6945
_SEMUP			Near   ----:---- Extern		   4867	 5574  5580  5672  5678	 #6976
_SEM_APLIC		Near   _TEXT:12F4		   #4536  4793	6944
_SETCOLOR		Near   ----:---- Extern		   165	176  199  209  223  245	 259  279  1435	 1451  1630  1650  #6996
_SLEEP			Near   _TEXT:1716		   #5450  5587	5685  5850  6939
_STOP			Near   ----:---- Extern		   4989	 #6973
_STRCMP			Near   ----:---- Extern		   1174	 1716  3396  #6989
_STRCPY			Near   ----:---- Extern		   711	841  1001  1036	 1103  1941  1956  #6990
_STRLEN			Near   ----:---- Extern		   728	858  1009  1872	 1889  2569  2625  2681	 2822  2879  2936  2993	  +
							   #6988
_TAMANHODOBUFFER	Alias  TAMANHODOBUFFER		   #6956
_TEMPODECONSUMO		Alias  TEMPODECONSUMO		   #6954
_TEMPODEPRODUCAO	Alias  TEMPODEPRODUCAO		   #6955
_UNSIGNEDTOSTR		Near   ----:---- Extern		   2172	 2203  2232  2309  2342	 2373  3624  3661  3698	 3735  3772  3809 +
							   4656	 4696  #6986
_VAR			Alias  VAR			   #6960
_VAZIO			Alias  VAZIO			   #6952
_WAIT			Near   ----:---- Extern		   4096	 #6981
_WAITPID		Near   ----:---- Extern		   3984	 #6980
_WHEREX			Near   ----:---- Extern		   1354	 #6995
_WHEREY			Near   ----:---- Extern		   1359	 #6994
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 133
Symbol Table




Macro Name						   Cref	(defined at #)

$COMM							   #1

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #12	13  27	28  30	31  33	34  36	37  39	40  42	43  45	46  48	49+
							   51  52  54  55  57  58  60  61  63  64  66  67  69  70  72  73  75  76 +
							   78  79  81  82  84  85  87  88  90  91  93  94  96  97  99  100  102	  +
							   103	105  106  108  109  146	 150  154  158	182  192  202  216  226	  +
							   232	238  252  262  272  282	 292  302  311	326  329  337  340  453	  +
							   488	496  510  547  558  563	 568  570  584	589  606  611  613  617	  +
							   622	637  638  647  648  653	 660  665  672	703  706  709  717  726	  +
							   744	748  755  760  762  767	 774  785  789	794  799  800  805  827	  +
							   833	836  839  847  856  880	 891  897  949	970  974  980  999  1007  +
							   1030	 1034  1042  1046  1047	 1095  1098  1101  1108	 1113  1120  1125 +
							   1132	 1138  1143  1150  1171	 1172  1173  1204  1211	 1231  1245  1255 +
							   1290	 1293  1412  1492  1500	 1509  1529  1552  1604	 1613  1639  1712 +
							   1780	 1788  1792  1845  1939	 1954  2026  2064  2083	 2095  2464  2473 +
							   2532	 2550  2559  2567  2592	 2601  2613  2615  2623	 2648  2657  2669 +
							   2671	 2679  2704  2713
  _BSS			16  0659 Word	Public	BSS	   12  #18  #2500  #5964
  _DATA			16  0EAC Word	Public	DATA	   12  #14  #22	 #3485	#6004
_TEXT			16  192B Byte	Public	CODE	   #10	13  #120  124  1342  1399  1472	 1519  1576  1677  1744	 1809	  +
							   1859	 1974  2010  2042  2128	 2268  2409  2445  #2503  2507	3063  3151+
							   3298	 3369  #3493  3497  3847  3934	4067  4181  4394  4535	4735  4823+
							   4881	 4939  5021  5103  5132	 5200  5420  5449  5504	 5538  5602  5636 +
							   5699	 5868  5917  #6933
Turbo Assembler	 Version 3.1	    12/06/17 01:51:21	    Page 134
Error Summary



*Warning* command.ASM(3495) Reserved word used as symbol: EXITCODE
